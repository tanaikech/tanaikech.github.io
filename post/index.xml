<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on tanaike</title>
    <link>https://tanaikech.github.io/post/</link>
    <description>Recent content in Posts on tanaike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Tue, 16 May 2017 11:42:56 +0900</lastBuildDate>
    <atom:link href="https://tanaikech.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Changing Line to Bars for Chart using GAS</title>
      <link>https://tanaikech.github.io/2017/05/16/changing-line-to-bars-for-chart-using-gas</link>
      <pubDate>Tue, 16 May 2017 11:42:56 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/16/changing-line-to-bars-for-chart-using-gas</guid>
      <description>

&lt;h2 id=&#34;sample-data&#34;&gt;Sample data&lt;/h2&gt;

&lt;p&gt;This is a sample data for this sample script. The column B was created by the normal distribution formula, and the column C was created by multiplying random number for column B.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csv&#34;&gt;A, B, C
1.0, 0.0001, 0.0000
1.5, 0.0009, 0.0006
2.0, 0.0044, 0.0037
2.5, 0.0175, 0.0133
3.0, 0.0540, 0.0236
3.5, 0.1296, 0.0533
4.0, 0.2420, 0.0073
4.5, 0.3522, 0.2468
5.0, 0.3990, 0.0843
5.5, 0.3522, 0.3352
6.0, 0.2420, 0.2201
6.5, 0.1296, 0.0607
7.0, 0.0540, 0.0256
7.5, 0.0175, 0.0006
8.0, 0.0044, 0.0030
8.5, 0.0009, 0.0005
9.0, 0.0001, 0.0001
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-chart&#34;&gt;Create chart&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;createChart()&lt;/code&gt; creates a chart from data. A chart with 2 lines is created by this method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function createChart(){
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var chart = sheet.newChart()
    .setChartType(Charts.ChartType.COMBO)
    .addRange(sheet.getRange(&#39;a1:a18&#39;))
    .addRange(sheet.getRange(&#39;b1:b18&#39;))
    .addRange(sheet.getRange(&#39;c1:c18&#39;))
    .setPosition(5, 5, 0, 0)
    .setOption(&#39;series&#39;, {
      0:{type: &#39;line&#39;, color: &#39;red&#39;, curveType: &#39;function&#39;},
      1:{type: &#39;line&#39;, color: &#39;blue&#39;, curveType: &#39;function&#39;},
    })
    .setOption(&#39;useFirstColumnAsDomain&#39;, true)
    .setOption(&#39;height&#39;, 280)
    .setOption(&#39;width&#39;, 480)
    .setOption(&#39;title&#39;, &#39;Sample chart&#39;)
    .setOption(&#39;vAxis&#39;, {
      minValue: 0,
      maxValue: 0.4,
      gridlines: {
        count: 10
      }
    })
    .build();
  sheet.insertChart(chart);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;created-chart&#34;&gt;Created chart&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://tanaikech.github.io/img/20170516_fig1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;note&#34;&gt;note&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.setChartType(Charts.ChartType.COMBO)&lt;/code&gt; defines COMBO chart.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.setOption(&#39;series&#39;, {})&lt;/code&gt; defines each type for range &lt;code&gt;&#39;b1:b18&#39;&lt;/code&gt; and &lt;code&gt;&#39;c1:c18&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0:{}&lt;/code&gt; and &lt;code&gt;1:{}&lt;/code&gt; of &lt;code&gt;.setOption(&#39;series&#39;, {})&lt;/code&gt; mean range &lt;code&gt;&#39;b1:b18&#39;&lt;/code&gt; and &lt;code&gt;&#39;c1:c18&#39;&lt;/code&gt;, respectively.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;modify-chart&#34;&gt;Modify chart&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;modifyChart()&lt;/code&gt; modifies the chart with 2 lines. It modifies from red line to red bars.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function modifyChart(){
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var chart = sheet.getCharts()[0];
  chart = chart.modify()
    .setChartType(Charts.ChartType.COMBO)
    .addRange(sheet.getRange(&#39;a1:a18&#39;))
    .addRange(sheet.getRange(&#39;b1:b18&#39;))
    .addRange(sheet.getRange(&#39;c1:c18&#39;))
    .setPosition(5, 5, 0, 0)
    .setOption(&#39;series&#39;, {
      0:{type: &#39;bars&#39;, color: &#39;red&#39;},
      1:{type: &#39;line&#39;, color: &#39;blue&#39;, curveType: &#39;function&#39;},
    })
    .setOption(&#39;useFirstColumnAsDomain&#39;, true)
    .setOption(&#39;height&#39;, 280)
    .setOption(&#39;width&#39;, 480)
    .setOption(&#39;title&#39;, &#39;Sample chart&#39;)
    .setOption(&#39;vAxis&#39;, {
      minValue: 0,
      maxValue: 0.4,
      gridlines: {
        count: 10
      }
    })
    .build();
  sheet.updateChart(chart);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;modified-chart&#34;&gt;Modified chart&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://tanaikech.github.io/img/20170516_fig2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;note-1&#34;&gt;note&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0:{type: &#39;bars&#39;, color: &#39;red&#39;}&lt;/code&gt; was modified.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;

&lt;p&gt;Reference pages are &lt;a href=&#34;https://developers.google.com/apps-script/reference/spreadsheet/embedded-line-chart-builder&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://developers.google.com/chart/interactive/docs/gallery/areachart#configuration-options&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;commission&#34;&gt;Commission&lt;/h2&gt;

&lt;p&gt;This was accepted as a commission.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;May 13, 2017, Dr. Mehmet TEKDAL (Çukurova University)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Sending E-mail When Spreadsheet was Edited from Outside by Sheet API</title>
      <link>https://tanaikech.github.io/2017/05/14/sending-e-mail-when-spreadsheet-was-edited-from-outside-by-sheet-api</link>
      <pubDate>Sun, 14 May 2017 17:43:52 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/14/sending-e-mail-when-spreadsheet-was-edited-from-outside-by-sheet-api</guid>
      <description>&lt;p&gt;This sample script sends an e-mail, when spreadsheet was edited from outside by Sheet API v4. When you use this sample, please create a container bound script with spreadsheet which is edited by Sheet API. And please input your e-mail and run firstly a method of &lt;code&gt;createTrigger()&lt;/code&gt;. By this, a trigger is installed as &lt;code&gt;onChange()&lt;/code&gt;. After this, edit spreadsheet from outside by Sheet API v4.&lt;/p&gt;

&lt;p&gt;When when spreadsheet was edited from outside by Sheet API v4, I used &lt;code&gt;sendEmail()&lt;/code&gt; as a sample, because script editor is closed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample script :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function createTrigger(){
  ScriptApp.newTrigger(&#39;sendMail&#39;)
      .forSpreadsheet(SpreadsheetApp.getActive())
      .onChange()
      .create();
}

function sendMail() {
  MailApp.sendEmail(&amp;quot;### Your e-mail address ###&amp;quot;, &amp;quot;test mail&amp;quot;, &amp;quot;Spreadsheet was edited.&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>File Transfer for Google Drive Without Authorization</title>
      <link>https://tanaikech.github.io/2017/05/10/file-transfer-for-google-drive-without-authorization</link>
      <pubDate>Wed, 10 May 2017 13:28:28 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/10/file-transfer-for-google-drive-without-authorization</guid>
      <description>

&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;

&lt;p&gt;In this article, I would like to introduce how to transfer files for Google Drive under no authorization.&lt;/p&gt;

&lt;p&gt;This has also been published here. &lt;a href=&#34;https://github.com/tanaikech/FileTransfer&#34;&gt;https://github.com/tanaikech/FileTransfer&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;description&#34;&gt;Description&lt;/h1&gt;

&lt;p&gt;When we download and upload files for Google Drive, it usually has to use Drive API. In order to use Drive API, access token is required. If you want to make your friends download and upload files for your Google Drive, the authorization process is to take time. So I proposal this.&lt;/p&gt;

&lt;p&gt;As a sample, I introduce a script for downloading and uploading files using Web Apps. In this sample, it changes a file to a byte slice and send it as text data. Then, it reconstructs it. Of course, base64 encode can be used for this. But the data size for using base64 is much larger than that for using the byte slice.&lt;/p&gt;

&lt;p&gt;At this method, the project files including GAS script cannot be downloaded. When a script file is uploaded, it is converted to text file which is not a project file of Google. When Google Docs can be downloaded using this method, those are downloaded as PDF file. docx, pptx and xlsx can be uploaded.&lt;/p&gt;

&lt;p&gt;They say taht the limitation size of an uploading file is 24 MBytes. &lt;a href=&#34;http://stackoverflow.com/questions/38315816/max-size-for-post-request-sent-to-webapps&#34;&gt;Ref.&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;usage&#34;&gt;Usage&lt;/h1&gt;

&lt;h2 id=&#34;1-u-deploy-web-apps-https-developers-google-com-apps-script-guides-web-u&#34;&gt;1. &lt;u&gt;&lt;a href=&#34;https://developers.google.com/apps-script/guides/web&#34;&gt;Deploy Web Apps&lt;/a&gt;&lt;/u&gt;&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Open the Script Editor.&lt;/li&gt;
&lt;li&gt;On the Script Editor

&lt;ul&gt;
&lt;li&gt;File -&amp;gt; Manage Versions -&amp;gt; Save New Version&lt;/li&gt;
&lt;li&gt;Publish -&amp;gt; Deploy as Web App&lt;/li&gt;
&lt;li&gt;At Execute the app as, select &lt;strong&gt;&amp;ldquo;your account&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;At Who has access to the app, select &lt;strong&gt;&amp;ldquo;Anyone, even anonymous&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Click &amp;ldquo;Deploy&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Copy &lt;strong&gt;&amp;ldquo;Current web app URL&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Click &amp;ldquo;OK&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;2-paste-following-script-on-script-editor&#34;&gt;2. Paste following script on Script Editor.&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function doPost(e) {
  if (e.parameters.method == &amp;quot;download&amp;quot;) {
    try {
      return (function(id){
        var file = DriveApp.getFileById(id);
        return ContentService
              .createTextOutput(JSON.stringify({
                size: file.getBlob().getBytes(),
                name: file.getName(),
                result: file.getName() + &amp;quot; (&amp;quot; + file.getBlob().getContentType() + &amp;quot;)&amp;quot;
              }))
              .setMimeType(ContentService.MimeType.JSON);
      })(e.parameters.id);
    } catch(err) {
      return ContentService.createTextOutput(JSON.stringify({
                result: err.message
              }))
              .setMimeType(ContentService.MimeType.JSON);
    }
  }

  if (e.parameters.method == &amp;quot;upload&amp;quot;) {
    try {
      return ContentService
              .createTextOutput(JSON.stringify({
                result: (function(p){
                  return DriveApp
                    .createFile(
                      Utilities.newBlob(
                        [parseInt(i, 10) for each (i in p.file)],
                        p.mime,
                        p.name
                      )
                    )
                    .getId();
                })(e.parameters)
              }))
              .setMimeType(ContentService.MimeType.JSON);
    } catch(err) {
      return ContentService.createTextOutput(JSON.stringify({
                result: err.message
              }))
              .setMimeType(ContentService.MimeType.JSON);
    }
  }

  if (e.parameters.method == &amp;quot;delete&amp;quot;) {
    try {
      DriveApp.getFileById(e.parameters.id).setTrashed(true);
      return ContentService.createTextOutput(JSON.stringify({
                result: e.parameters.id + &amp;quot; was deleted.&amp;quot;
              }))
              .setMimeType(ContentService.MimeType.JSON);
    } catch(err) {
      return ContentService.createTextOutput(JSON.stringify({
                result: err.message
              }))
              .setMimeType(ContentService.MimeType.JSON);
    }
  }

  return ContentService.createTextOutput(&amp;quot;Did nothing.&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-at-local-pc-use-following-script&#34;&gt;3. At local pc, use following script.&lt;/h2&gt;

&lt;p&gt;There are 3 methods of &lt;code&gt;download()&lt;/code&gt;, &lt;code&gt;upload()&lt;/code&gt; and &lt;code&gt;delete()&lt;/code&gt;. When you use those, please give a value of file ID to&lt;code&gt;download()&lt;/code&gt; and &lt;code&gt;delete()&lt;/code&gt;. Then please give file name to &lt;code&gt;upload()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import mimetypes
import numpy as np
import requests

# Please paste &amp;quot;Current web app URL&amp;quot; here.
url = &amp;quot;https://script.google.com/macros/s/#####/exec&amp;quot;


def download(fileid):
    r = requests.post(
        url,
        data={&amp;quot;method&amp;quot;: &amp;quot;download&amp;quot;, &amp;quot;id&amp;quot;: fileid}
    )
    if len(r.json()[&amp;quot;name&amp;quot;]) &amp;gt; 0:
        with open(r.json()[&amp;quot;name&amp;quot;], &amp;quot;bw&amp;quot;) as f:
            f.write(np.array(r.json()[&amp;quot;size&amp;quot;], dtype=np.uint8))
    return r.json()[&amp;quot;result&amp;quot;]


def upload(filename):
    with open(filename, &amp;quot;rb&amp;quot;) as f:
        d = f.read()
    r = requests.post(
        url,
        data={
            &amp;quot;method&amp;quot;: &amp;quot;upload&amp;quot;,
            &amp;quot;file&amp;quot;: [(-(i &amp;amp; 0b10000000) | (i &amp;amp; 0b01111111)) for i in d],
            &amp;quot;name&amp;quot;: filename,
            &amp;quot;mime&amp;quot;: mimetypes.guess_type(filename)[0]
        }
    )
    return r.json()[&amp;quot;result&amp;quot;]


def delete(fileid):
    r = requests.post(
        url,
        data={&amp;quot;method&amp;quot;: &amp;quot;delete&amp;quot;, &amp;quot;id&amp;quot;: fileid}
    )
    return r.json()[&amp;quot;result&amp;quot;]

def main():
    fileid = &amp;quot;#####&amp;quot;
    print(download(fileid))

    filename = &amp;quot;#####&amp;quot;
    print(upload(filename))

    fileid = &amp;quot;#####&amp;quot;
    print(delete(fileid))

if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Download files have no extension. So please add the extension for each mimeType to the files.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dynamical Nested JSON Objects by Golang</title>
      <link>https://tanaikech.github.io/2017/05/09/dynamical-nested-json-objects-by-golang</link>
      <pubDate>Tue, 09 May 2017 15:58:08 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/09/dynamical-nested-json-objects-by-golang</guid>
      <description>

&lt;p&gt;This sample script dynamically creates nested JSON objects.&lt;/p&gt;

&lt;h3 id=&#34;script&#34;&gt;Script&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;obj := map[string]interface{}{}
for i := 1; i &amp;lt;= 5; i++ {
    value := map[string]interface{}{
        fmt.Sprintf(&amp;quot;B_key%d&amp;quot;, i): map[string]interface{}{
            &amp;quot;C_key&amp;quot;: &amp;quot;value&amp;quot;,
        },
    }
    obj[fmt.Sprintf(&amp;quot;A_key%d&amp;quot;, i)] = value
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;result&#34;&gt;Result&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;A_key1&amp;quot;: {
    &amp;quot;B_key1&amp;quot;: {
      &amp;quot;C_key&amp;quot;: &amp;quot;value&amp;quot;
    }
  },
  &amp;quot;A_key2&amp;quot;: {
    &amp;quot;B_key2&amp;quot;: {
      &amp;quot;C_key&amp;quot;: &amp;quot;value&amp;quot;
    }
  },
  &amp;quot;A_key3&amp;quot;: {
    &amp;quot;B_key3&amp;quot;: {
      &amp;quot;C_key&amp;quot;: &amp;quot;value&amp;quot;
    }
  },
  &amp;quot;A_key4&amp;quot;: {
    &amp;quot;B_key4&amp;quot;: {
      &amp;quot;C_key&amp;quot;: &amp;quot;value&amp;quot;
    }
  },
  &amp;quot;A_key5&amp;quot;: {
    &amp;quot;B_key5&amp;quot;: {
      &amp;quot;C_key&amp;quot;: &amp;quot;value&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Changing Slack Status using Google Apps Script</title>
      <link>https://tanaikech.github.io/2017/05/09/changing-slack-status-using-google-apps-script</link>
      <pubDate>Tue, 09 May 2017 10:58:37 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/09/changing-slack-status-using-google-apps-script</guid>
      <description>&lt;p&gt;This script changes slack status using GAS. If you want to change it on time you decided, it can be achieved by installing this method as a trigger.&lt;/p&gt;

&lt;p&gt;In order to use this, the required scope is &lt;strong&gt;&lt;code&gt;users.profile:write&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function setSlackStatus(token, user, status_text, status_emoji) {
  return UrlFetchApp.fetch(
    &#39;https://slack.com/api/users.profile.set&#39;,
    {
      method: &#39;post&#39;,
      payload: {
        token: token,
        user: user,
        profile: JSON.stringify({status_text: status_text, status_emoji: status_emoji})
      },
      muteHttpExceptions: true
    }
  ).getContentText();
}

function main() {
  var res = setSlackStatus(
    &#39;### Your access token ###&#39;,
    &#39;### User ID ###&#39;,
    &#39;sample&#39;,
    &#39;:coffee:&#39;
  );
  Logger.log(res)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Delete Line Feed Code by DOS and Bash</title>
      <link>https://tanaikech.github.io/2017/05/09/delete-line-feed-code-by-dos-and-bash</link>
      <pubDate>Tue, 09 May 2017 09:36:43 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/09/delete-line-feed-code-by-dos-and-bash</guid>
      <description>

&lt;h3 id=&#34;input-json&#34;&gt;Input JSON&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;text.txt :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;values&amp;quot;: [
    [
      &amp;quot;a1&amp;quot;,
      &amp;quot;b1&amp;quot;,
      &amp;quot;c1&amp;quot;
    ],
    [
      &amp;quot;a2&amp;quot;,
      &amp;quot;b2&amp;quot;,
      &amp;quot;c2&amp;quot;
    ],
    [
      &amp;quot;a3&amp;quot;,
      &amp;quot;b3&amp;quot;,
      &amp;quot;c3&amp;quot;
    ],
    [
      &amp;quot;a4&amp;quot;,
      &amp;quot;b4&amp;quot;,
      &amp;quot;c4&amp;quot;
    ],
    [
      &amp;quot;a5&amp;quot;,
      &amp;quot;b5&amp;quot;,
      &amp;quot;c5&amp;quot;
    ]
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;windows-dos&#34;&gt;Windows DOS&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;type text.txt | jq -c &amp;quot;.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;linux-bash&#34;&gt;Linux Bash&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat text.txt | jq -c &#39;.&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;output-json&#34;&gt;Output JSON&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&amp;quot;values&amp;quot;:[[&amp;quot;a1&amp;quot;,&amp;quot;b1&amp;quot;,&amp;quot;c1&amp;quot;],[&amp;quot;a2&amp;quot;,&amp;quot;b2&amp;quot;,&amp;quot;c2&amp;quot;],[&amp;quot;a3&amp;quot;,&amp;quot;b3&amp;quot;,&amp;quot;c3&amp;quot;],[&amp;quot;a4&amp;quot;,&amp;quot;b4&amp;quot;,&amp;quot;c4&amp;quot;],[&amp;quot;a5&amp;quot;,&amp;quot;b5&amp;quot;,&amp;quot;c5&amp;quot;]]}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Updated: CLI Tool - gogauth</title>
      <link>https://tanaikech.github.io/2017/05/09/updated-cli-tool---gogauth</link>
      <pubDate>Tue, 09 May 2017 09:00:04 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/09/updated-cli-tool---gogauth</guid>
      <description>&lt;p&gt;gogauth is a CLI tool to easily retrieve access token for using APIs on Google.&lt;/p&gt;

&lt;p&gt;I thought that if the access token can easily retrieve, it may be useful for users who can use various convenience Google APIs. So I created this. Also this can be used for testing sample script like the demo. If this will be helpful for you, I&amp;rsquo;m glad.&lt;/p&gt;

&lt;p&gt;Today, it was updated to v2.0.1. Please check it out. &lt;a href=&#34;https://github.com/tanaikech/gogauth&#34;&gt;https://github.com/tanaikech/gogauth&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tanaikech.github.io/img/batdemo.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is a demo for retrieving values from spreadsheet using Google Sheet API v4. The access token obtained by gogauth is used for this. This is a batch file for windows command prompt.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OCR using Google Drive API</title>
      <link>https://tanaikech.github.io/2017/05/02/ocr-using-google-drive-api</link>
      <pubDate>Tue, 02 May 2017 14:21:55 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/02/ocr-using-google-drive-api</guid>
      <description>&lt;p&gt;This is a sample script for OCR using Google Drive API. A text file which converted by OCR can be retrieved by inputting an image file.&lt;/p&gt;

&lt;p&gt;In this sample, Python Quickstart is used. The detail information is &lt;a href=&#34;https://developers.google.com/drive/v3/web/quickstart/python&#34;&gt;https://developers.google.com/drive/v3/web/quickstart/python&lt;/a&gt;. Please read “Step 1: Turn on the Drive API” and “Step 2: Install the Google Client Library”.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from __future__ import print_function
import httplib2
import os
import io

from apiclient import discovery
from oauth2client import client
from oauth2client import tools
from oauth2client.file import Storage
from apiclient.http import MediaFileUpload, MediaIoBaseDownload

try:
    import argparse
    flags = argparse.ArgumentParser(parents=[tools.argparser]).parse_args()
except ImportError:
    flags = None

# If modifying these scopes, delete your previously saved credentials
# at ~/.credentials/drive-python-quickstart.json
SCOPES = &#39;https://www.googleapis.com/auth/drive&#39;
CLIENT_SECRET_FILE = &#39;client_secret.json&#39;
APPLICATION_NAME = &#39;Drive API Python Quickstart&#39;


def get_credentials():
    &amp;quot;&amp;quot;&amp;quot;Gets valid user credentials from storage.

    If nothing has been stored, or if the stored credentials are invalid,
    the OAuth2 flow is completed to obtain the new credentials.

    Returns:
        Credentials, the obtained credential.
    &amp;quot;&amp;quot;&amp;quot;
    credential_path = os.path.join(&amp;quot;./&amp;quot;, &#39;drive-python-quickstart.json&#39;)
    store = Storage(credential_path)
    credentials = store.get()
    if not credentials or credentials.invalid:
        flow = client.flow_from_clientsecrets(CLIENT_SECRET_FILE, SCOPES)
        flow.user_agent = APPLICATION_NAME
        if flags:
            credentials = tools.run_flow(flow, store, flags)
        else:  # Needed only for compatibility with Python 2.6
            credentials = tools.run(flow, store)
        print(&#39;Storing credentials to &#39; + credential_path)
    return credentials


def main():
    credentials = get_credentials()
    http = credentials.authorize(httplib2.Http())
    service = discovery.build(&#39;drive&#39;, &#39;v3&#39;, http=http)

    imgfile = &#39;sample.png&#39;  # Image with texts (png, jpg, bmp, gif, pdf)
    txtfile = &#39;output.txt&#39;  # Text file outputted by OCR

    mime = &#39;application/vnd.google-apps.document&#39;
    res = service.files().create(
        body={
            &#39;name&#39;: imgfile,
            &#39;mimeType&#39;: mime
        },
        media_body=MediaFileUpload(imgfile, mimetype=mime, resumable=True)
    ).execute()

    downloader = MediaIoBaseDownload(
        io.FileIO(txtfile, &#39;wb&#39;),
        service.files().export_media(fileId=res[&#39;id&#39;], mimeType=&amp;quot;text/plain&amp;quot;)
    )
    done = False
    while done is False:
        status, done = downloader.next_chunk()

    service.files().delete(fileId=res[&#39;id&#39;]).execute()
    print(&amp;quot;Done.&amp;quot;)


if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Converting PDF to TXT</title>
      <link>https://tanaikech.github.io/2017/05/01/converting-pdf-to-txt</link>
      <pubDate>Mon, 01 May 2017 15:04:30 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/01/converting-pdf-to-txt</guid>
      <description>&lt;p&gt;This is a sample script for converting a PDF file to a TXT file. 2 steps are required for this.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Upload a PDF file as a Google Document&lt;/li&gt;
&lt;li&gt;Download a Google Document as a TXT file&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this sample, Python Quickstart is used. The detail information is &lt;a href=&#34;https://developers.google.com/drive/v3/web/quickstart/python&#34;&gt;https://developers.google.com/drive/v3/web/quickstart/python&lt;/a&gt;. Please read &amp;ldquo;Step 1: Turn on the Drive API&amp;rdquo; and &amp;ldquo;Step 2: Install the Google Client Library&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from __future__ import print_function
import httplib2
import os
import io

from apiclient import discovery
from oauth2client import client
from oauth2client import tools
from oauth2client.file import Storage
from apiclient.http import MediaFileUpload, MediaIoBaseDownload

try:
    import argparse
    flags = argparse.ArgumentParser(parents=[tools.argparser]).parse_args()
except ImportError:
    flags = None

SCOPES = &#39;https://www.googleapis.com/auth/drive&#39;
CLIENT_SECRET_FILE = &#39;client_secret.json&#39;
APPLICATION_NAME = &#39;Drive API Python Quickstart&#39;


def get_credentials():
    credential_path = os.path.join(&amp;quot;./&amp;quot;, &#39;drive-python-quickstart.json&#39;)
    store = Storage(credential_path)
    credentials = store.get()
    if not credentials or credentials.invalid:
        flow = client.flow_from_clientsecrets(CLIENT_SECRET_FILE, SCOPES)
        flow.user_agent = APPLICATION_NAME
        if flags:
            credentials = tools.run_flow(flow, store, flags)
        else:  # Needed only for compatibility with Python 2.6
            credentials = tools.run(flow, store)
        print(&#39;Storing credentials to &#39; + credential_path)
    return credentials


def main():
    credentials = get_credentials()
    http = credentials.authorize(httplib2.Http())
    service = discovery.build(&#39;drive&#39;, &#39;v3&#39;, http=http)

    pdffile = &#39;sample.pdf&#39;
    txtfile = &#39;sample.txt&#39;

    mime = &#39;application/vnd.google-apps.document&#39;
    res = service.files().create(
        body={
            &#39;name&#39;: pdffile,
            &#39;mimeType&#39;: mime
        },
        media_body=MediaFileUpload(pdffile, mimetype=mime, resumable=True)
    ).execute()

    dl = MediaIoBaseDownload(
        io.FileIO(txtfile, &#39;wb&#39;),
        service.files().export_media(fileId=res[&#39;id&#39;], mimeType=&amp;quot;text/plain&amp;quot;)
    )
    done = False
    while done is False:
        status, done = dl.next_chunk()
    print(&amp;quot;Done.&amp;quot;)


if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Updated ggsrun to v110</title>
      <link>https://tanaikech.github.io/2017/04/30/updated-ggsrun-to-v110</link>
      <pubDate>Sun, 30 Apr 2017 11:49:35 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/04/30/updated-ggsrun-to-v110</guid>
      <description>

&lt;h2 id=&#34;updated-ggsrun-to-v-1-1-0&#34;&gt;Updated ggsrun to v.1.1.0&lt;/h2&gt;

&lt;p&gt;Added a command for updating existing project on Google Drive. One of scripts in the project can be also updated.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/tanaikech/ggsrun&#34;&gt;https://github.com/tanaikech/ggsrun&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Retrieving User Information with Shared Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/04/27/retrieving-user-information-with-shared-spreadsheet</link>
      <pubDate>Thu, 27 Apr 2017 14:34:22 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/04/27/retrieving-user-information-with-shared-spreadsheet</guid>
      <description>&lt;p&gt;This sample script retrieves the user information which is editing the shared spreadsheet.&lt;/p&gt;

&lt;p&gt;It was found as follows.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User information retrieving by Class Session is the owner and users which installed triggers by themselves.&lt;/li&gt;
&lt;li&gt;When each user installs a trigger, user information retrieving by Class Session losts the accuracy. So user information has to be retrieved using a temporally installed trigger.&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;onOpen()&lt;/code&gt;, it cannot directly install triggers and authorize.&lt;/li&gt;
&lt;li&gt;Using menu bar, it can install triggers and authorize Google Services using API.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here, I thought 2 problems.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The confirmation whether the authorization was done.

&lt;ul&gt;
&lt;li&gt;At &lt;code&gt;onOpen()&lt;/code&gt;, although many methods using Google API can be executed without the authorization, there are also some methods which cannot be executed without the authorization. Furthermore, there are some methods which cannot execute even if the authorization was done. It&amp;rsquo;s &lt;code&gt;trigger&lt;/code&gt;. On the other hand, &lt;code&gt;DriveApp&lt;/code&gt; requires the authorization for only the first time, but it can use without the authorization after 2nd times.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;I thought that users can find easily by displaying information in a dialog box when spreadsheet is launched. So I adopted displaying information using the dialog box. But, there is a big limitation for the dialog box.

&lt;ul&gt;
&lt;li&gt;Using a click of button on a dialog box, it can install triggers. However it cannot authorize Google Services using API.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Using above information, I thought a flow to retrieve user information.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When user opens the spreadsheet for the first time, it displays &amp;lsquo;Please authorize at &amp;ldquo;Authorization&amp;rdquo; of menu bar.&amp;rsquo; using a dialog box, and creates a menu bar &amp;ldquo;Authorization&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;The user clicks &amp;ldquo;OK&amp;rdquo; button on the dialog box and run &amp;ldquo;Authorization&amp;rdquo; at the menu bar. By running &amp;ldquo;Authorization&amp;rdquo;, the user information is retrieved by a temporally installed trigger.&lt;/li&gt;
&lt;li&gt;When the user opens the spreadsheet after the 2nd time, the authorization is checked by &lt;code&gt;DriveApp&lt;/code&gt;. A dialog box with &amp;lsquo;Push OK button.&amp;rsquo; is displayed. By clicking &amp;ldquo;OK&amp;rdquo;, the user information is retrieved by a temporally installed trigger.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By this flow, the user information which is editing the shared spreadsheet can be retrieved. Although I think that there may be also other solutions, I proposal this as one of solutions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Script :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function showDialog(html, title){
  SpreadsheetApp.getActiveSpreadsheet().show(
    HtmlService
    .createHtmlOutput(html)
    .setTitle(title)
    .setWidth(400)
    .setHeight(100)
  );
}

function getUser(){
  var triggerId = ScriptApp.newTrigger(&#39;getUser&#39;)
    .forSpreadsheet(SpreadsheetApp.getActive())
    .onEdit()
    .create()
    .getUniqueId();
  var userInf = Session.getEffectiveUser();
  CacheService.getUserCache().putAll({
    &amp;quot;username&amp;quot;: userInf.getUsername(),
    &amp;quot;usermail&amp;quot;: userInf.getEmail()
  }, 7200);
  var triggers = ScriptApp.getProjectTriggers();
  [ScriptApp.deleteTrigger(i) for each (i in triggers) if (i.getUniqueId() == triggerId)];
}

function dialogForGetUser(){
  showDialog(&#39;&amp;lt;input type=&amp;quot;button&amp;quot;\
      value=&amp;quot;OK&amp;quot;\
      onclick=&amp;quot;google.script.run.withSuccessHandler(function(){google.script.host.close()})\
      .getUser()&amp;quot;&amp;gt;&#39;,
      &#39;Push OK button.&#39;
  );
}

function dialogForAuth(){
  showDialog(&#39;&amp;lt;input type=&amp;quot;button&amp;quot;\
      value=&amp;quot;OK&amp;quot;\
      onclick=&amp;quot;google.script.host.close()&amp;quot;&amp;gt;&#39;,
      &#39;Please authorize at &amp;quot;Authorization&amp;quot; of menu bar.&#39;
  );
}

function getAuth() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  ss.removeMenu(&amp;quot;Authorization&amp;quot;);
  getUser();
  ss.toast(&amp;quot;Done.&amp;quot;, &amp;quot;Authorization&amp;quot;, 3);
}

function onOpen(){
  try {
    var temp = DriveApp.getFileById(SpreadsheetApp.getActiveSpreadsheet().getId())
    dialogForGetUser();
  } catch(e) {
    dialogForAuth();
    SpreadsheetApp.getActiveSpreadsheet().addMenu(
      &amp;quot;Authorization&amp;quot;,
      [{
        functionName:&amp;quot;getAuth&amp;quot;,
        name:&amp;quot;Run this only when the first time&amp;quot;
      }]
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;When the spreadsheet is opened, at first, &lt;code&gt;onOpen()&lt;/code&gt; is executed. It is checked whether the user has already authorized. The dialog box is as follows.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://tanaikech.github.io/img/20170427-1st.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If the user has never authorized yet, &lt;code&gt;dialogForAuth()&lt;/code&gt; is executed. If the user has already authorized. &lt;code&gt;dialogForGetUser()&lt;/code&gt; is executed. The dialog box is as follows.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://tanaikech.github.io/img/20170427-2nd.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The user information is retrieved as follows. You can use this by &lt;code&gt;onEdit()&lt;/code&gt; and trigger.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var user = CacheService.getUserCache().getAll([&amp;quot;username&amp;quot;, &amp;quot;usermail&amp;quot;]);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>CLI Tool - goris</title>
      <link>https://tanaikech.github.io/2017/04/26/cli-tool---goris</link>
      <pubDate>Wed, 26 Apr 2017 16:52:10 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/04/26/cli-tool---goris</guid>
      <description>

&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;

&lt;p&gt;This is a CLI tool to search for images with &lt;strong&gt;Go&lt;/strong&gt;ogle &lt;strong&gt;R&lt;/strong&gt;everse &lt;strong&gt;I&lt;/strong&gt;mage &lt;strong&gt;S&lt;/strong&gt;earch.&lt;/p&gt;

&lt;h3 id=&#34;motivation&#34;&gt;Motivation&lt;/h3&gt;

&lt;p&gt;Because I had wanted to search for images with an image URL and file on my terminal, I created this. This can download images from searched image URLs.&lt;/p&gt;

&lt;p&gt;&lt;font color=&#34;#3366CC&#34;&gt;&lt;strong&gt;The detail information and how to get this are &lt;a href=&#34;https://github.com/tanaikech/goris&#34;&gt;https://github.com/tanaikech/goris&lt;/a&gt;.&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CLI Tool - ggsrun</title>
      <link>https://tanaikech.github.io/2017/04/24/cli-tool---ggsrun</link>
      <pubDate>Mon, 24 Apr 2017 15:07:11 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/04/24/cli-tool---ggsrun</guid>
      <description>

&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;

&lt;p&gt;This is a CLI tool to execute Google Apps Script (GAS) on a terminal.&lt;/p&gt;

&lt;h3 id=&#34;motivation&#34;&gt;Motivation&lt;/h3&gt;

&lt;p&gt;Will you want to develop GAS using CoffeeScript on your local PC? Generally, when we develop GAS, we have to login to Google using own browser and develop it using Javascript on the Script Editor. Recently, I have wanted to have more convenient local-environment for developing GAS. So I created this &amp;ldquo;ggsrun&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tanaikech.github.io/img/readme_sublimedemo.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;font color=&#34;#3366CC&#34;&gt;&lt;strong&gt;The detail information and how to get this are &lt;a href=&#34;https://github.com/tanaikech/ggsrun&#34;&gt;https://github.com/tanaikech/ggsrun&lt;/a&gt;.&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;Also I made this GAS library &lt;a href=&#34;https://github.com/tanaikech/CreateImg&#34;&gt;https://github.com/tanaikech/CreateImg&lt;/a&gt; using this CLI tool.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Overwriting Spreadsheet to Existing Excel File</title>
      <link>https://tanaikech.github.io/2017/04/21/overwriting-spreadsheet-to-existing-excel-file</link>
      <pubDate>Fri, 21 Apr 2017 13:13:00 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/04/21/overwriting-spreadsheet-to-existing-excel-file</guid>
      <description>&lt;p&gt;This sample script converts a spreadsheet to excel file, and overwrites the excel file to the existing excel file. When you use this script, at first, &lt;u&gt;please confirm whether Drive API is enabled at Google API console.&lt;/u&gt; Because the existing excel file is overwritten, the file name and file ID are not changed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function overWrite(src_spreadsheetId, dst_excelfileId) {
  var accesstoken = ScriptApp.getOAuthToken();
  return UrlFetchApp.fetch(
    &amp;quot;https://www.googleapis.com/upload/drive/v3/files/&amp;quot; +
    dst_excelfileId +
    &amp;quot;?uploadType=multipart&amp;quot;,
    {
      method: &amp;quot;PATCH&amp;quot;,
      headers: {Authorization: &amp;quot;Bearer &amp;quot; + accesstoken},
      contentType: &amp;quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&amp;quot;,
      payload: function(a, s) {
        return UrlFetchApp.fetch(
          &amp;quot;https://www.googleapis.com/drive/v3/files/&amp;quot; +
          s +
          &amp;quot;/export?mimeType=application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&amp;quot;,
          {
            method: &amp;quot;GET&amp;quot;,
            headers: {Authorization: &amp;quot;Bearer &amp;quot; + a},
            muteHttpExceptions: true
          }
        ).getBlob().getBytes();
      }(accesstoken, src_spreadsheetId)
    }
  ).getContentText();
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Converting Spreadsheet to PDF</title>
      <link>https://tanaikech.github.io/2017/04/20/converting-spreadsheet-to-pdf</link>
      <pubDate>Thu, 20 Apr 2017 07:56:36 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/04/20/converting-spreadsheet-to-pdf</guid>
      <description>&lt;p&gt;Converting Spreadsheet to PDF&lt;/p&gt;

&lt;p&gt;This sample script converts from a spreadsheet to a PDF file which has all sheets in the spreadsheet. When you use this, please enable Drive API at Google API console.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var spreadsheetId = &amp;quot;#####&amp;quot;;
var folderId = &amp;quot;#####&amp;quot;;
var outputFilename = &amp;quot;#####&amp;quot;;

DriveApp.getFolderById(folderId)
    .createFile(UrlFetchApp.fetch(
      &amp;quot;https://www.googleapis.com/drive/v3/files/&amp;quot; +
        spreadsheetId +
        &amp;quot;/export?mimeType=application/pdf&amp;quot;,
      {
        method: &amp;quot;GET&amp;quot;,
        headers: {Authorization: &amp;quot;Bearer &amp;quot; + ScriptApp.getOAuthToken()},
        muteHttpExceptions: true
      })
    .getBlob())
    .setName(outputFilename);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>