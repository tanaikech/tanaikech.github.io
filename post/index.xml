<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on tanaike</title>
    <link>https://tanaikech.github.io/post/</link>
    <description>Recent content in Posts on tanaike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Mon, 24 Apr 2017 15:07:11 +0900</lastBuildDate>
    <atom:link href="https://tanaikech.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CLI Tool - ggsrun</title>
      <link>https://tanaikech.github.io/2017/04/24/cli-tool---ggsrun</link>
      <pubDate>Mon, 24 Apr 2017 15:07:11 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/04/24/cli-tool---ggsrun</guid>
      <description>

&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;

&lt;p&gt;This is a CLI tool to execute Google Apps Script (GAS) on a terminal.&lt;/p&gt;

&lt;h3 id=&#34;motivation&#34;&gt;Motivation&lt;/h3&gt;

&lt;p&gt;Will you want to develop GAS using CoffeeScript on your local PC? Generally, when we develop GAS, we have to login to Google using own browser and develop it using Javascript on the Script Editor. Recently, I have wanted to have more convenient local-environment for developing GAS. So I created this &amp;ldquo;ggsrun&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;readme_sublimedemo.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The detail information and how to get this are &lt;a href=&#34;https://github.com/tanaikech/ggsrun&#34;&gt;https://github.com/tanaikech/ggsrun&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Overwriting Spreadsheet to Existing Excel File</title>
      <link>https://tanaikech.github.io/2017/04/21/overwriting-spreadsheet-to-existing-excel-file</link>
      <pubDate>Fri, 21 Apr 2017 13:13:00 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/04/21/overwriting-spreadsheet-to-existing-excel-file</guid>
      <description>&lt;p&gt;This sample script converts a spreadsheet to excel file, and overwrites the excel file to the existing excel file. When you use this script, at first, &lt;u&gt;please confirm whether Drive API is enabled at Google API console.&lt;/u&gt; Because the existing excel file is overwritten, the file name and file ID are not changed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function overWrite(src_spreadsheetId, dst_excelfileId) {
  var accesstoken = ScriptApp.getOAuthToken();
  return UrlFetchApp.fetch(
    &amp;quot;https://www.googleapis.com/upload/drive/v3/files/&amp;quot; +
    dst_excelfileId +
    &amp;quot;?uploadType=multipart&amp;quot;,
    {
      method: &amp;quot;PATCH&amp;quot;,
      headers: {Authorization: &amp;quot;Bearer &amp;quot; + accesstoken},
      contentType: &amp;quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&amp;quot;,
      payload: function(a, s) {
        return UrlFetchApp.fetch(
          &amp;quot;https://www.googleapis.com/drive/v3/files/&amp;quot; +
          s +
          &amp;quot;/export?mimeType=application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&amp;quot;,
          {
            method: &amp;quot;GET&amp;quot;,
            headers: {Authorization: &amp;quot;Bearer &amp;quot; + a},
            muteHttpExceptions: true
          }
        ).getBlob().getBytes();
      }(accesstoken, src_spreadsheetId)
    }
  ).getContentText();
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Converting Spreadsheet to PDF</title>
      <link>https://tanaikech.github.io/2017/04/20/converting-spreadsheet-to-pdf</link>
      <pubDate>Thu, 20 Apr 2017 07:56:36 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/04/20/converting-spreadsheet-to-pdf</guid>
      <description>&lt;p&gt;Converting Spreadsheet to PDF&lt;/p&gt;

&lt;p&gt;This sample script converts from a spreadsheet to a PDF file which has all sheets in the spreadsheet. When you use this, please enable Drive API at Google API console.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var spreadsheetId = &amp;quot;#####&amp;quot;;
var folderId = &amp;quot;#####&amp;quot;;
var outputFilename = &amp;quot;#####&amp;quot;;

DriveApp.getFolderById(folderId)
    .createFile(UrlFetchApp.fetch(
      &amp;quot;https://www.googleapis.com/drive/v3/files/&amp;quot; +
        spreadsheetId +
        &amp;quot;/export?mimeType=application/pdf&amp;quot;,
      {
        method: &amp;quot;GET&amp;quot;,
        headers: {Authorization: &amp;quot;Bearer &amp;quot; + ScriptApp.getOAuthToken()},
        muteHttpExceptions: true
      })
    .getBlob())
    .setName(outputFilename);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Updated: CLI Tool - gogauth</title>
      <link>https://tanaikech.github.io/2017/04/19/updated-cli-tool---gogauth</link>
      <pubDate>Wed, 19 Apr 2017 13:34:36 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/04/19/updated-cli-tool---gogauth</guid>
      <description>&lt;p&gt;gogauth is a CLI tool to retrieve easily access token for using APIs on Google.&lt;/p&gt;

&lt;p&gt;Today, it was updated with big changes. Please check it out.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/tanaikech/gogauth&#34;&gt;https://github.com/tanaikech/gogauth&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GAS Library - CreateImg</title>
      <link>https://tanaikech.github.io/2017/04/17/gas-library---createimg</link>
      <pubDate>Mon, 17 Apr 2017 15:29:15 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/04/17/gas-library---createimg</guid>
      <description>&lt;p&gt;Recently, I had been looking for creating an image from coordinate data. Unfortunately I have never found them. So I made this. This Google Apps Script (GAS) library creates an image file from coordinate data.&lt;/p&gt;

&lt;p&gt;You can see the detail information at &lt;a href=&#34;https://github.com/tanaikech/CreateImg&#34;&gt;https://github.com/tanaikech/CreateImg&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is a part where I would like to improve in this library. That&amp;rsquo;s &lt;code&gt;convByteSlice()&lt;/code&gt;. I think that there is the method to be faster about the part. If you know much about the logical operation using GAS, if you teach me about the improvements. I&amp;rsquo;m so glad.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Comprehension of GAS</title>
      <link>https://tanaikech.github.io/2017/04/17/comprehension-of-gas</link>
      <pubDate>Mon, 17 Apr 2017 08:16:36 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/04/17/comprehension-of-gas</guid>
      <description>

&lt;p&gt;Here, I would like to introduce a comprehension of GAS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Input :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var data = [[[0], [1], [2], [3]], [[4], [5], [6], [7]]];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Output :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[0.0, 2.0], [0.0, 2.0]]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pattern-1&#34;&gt;Pattern 1&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;var a = [];
for (var i=0; i&amp;lt;data.length; i++) {
  var temp = [];
  for (var j=0; j&amp;lt;data[i].length; j++) {
    if (data[i][j][0] % 2 == 0) temp.push(j);
  }
  a.push(temp);
}
Logger.log(a)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pattern-2&#34;&gt;Pattern 2&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;var b = [];
data.forEach(function(e1){
  var temp = [];
  e1.forEach(function(e2, i2){
    if (e2[0] % 2 == 0) temp.push(parseInt(i2, 10));
  });
  b.push(temp);
});
Logger.log(b)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pattern-3&#34;&gt;Pattern 3&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;var c = [[parseInt(i, 10) for (i in e) if (e[i][0] % 2 == 0)] for each (e in data)];
Logger.log(c)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;GAS can use JavaScript 1.7. So it can write as above.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the case of &lt;code&gt;[i for (i in array)]&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt; is index. But it&amp;rsquo;s string.&lt;/li&gt;
&lt;li&gt;In the case of &lt;code&gt;[i for each (i in array)]&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt; is element.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Creating Spreadsheet from Excel file</title>
      <link>https://tanaikech.github.io/2017/04/15/creating-spreadsheet-from-excel-file</link>
      <pubDate>Sat, 15 Apr 2017 10:39:05 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/04/15/creating-spreadsheet-from-excel-file</guid>
      <description>

&lt;p&gt;These scripts can be executed on Script Editor. But, in order to use these, you have to enable Drive API of Advanced Google services and of Google API Console. &amp;ldquo;Drive API v2&amp;rdquo; can be used at Google Apps Script by enabling Drive API of Advanced Google services and of Google API Console.&lt;/p&gt;

&lt;p&gt;How to use it is as follows.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In the script editor, select Resources &amp;gt; Advanced Google services&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the dialog that appears, click the on/off switch for &lt;a href=&#34;https://developers.google.com/drive/v2/reference/&#34;&gt;Drive API v2&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;At the bottom of the dialog, click the link for the Google API Console.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the console, click into the filter box and type part of the name of the API &amp;ldquo;Drive API&amp;rdquo;, then click the name once you see it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On the next screen, click Enable API.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Close the Developers Console and return to the script editor. Click OK in the dialog. The advanced service you enabled is now available in autocomplete.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The detail information is &lt;a href=&#34;https://developers.google.com/apps-script/guides/services/advanced&#34;&gt;https://developers.google.com/apps-script/guides/services/advanced&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;1-creating-spreadsheet-from-excel-file-on-google-drive&#34;&gt;1. Creating Spreadsheet from Excel file on Google Drive&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var fileID = &amp;quot;#####&amp;quot;;
var folderID = &amp;quot;#####&amp;quot;;
var filename = &amp;quot;filename&amp;quot;;

var res = Drive.Files.insert({
  &amp;quot;mimeType&amp;quot;: &amp;quot;application/vnd.google-apps.spreadsheet&amp;quot;,
  &amp;quot;parents&amp;quot;: [{id: folderID}],
  &amp;quot;title&amp;quot;: filename
}, DriveApp.getFileById(fileID).getBlob());
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-creating-spreadsheet-from-excel-file-on-web-site&#34;&gt;2. Creating Spreadsheet from Excel file on Web Site&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var fileURL = &amp;quot;https://#####/sample.xlsx&amp;quot;;
var folderID = &amp;quot;#####&amp;quot;;
var filename = &amp;quot;filename&amp;quot;;

var res = Drive.Files.insert({
  &amp;quot;mimeType&amp;quot;: &amp;quot;application/vnd.google-apps.spreadsheet&amp;quot;,
  &amp;quot;parents&amp;quot;: [{id: folderID}],
  &amp;quot;title&amp;quot;: filename
}, UrlFetchApp.fetch(fileURL).getBlob());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example, when you want to retrieve created file ID, you can retrieve it by&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;res.id
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Creating Downloaded Excel file as Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/04/14/creating-downloaded-excel-file-as-spreadsheet</link>
      <pubDate>Fri, 14 Apr 2017 18:03:32 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/04/14/creating-downloaded-excel-file-as-spreadsheet</guid>
      <description>&lt;p&gt;This is a sample GAS script to create an Excel file, which was downloaded from web, as Spreadsheet. By using Drive API, it can be achieved without access token.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Script :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function downloadFile(fileURL, folder) {
  var filename = fileURL.match(&amp;quot;.+/(.+?)([\?#;].*)?$&amp;quot;)[1];
  var response = UrlFetchApp.fetch(fileURL);
  var rc = response.getResponseCode();
  var blob = response.getBlob();
  var resource = {
    &amp;quot;mimeType&amp;quot;: &amp;quot;application/vnd.google-apps.spreadsheet&amp;quot;,
    &amp;quot;parents&amp;quot;: [{id: folder}],
    &amp;quot;title&amp;quot;: filename
  };
  var res = Drive.Files.insert(resource, blob);
  var fileInfo = [rc, res.title, blob.getBytes().length, res.id];
  return fileInfo;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Result :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    200,
    sample.xlsx,
    10000.0,
    ## file id ##
]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Removes Duplicate JSON Elements for a Value of a Certain Key</title>
      <link>https://tanaikech.github.io/2017/04/09/removes-duplicate-json-elements-for-a-value-of-a-certain-key</link>
      <pubDate>Sun, 09 Apr 2017 14:24:58 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/04/09/removes-duplicate-json-elements-for-a-value-of-a-certain-key</guid>
      <description>&lt;p&gt;This sample removes duplicate JSON elements for a value of a certain key. When the value of the certain key is removed, only a first duplicate element is left. Also I had wanted to be used for Google Apps Script. So it became like this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Script :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function removeDup(arr, key){
    var temp = [];
    var out = [];
    arr.forEach( function (e, i) {
        temp[i] = (temp.indexOf(e[key]) === -1) ? e[key] : false;
        if (temp[i]) out.push(e);
    });
    return out;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;JSON :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var arr = [
    {a: &amp;quot;a1&amp;quot;, b: &amp;quot;b1&amp;quot;, c: &amp;quot;c1&amp;quot;},
    {a: &amp;quot;a2&amp;quot;, b: &amp;quot;b1&amp;quot;, c: &amp;quot;c1&amp;quot;},
    {a: &amp;quot;a3&amp;quot;, b: &amp;quot;b2&amp;quot;, c: &amp;quot;c1&amp;quot;},
    {a: &amp;quot;a4&amp;quot;, b: &amp;quot;b2&amp;quot;, c: &amp;quot;c2&amp;quot;},
    {a: &amp;quot;a5&amp;quot;, b: &amp;quot;b3&amp;quot;, c: &amp;quot;c2&amp;quot;}
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Pattern 1:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var key = &amp;quot;b&amp;quot;;
var out = removeDup(arr, &amp;quot;key&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[
    { a: &#39;a1&#39;, b: &#39;b1&#39;, c: &#39;c1&#39; },
    { a: &#39;a3&#39;, b: &#39;b2&#39;, c: &#39;c1&#39; },
    { a: &#39;a5&#39;, b: &#39;b3&#39;, c: &#39;c2&#39; }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Pattern 2:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var key = &amp;quot;c&amp;quot;;
var out = removeDup(arr, &amp;quot;key&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[
    { a: &#39;a1&#39;, b: &#39;b1&#39;, c: &#39;c1&#39; },
    { a: &#39;a4&#39;, b: &#39;b2&#39;, c: &#39;c2&#39; }
]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Flattening Nested Array using CoffeeScript</title>
      <link>https://tanaikech.github.io/2017/03/31/flattening-nested-array-using-coffeescript</link>
      <pubDate>Fri, 31 Mar 2017 10:48:33 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/03/31/flattening-nested-array-using-coffeescript</guid>
      <description>&lt;p&gt;This sample flattens a nested array using CoffeeScript.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;flatten = (array) -&amp;gt;
    array.reduce(((x, y) -&amp;gt; if Array.isArray(y) then x.concat(flatten(y)) else x.concat(y)), [])

console.log flatten [1, [2, 3, [4, 5]], 6, [7, [8, [9], 10] ,11 , 12], 13]

&amp;gt;&amp;gt;&amp;gt; [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 ]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>How to use &#34;fields&#34; of Drive APIs</title>
      <link>https://tanaikech.github.io/2017/03/30/how-to-use-fields-of-drive-apis</link>
      <pubDate>Thu, 30 Mar 2017 08:53:21 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/03/30/how-to-use-fields-of-drive-apis</guid>
      <description>

&lt;p&gt;There are a lot of APIs on Google. When we use Google Drive APIs, they usually have &amp;ldquo;fields&amp;rdquo; as a resource. The parameter &amp;ldquo;fields&amp;rdquo; gives various information which is selected to us. This is one of important parameters. And this can be used at Google Apps Script (GAS) although that version is v2. About how to use it, there are &lt;a href=&#34;https://developers.google.com/drive/v2/reference/&#34;&gt;some documents&lt;/a&gt;. But it is difficult to find how to use it at GAS. So I would like to write down here as a memorandum. Most parameters for APIs have to be expressed as JSON. However, the expressions are different for each API. I would like to introduce this using some samples. &lt;strong&gt;This is for GAS.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-drive-files-list&#34;&gt;1. Drive.Files.list&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;var params = {
    q:      &amp;quot;title=&#39;sample&#39; and trashed=false&amp;quot;,
    fields: &amp;quot;items(id, title, mimeType), kind&amp;quot;
};
var res = Drive.Files.list(params)
Logger.log(JSON.stringify(res))

{
  &amp;quot;kind&amp;quot;: &amp;quot;drive#fileList&amp;quot;,
  &amp;quot;items&amp;quot;: [
    {
      &amp;quot;id&amp;quot;: &amp;quot;FILE ID&amp;quot;,
      &amp;quot;mimeType&amp;quot;: &amp;quot;mimeType&amp;quot;,
      &amp;quot;title&amp;quot;: &amp;quot;FILE NAME&amp;quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;q&lt;/code&gt; is used at &amp;ldquo;Search for Files&amp;rdquo;. At this sample, it searches file name of &amp;ldquo;sample&amp;rdquo; outside trash box.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fields&lt;/code&gt; is expressed as above. &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt; and &amp;ldquo;mimeType&amp;rdquo; are file name, file id and mime type of the file, respectively. &lt;code&gt;kind&lt;/code&gt; is &amp;ldquo;This is always drive#fileList.&amp;rdquo; from document.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;References :

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/drive/v2/reference/files/list&#34;&gt;https://developers.google.com/drive/v2/reference/files/list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/drive/v2/web/search-parameters&#34;&gt;https://developers.google.com/drive/v2/web/search-parameters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-drive-files-get&#34;&gt;2. Drive.Files.get&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;var params = {
    fields: &amp;quot;id, title, mimeType&amp;quot;
};
var dat = Drive.Files.get(&amp;quot;FILE ID&amp;quot;, params);
Logger.log(JSON.stringify(dat))

{
  &amp;quot;id&amp;quot;: &amp;quot;FILE ID&amp;quot;,
  &amp;quot;mimeType&amp;quot;: &amp;quot;mimeType&amp;quot;,
  &amp;quot;title&amp;quot;: &amp;quot;FILE NAME&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example, &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;mimeType&lt;/code&gt; are file name, file id and mime type of the file, respectively.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reference :

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/drive/v2/reference/files/get&#34;&gt;https://developers.google.com/drive/v2/reference/files/get&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;3-drive-files-insert&#34;&gt;3. Drive.Files.insert&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;var data = {
    title:    &amp;quot;sample&amp;quot;,
    mimeType: &amp;quot;application/vnd.google-apps.spreadsheet&amp;quot;,
    parents:  [{&amp;quot;id&amp;quot;: &amp;quot;FOLDER ID&amp;quot;}]
};
var res = Drive.Files.insert(data);
Logger.log(&amp;quot;{id: %s, title: %s, mimeType: %s}&amp;quot;, res.id, res.title, res.mimeType)

{
  &amp;quot;id&amp;quot;: &amp;quot;FILE ID&amp;quot;,
  &amp;quot;title&amp;quot;: &amp;quot;sample&amp;quot;,
  &amp;quot;mimeType&amp;quot;: &amp;quot;application/vnd.google-apps.spreadsheet&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By this, a new spreadsheet is created under the FOLDER ID. In this case, &amp;ldquo;fields&amp;rdquo; is retrieved from the results of execution.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reference :

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/drive/v2/reference/files/insert&#34;&gt;https://developers.google.com/drive/v2/reference/files/insert&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Retrieve old revision file from Google Drive</title>
      <link>https://tanaikech.github.io/2017/03/29/retrieve-old-revision-file-from-google-drive</link>
      <pubDate>Wed, 29 Mar 2017 16:00:06 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/03/29/retrieve-old-revision-file-from-google-drive</guid>
      <description>

&lt;p&gt;I introduce 2 kinds of methods. One is to use &lt;code&gt;curl&lt;/code&gt;. Another is to use &lt;code&gt;wget&lt;/code&gt;. At this time, I could know that &lt;code&gt;wget&lt;/code&gt; can be also used as same as &lt;code&gt;curl&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;1-file-id&#34;&gt;1. File ID&lt;/h3&gt;

&lt;p&gt;Retrieve file id from file name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -X GET -sSL \
    -H &#39;Authorization: Bearer ### Access token ###&#39; \
    &#39;https://www.googleapis.com/drive/v3/files?q=name=&amp;quot;### FileName ###&amp;quot;&amp;amp;fields=files(id,name)&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;wget -q --header=&#39;Authorization: Bearer ### Access token ###&#39; \
    &#39;https://www.googleapis.com/drive/v3/files?q=name=&amp;quot;### FileName ###&amp;quot;&amp;amp;fields=files(id,name)&#39; \
    -O out.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reference : &lt;a href=&#34;https://developers.google.com/drive/v3/reference/files/list&#34;&gt;https://developers.google.com/drive/v3/reference/files/list&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-revision-id&#34;&gt;2. Revision ID&lt;/h3&gt;

&lt;p&gt;Retrieve revision id from file id.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -X GET -sSL \
    -H &#39;Authorization: Bearer ### Access token ###&#39; \
    &#39;https://www.googleapis.com/drive/v3/files/### FileID ###/revisions?fields=revisions(id%2CmodifiedTime)&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;wget -q --header=&#39;Authorization: Bearer ### Access token ###&#39; \
    &#39;https://www.googleapis.com/drive/v3/files/### FileID ###/revisions?fields=revisions(id%2CmodifiedTime)&#39; \
    -O out.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reference : &lt;a href=&#34;https://developers.google.com/drive/v3/reference/revisions/list&#34;&gt;https://developers.google.com/drive/v3/reference/revisions/list&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-file-for-revision-id&#34;&gt;3. File for Revision ID&lt;/h3&gt;

&lt;p&gt;Retrieve a file from revision id.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -X GET -sSL \
    -H &#39;Authorization: Bearer ### Access token ###&#39; \
    &amp;quot;https://www.googleapis.com/drive/v3/files/### FileID ###/revisions/### RevisionID ###?alt=media&amp;quot; \
    -o outputfilename
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;wget -q --header=&#39;Authorization: Bearer ### Access token ###&#39; \
    &amp;quot;https://www.googleapis.com/drive/v3/files/### FileID ###/revisions/### RevisionID ###?alt=media&amp;quot; \
    -O outputfilename
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reference : &lt;a href=&#34;https://developers.google.com/drive/v3/reference/revisions/get&#34;&gt;https://developers.google.com/drive/v3/reference/revisions/get&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Put a channel to a channel for golang</title>
      <link>https://tanaikech.github.io/2017/03/29/put-a-channel-to-a-channel-for-golang</link>
      <pubDate>Wed, 29 Mar 2017 07:53:51 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/03/29/put-a-channel-to-a-channel-for-golang</guid>
      <description>&lt;p&gt;I have never heard this. I would like to use this from now.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type st struct {
    data1 int
    data2 int
}

func main() {
    c1 := make(chan *st, 1)
    c2 := make(chan *st, 1)
    c1 &amp;lt;- &amp;amp;st{1, 2}
    c2 &amp;lt;- &amp;lt;-c1
    close(c1)
    close(c2)
    res, _ := &amp;lt;-c2
    fmt.Println(res.data2)
}

&amp;gt;&amp;gt;&amp;gt; 2
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Retrieving File ID from File Name using GAS</title>
      <link>https://tanaikech.github.io/2017/03/23/retrieving-file-id-from-file-name-using-gas</link>
      <pubDate>Thu, 23 Mar 2017 14:24:29 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/03/23/retrieving-file-id-from-file-name-using-gas</guid>
      <description>&lt;p&gt;This is a sample script of GAS for converting file name to file id on Google Drive. Drive API is used for this. So please enable Drive API at Advanced Drive Services and Google API Console.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function nameToId(filename){
  return [i.id for each (i in Drive.Files.list({q: &amp;quot;title=&#39;&amp;quot; + filename + &amp;quot;&#39; and trashed=false&amp;quot;}).items)];
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Transposing Array From (n x m) To (m x n)</title>
      <link>https://tanaikech.github.io/2017/03/21/transposing-array-from-n-x-m-to-m-x-n</link>
      <pubDate>Tue, 21 Mar 2017 08:55:34 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/03/21/transposing-array-from-n-x-m-to-m-x-n</guid>
      <description>&lt;p&gt;This script transposes from an array with n rows x m columns to the array with m rows x n columns. In this script, you can use array of &lt;code&gt;n != m&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;array = [
    [a1, b1, c1, d1, e1],
    [a2, b2, c2, d2, e2],
    [a3, b3, c3, d3, e3],
    [a4, b4, c4, d4, e4],
    [a5, b5, c5, d5, e5],
    [a6, b6, c6, d6, e6],
    [a7, b7, c7, d7, e7],
    [a8, b8, c8, d8, e8],
    [a9, b9, c9, d9, e9],
    [a10, b10, c10, d10, e10]
]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var result = [];
for (i in array[0]){
    result.push(array.map(function(e,j){return e[i]}));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;result = [
    [a1, a2, a3, a4, a5, a6, a7, a8, a9, a10],
    [b1, b2, b3, b4, b5, b6, b7, b8, b9, b10],
    [c1, c2, c3, c4, c5, c6, c7, c8, c9, c10],
    [d1, d2, d3, d4, d5, d6, d7, d8, d9, d10],
    [e1, e2, e3, e4, e5, e6, e7, e8, e9, e10]
]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>