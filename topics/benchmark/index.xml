<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Benchmark on tanaike</title>
    <link>https://tanaikech.github.io/topics/benchmark/</link>
    <description>Recent content in Benchmark on tanaike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Wed, 15 Sep 2021 14:42:25 +0900</lastBuildDate>
    
	<atom:link href="https://tanaikech.github.io/topics/benchmark/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Benchmark: Concurrent Writing to Google Spreadsheet using Form</title>
      <link>https://tanaikech.github.io/2021/09/15/benchmark-concurrent-writing-to-google-spreadsheet-using-form/</link>
      <pubDate>Wed, 15 Sep 2021 14:42:25 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2021/09/15/benchmark-concurrent-writing-to-google-spreadsheet-using-form/</guid>
      <description>Gists
  Published: September 15, 2021
  Updated: September 17, 2021
 From the discussions, added data by changing the wait time of LockService for Web Apps.    Kanshi Tanaike
Introduction When the users try to write to a Spreadsheet using a form, the developers have to consider the concurrent submission from the form. For example, when multiple users submit the data with the form simultaneously, all data are possibly not to be saved to the Spreadsheet.</description>
    </item>
    
    <item>
      <title>Benchmark: Process Costs for Retrieving 1st Empty Cell and 1st Non Empty Cell of Specific Column in Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2021/05/19/benchmark-process-costs-for-retrieving-1st-empty-cell-and-1st-non-empty-cell-of-specific-column-in-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Wed, 19 May 2021 13:47:29 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2021/05/19/benchmark-process-costs-for-retrieving-1st-empty-cell-and-1st-non-empty-cell-of-specific-column-in-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
Introduction Here, I would like to report the process costs for retrieving the 1st empty cell or 1st non empty cell of the specific column of Google Spreadsheet using Google Apps Script (GAS). For this situations, the following 2 patterns can be considered.
  Retrieving 1st empty cell of specific column by searching from TOP of sheet
  Retrieving 1st NON empty cell of specific column by searching from BOTTOM of sheet</description>
    </item>
    
    <item>
      <title>Benchmark: Measuring Process Costs for Formulas in Cells on Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2020/11/11/benchmark-measuring-process-costs-for-formulas-in-cells-on-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Wed, 11 Nov 2020 14:20:27 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/11/11/benchmark-measuring-process-costs-for-formulas-in-cells-on-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
Description When Google Spreadsheet is used, there is the case that the built-in functions and the custom functions in the cells are used. For the functions of Google Apps Script, there is the method for measuring the process cost. Ref But for the built-in functions, it is required to create the script for it. In this report, the script for measuring a function put in a cell has been proposed, and the process cost of the built-in functions has been measured.</description>
    </item>
    
    <item>
      <title>Benchmark: Process Costs for Retrieving Values from Arrays for Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2020/10/23/benchmark-process-costs-for-retrieving-values-from-arrays-for-spreadsheet-using-google-apps-script/</link>
      <pubDate>Fri, 23 Oct 2020 16:37:04 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/10/23/benchmark-process-costs-for-retrieving-values-from-arrays-for-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
Introduction Here, I would like to report the process costs for retrieving the values from the arrays for Spreadsheet using Google Apps Script (GAS). When Spreadsheet is used with Google Apps Script, we have the following situations.
  Retrieve values from the multiple rows in a column.
  Retrieve values from the multiple columns in a row.
  When the values are retrieved from above situations, it is required to retrieve the values from 1 dimensional array in the 2 dimensional array.</description>
    </item>
    
    <item>
      <title>Benchmark: Process Costs for Searching Values in Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2020/09/30/benchmark-process-costs-for-searching-values-in-spreadsheet-using-google-apps-script/</link>
      <pubDate>Wed, 30 Sep 2020 11:42:46 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/09/30/benchmark-process-costs-for-searching-values-in-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
Introduction Here, I would like to report the process costs for searching values in Spreadsheet using Google Apps Script (GAS). When the values are searched in Google Spreadsheet, the following 3 patterns can be considered. Ref
 Retrieve all values using getValues, and the values are searched from the retrieved array. Use TextFinder. Use Query language.  In these cases, it has already been found that the lowest process cost is to use the Query language.</description>
    </item>
    
    <item>
      <title>Benchmark: Process Costs under V8 using Google Apps Script</title>
      <link>https://tanaikech.github.io/2020/03/22/benchmark-process-costs-under-v8-using-google-apps-script/</link>
      <pubDate>Sun, 22 Mar 2020 13:46:33 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/03/22/benchmark-process-costs-under-v8-using-google-apps-script/</guid>
      <description>Gists
 March 22, 2020  Published.    Kanshi Tanaike
Introduction V8 engine got to be able to be used at Google Apps Script. By this, I have reported about the process costs with and without using V8. Ref It is considered that knowing the process costs for various methods will be useful for creating the applications with Google Apps Script. Here, I would like to introduce the process costs of each situations under V8.</description>
    </item>
    
    <item>
      <title>Benchmark: Loop for Array Processing using Google Apps Script with V8</title>
      <link>https://tanaikech.github.io/2020/02/09/benchmark-loop-for-array-processing-using-google-apps-script-with-v8/</link>
      <pubDate>Sun, 09 Feb 2020 17:01:04 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/02/09/benchmark-loop-for-array-processing-using-google-apps-script-with-v8/</guid>
      <description>Gists
Kanshi Tanaike
Introduction Please be careful! This result can be only used for Google Apps Script.
There are a limit executing time for Google Apps Script (GAS). That is 6 minutes.1 So users always have to pay attention to reducing the process cost of the scripts. Especially, it is very important to know the process cost for the array processing, because the array processing is often used for spreadsheet and Google APIs.</description>
    </item>
    
    <item>
      <title>Benchmark: Importing CSV Data to Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2019/08/28/benchmark-importing-csv-data-to-spreadsheet-using-google-apps-script/</link>
      <pubDate>Wed, 28 Aug 2019 12:01:20 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/08/28/benchmark-importing-csv-data-to-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
Kanshi Tanaike
Introduction Please be careful! This result can be only used for Google Apps Script.
There are a limit executing time for Google Apps Script (GAS). That is 6 minutes for Consumer and Google Apps free edition, and 30 minutes for G Suite and Early Access. 1 So many users always have to pay attention to reducing the process cost of scripts. So it is very important to know the process cost of various situations.</description>
    </item>
    
    <item>
      <title>Benchmark: Reading and Writing Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2018/10/12/benchmark-reading-and-writing-spreadsheet-using-google-apps-script/</link>
      <pubDate>Fri, 12 Oct 2018 10:42:45 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/10/12/benchmark-reading-and-writing-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
Benchmark: Reading and Writing Spreadsheet using Google Apps Script October 18, 2018 Updated. In order to compare with Advanced Google Service, a result of Sheets API by UrlFetchApp was added to Appendix.
Kanshi Tanaike
Introduction Please be careful! This result can be only used for Google Apps Script.
There are a limit executing time for Google Apps Script (GAS). That is 6 minutes for Consumer and Google Apps free edition, and 30 minutes for G Suite and Early Access.</description>
    </item>
    
    <item>
      <title>Benchmark: Decreasing Loop for Array Processing using Google Apps Script</title>
      <link>https://tanaikech.github.io/2018/08/11/benchmark-decreasing-loop-for-array-processing-using-google-apps-script/</link>
      <pubDate>Sat, 11 Aug 2018 16:25:31 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/08/11/benchmark-decreasing-loop-for-array-processing-using-google-apps-script/</guid>
      <description>Gists
Benchmark: Decreasing Loop for Array Processing using Google Apps Script Kanshi Tanaike
Introduction Please be careful! This result can be only used for Google Apps Script.
There are a limit executing time for Google Apps Script (GAS). That is 6 minutes. 1 So users always have to pay attention to reducing the process cost of the scripts. Especially, it is very important to know the process cost for the array processing, because the array processing is often used for spreadsheet and Google APIs.</description>
    </item>
    
    <item>
      <title>Updated: Benchmark: Loop for Array Processing using Google Apps Script without V8</title>
      <link>https://tanaikech.github.io/2018/07/26/updated-benchmark-loop-for-array-processing-using-google-apps-script-without-v8/</link>
      <pubDate>Thu, 26 Jul 2018 09:29:06 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/07/26/updated-benchmark-loop-for-array-processing-using-google-apps-script-without-v8/</guid>
      <description>I updated the report of &amp;ldquo;Benchmark: Loop for Array Processing using Google Apps Script&amp;rdquo;. In this update, &amp;ldquo;reduce&amp;rdquo; was added. If this report is useful for your situation, I&#39;m glad.
**You can check this at https://gist.</description>
    </item>
    
    <item>
      <title>Benchmark: Conditional Branch using Google Apps Script</title>
      <link>https://tanaikech.github.io/2018/07/11/benchmark-conditional-branch-using-google-apps-script/</link>
      <pubDate>Wed, 11 Jul 2018 13:36:25 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/07/11/benchmark-conditional-branch-using-google-apps-script/</guid>
      <description>Gists
Benchmark: Conditional Branch using Google Apps Script Kanshi Tanaike
Introduction Please be careful! This result can be only used for Google Apps Script.
There are a limit executing time for Google Apps Script (GAS). That is 6 minutes.1 So users always have to pay attention to reducing the process cost of the scripts. Especially, it is very important to know the process cost for the array processing, because the array processing is often used for spreadsheet and Google APIs.</description>
    </item>
    
    <item>
      <title>Benchmark: Search for Array Processing using Google Apps Script</title>
      <link>https://tanaikech.github.io/2018/07/02/benchmark-search-for-array-processing-using-google-apps-script/</link>
      <pubDate>Mon, 02 Jul 2018 08:55:45 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/07/02/benchmark-search-for-array-processing-using-google-apps-script/</guid>
      <description>Gists
Benchmark: Search for Array Processing using Google Apps Script Kanshi Tanaike
Introduction Please be careful! This result can be only used for Google Apps Script.
There are a limit executing time for Google Apps Script (GAS). That is 6 minutes.1 So users always have to pay attention to reducing the process cost of the scripts. Especially, it is very important to know the process cost for the array processing, because the array processing is often used for spreadsheet and Google APIs.</description>
    </item>
    
    <item>
      <title>Benchmark: fetchAll method in UrlFetch service for Google Apps Script</title>
      <link>https://tanaikech.github.io/2018/04/19/benchmark-fetchall-method-in-urlfetch-service-for-google-apps-script/</link>
      <pubDate>Thu, 19 Apr 2018 14:24:24 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/04/19/benchmark-fetchall-method-in-urlfetch-service-for-google-apps-script/</guid>
      <description>Gists
By Google&#39;s update at January 19, 2018, fetchAll method was added to the UrlFetch service. When I saw the usage, I couldn&#39;t find the detail information about the actual running state. So I investigated about it.
As the result, it was found that the fetchAll method is worked by the asynchronous processing. The returned data is reordered by the order of requests. By this, it was also found that if you want to retrieve the data from the several URL, the process cost of UrlFetchApp.</description>
    </item>
    
    <item>
      <title>Benchmark: Loop for Array Processing using Google Apps Script</title>
      <link>https://tanaikech.github.io/2018/04/16/benchmark-loop-for-array-processing-using-google-apps-script/</link>
      <pubDate>Mon, 16 Apr 2018 08:27:17 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/04/16/benchmark-loop-for-array-processing-using-google-apps-script/</guid>
      <description>Gists
Benchmark: Loop for Array Processing using Google Apps Script July 26, 2018 Updated. Result of reduce was added.
Kanshi Tanaike
Introduction Please be careful! This result can be only used for Google Apps Script.
There are a limit executing time for Google Apps Script (GAS). That is 6 minutes.1 So users always have to pay attention to reducing the process cost of the scripts. Especially, it is very important to know the process cost for the array processing, because the array processing is often used for spreadsheet and Google APIs.</description>
    </item>
    
    <item>
      <title>Benchmark: Event Objects for Google Apps Script</title>
      <link>https://tanaikech.github.io/2018/04/14/benchmark-event-objects-for-google-apps-script/</link>
      <pubDate>Sat, 14 Apr 2018 14:45:15 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/04/14/benchmark-event-objects-for-google-apps-script/</guid>
      <description>Gists
Introduction There are event objects at Google Apps Script. Typically, users which use Spreadsheet often use onEdit(event). Here, I would like to introduce the process costs for the event objects using this onEdit(event).
When onEdit(event) is used for the spreadsheet, event of onEdit(event) has the following structure.
{&amp;#34;authMode&amp;#34;: {},&amp;#34;range&amp;#34;: {&amp;#34;columnStart&amp;#34;: 1,&amp;#34;rowStart&amp;#34;: 1,&amp;#34;rowEnd&amp;#34;: 1,&amp;#34;columnEnd&amp;#34;: 1},&amp;#34;source&amp;#34;: {},&amp;#34;oldValue&amp;#34;: &amp;#34;old sample text&amp;#34;,&amp;#34;user&amp;#34;: {&amp;#34;nickname&amp;#34;: &amp;#34;sampleName&amp;#34;,&amp;#34;email&amp;#34;: &amp;#34;sample email&amp;#34;},&amp;#34;value&amp;#34;: &amp;#34;sample text&amp;#34;}In this structure, for example, the range of active cell is &amp;quot;range&amp;quot;: {&amp;quot;columnStart&amp;quot;: 1, &amp;quot;rowStart&amp;quot;: 1, &amp;quot;rowEnd&amp;quot;: 1, &amp;quot;columnEnd&amp;quot;: 1 }.</description>
    </item>
    
    <item>
      <title>Benchmark: Retrieving Values from Deep Nested JSON at Golang</title>
      <link>https://tanaikech.github.io/2017/06/17/benchmark-retrieving-values-from-deep-nested-json-at-golang/</link>
      <pubDate>Sat, 17 Jun 2017 10:06:24 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/17/benchmark-retrieving-values-from-deep-nested-json-at-golang/</guid>
      <description>This sample script is for retrieving values from a deep nested JSON. There are 2 patterns. So for these, the benchmark were measured.
Script : package main import ( &amp;quot;encoding/json&amp;quot; &amp;quot;testing&amp;quot; ) const ( data = `{ &amp;quot;A_key1&amp;quot;: { &amp;quot;B_key1&amp;quot;: { &amp;quot;C_key&amp;quot;: &amp;quot;value&amp;quot; } } }` ) func BenchmarkB1(b *testing.B) { b.ResetTimer() for i := 0; i &amp;lt; b.N; i++ { var p map[string]interface{} json.Unmarshal([]byte(data), &amp;amp;p) a1 := p[&amp;quot;A_key1&amp;quot;] a2 := p[&amp;quot;A_key1&amp;quot;].</description>
    </item>
    
    <item>
      <title>Benchmark: Effect of Comprehension for GAS</title>
      <link>https://tanaikech.github.io/2017/06/07/benchmark-effect-of-comprehension-for-gas/</link>
      <pubDate>Wed, 07 Jun 2017 09:21:54 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/07/benchmark-effect-of-comprehension-for-gas/</guid>
      <description>Description There are a limit executing time for Google Apps Script (GAS). It&#39;s 6 minutes. So users have to pay attention to the process cost of the script. GAS can use JavaScript 1.7. This means to be able to be used comprehension for GAS.
In this report, the process cost for the comprehension has been investigated. The normal for loop was used as the competitor. As a result, it was found that the comprehension can be used one of methods for reducing the process cost.</description>
    </item>
    
    <item>
      <title>Benchmark: Splitting Command-Line Arguments by Golang</title>
      <link>https://tanaikech.github.io/2017/06/02/benchmark-splitting-command-line-arguments-by-golang/</link>
      <pubDate>Fri, 02 Jun 2017 10:59:31 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/02/benchmark-splitting-command-line-arguments-by-golang/</guid>
      <description>This sample script is for splitting command-line arguments by golang. There are 2 types. One is the regular expression is used. Another is that Split() and TrimSpace() are used.
Here, each process speed was compared.
Script : package main import ( &amp;quot;regexp&amp;quot; &amp;quot;strings&amp;quot; &amp;quot;testing&amp;quot; ) func BenchmarkB1(b *testing.B) { str := &amp;quot;test1.txt, test2.txt&amp;quot; b.ResetTimer() for i := 0; i &amp;lt; b.N; i++ { ar := regexp.MustCompile(`\s*,\s*`).Split(str, -1) var result []string for _, x := range ar { result = append(result, x) // --&amp;gt; &#39;test.</description>
    </item>
    
    <item>
      <title>Python Library - souwapy</title>
      <link>https://tanaikech.github.io/2016/10/30/python-library-souwapy/</link>
      <pubDate>Sun, 30 Oct 2016 13:38:29 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2016/10/30/python-library-souwapy/</guid>
      <description>This &amp;ldquo;souwapy&amp;rdquo; is a library for summing array elements with high speed by new algorithm (Pyramid method). The speed is faster than csv and panbdas module of python and v8 engine of node.js. The souwapy module is 2.3 and 3.1 times faster than csv and pandas module, respectively. This was really surprised me. It was found that the theory was correct.
At first, I have created this theory for Google Apps Script.</description>
    </item>
    
    <item>
      <title>GAS Library - SOUWA_GAS - Effects on Optimized Codes of Pyramid Method</title>
      <link>https://tanaikech.github.io/2016/10/13/gas-library-souwa_gas-effects-on-optimized-codes-of-pyramid-method/</link>
      <pubDate>Thu, 13 Oct 2016 15:57:20 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2016/10/13/gas-library-souwa_gas-effects-on-optimized-codes-of-pyramid-method/</guid>
      <description>Abstract I have already reported that the pyramid method is one of very effectively algolithms for summing string elements in an array using Google Apps Script (GAS). This report describes the adaptability of the pyramid method to any languages except for GAS. c++ (g++), Go, Java, Javascript on Node.js, Python and Ruby were chosen as the sample languages. In those languages, there are languages which have the distinctive commands for summing the array elements.</description>
    </item>
    
    <item>
      <title>Improved Algorithms for Summation of Array Elements</title>
      <link>https://tanaikech.github.io/2016/10/13/improved-algorithms-for-summation-of-array-elements/</link>
      <pubDate>Thu, 13 Oct 2016 14:39:34 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2016/10/13/improved-algorithms-for-summation-of-array-elements/</guid>
      <description>Abstract I considered an efficient algorithm for summation of array elements. All elements in an array are string. When those elements are summed using scripts, a standard method is to add each element in order. If the script is run without any optimize, the process becomes gradually sluggish, because the total amount of active data during the summation process is proportional to the square of the number of array elements. This leads directly to the high process-cost.</description>
    </item>
    
  </channel>
</rss>