<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gastips on tanaike</title>
    <link>https://tanaikech.github.io/topics/gastips/</link>
    <description>Recent content in Gastips on tanaike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Mon, 21 Aug 2017 08:30:37 +0900</lastBuildDate>
    
	<atom:link href="https://tanaikech.github.io/topics/gastips/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Changing Values by Checking Duplicated Values of JSON for Javascript</title>
      <link>https://tanaikech.github.io/2017/08/21/changing-values-by-checking-duplicated-values-of-json-for-javascript/</link>
      <pubDate>Mon, 21 Aug 2017 08:30:37 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/08/21/changing-values-by-checking-duplicated-values-of-json-for-javascript/</guid>
      <description>This sample script is for changing values by checking duplicated values of JSON for Javascript.
Please see the following script. There is an array with a JSON data with 3 keys and 3 values. It is found that the values for each element duplicate. These duplicated values are changing by adding numbers.
I use this for managing filenames. This script also can be used for Google Apps Script. If this was useful for you, I&amp;rsquo;m glad.</description>
    </item>
    
    <item>
      <title>Updated: GAS Library - ImgApp</title>
      <link>https://tanaikech.github.io/2017/08/20/updated-gas-library---imgapp/</link>
      <pubDate>Sun, 20 Aug 2017 15:11:32 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/08/20/updated-gas-library---imgapp/</guid>
      <description>ImgApp was updated to v1.2.0. New method was added.
3. updateThumbnail() Overview This method is for updating thumbnail of files on Google Drive using images you selected.
Description For example, zip files don&amp;rsquo;t have the thumbnail on Google Drive. An icon is shown as the thumbnail. For the most files, Google Drive can create automatically each thumbnail. But there are sometimes files which cannot be created the thumbnail. Zip file is also one of them.</description>
    </item>
    
    <item>
      <title>GAS Library - OnedriveApp</title>
      <link>https://tanaikech.github.io/2017/08/16/gas-library---onedriveapp/</link>
      <pubDate>Wed, 16 Aug 2017 10:31:19 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/08/16/gas-library---onedriveapp/</guid>
      <description>This is a library of Google Apps Script for using Microsoft OneDrive.
Feature This library can carry out following functions using OneDrive APIs.
 Retrieve file list on OneDrive. Delete files and folders on OneDrive. Create folder on OneDrive. Download files from OneDrive to Google Drive. Upload files from Google Drive to OneDrive.  Demo You can see the detail information here https://github.com/tanaikech/OnedriveApp</description>
    </item>
    
    <item>
      <title>Interconversion Between Google Docs and Microsoft Docs</title>
      <link>https://tanaikech.github.io/2017/08/11/interconversion-between-google-docs-and-microsoft-docs/</link>
      <pubDate>Fri, 11 Aug 2017 15:02:37 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/08/11/interconversion-between-google-docs-and-microsoft-docs/</guid>
      <description>Gists
This sample script is for the interconversion between Google Docs (document, spreadsheet and presentation) and Microsoft Docs (word, excel and powerpoint). The feature is to convert them without Advanced Google Services.
Since Advanced Google Services is not used for this, if you publish your script with this script, you are not necessary to explain how to install Advanced Google Services. This script converts between Google Docs and Microsoft Docs using UrlFetchApp.</description>
    </item>
    
    <item>
      <title>Retrieving Access Token From OneDrive using Google Apps Script</title>
      <link>https://tanaikech.github.io/2017/08/04/retrieving-access-token-from-onedrive-using-google-apps-script/</link>
      <pubDate>Fri, 04 Aug 2017 14:21:56 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/08/04/retrieving-access-token-from-onedrive-using-google-apps-script/</guid>
      <description>Gist
Overview This GAS sample is for retrieving access token to use OneDrive APIs using Google Apps Script.
In this script, the authorization code is automatically retrieved.
Demo Usage In order to use this, both accounts of Google and OneDrive (MSN) are required.
Google side  Copy and paste the sample script to your script editor. You can use the standalone script for this. Deploy Web Apps.  On the Script Editor  File -&amp;gt; Manage Versions -&amp;gt; Save New Version Publish -&amp;gt; Deploy as Web App -&amp;gt; At Execute the app as, select &amp;ldquo;your account&amp;rdquo; -&amp;gt; At Who has access to the app, select &amp;ldquo;Only myself&amp;rdquo; -&amp;gt; Click &amp;ldquo;Deploy&amp;rdquo; -&amp;gt; Copy URL of &amp;ldquo;latest code&amp;rdquo; (This is important!</description>
    </item>
    
    <item>
      <title>Converting a1Notation to GridRange for Google Sheets API</title>
      <link>https://tanaikech.github.io/2017/07/31/converting-a1notation-to-gridrange-for-google-sheets-api/</link>
      <pubDate>Mon, 31 Jul 2017 14:38:28 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/07/31/converting-a1notation-to-gridrange-for-google-sheets-api/</guid>
      <description>Gists
When it uses Google Sheets API v4, GridRange is used for it as the range property. These sample scripts are for converting from a1Notation to GridRange. You can chose from following 2 scripts. Both scripts can retrieve the same result.
Script 1 : This is from me.
function a1notation2gridrange1(sheetid, a1notation) { var data = a1notation.match(/(^.+)!(.+):(.+$)/); var ss = SpreadsheetApp.openById(sheetid).getSheetByName(data[1]); var range = ss.getRange(data[2] + &amp;quot;:&amp;quot; + data[3]); var gridRange = { sheetId: ss.</description>
    </item>
    
    <item>
      <title>Multipart-POST Request Using Google Apps Script</title>
      <link>https://tanaikech.github.io/2017/07/21/multipart-post-request-using-google-apps-script/</link>
      <pubDate>Fri, 21 Jul 2017 10:34:38 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/07/21/multipart-post-request-using-google-apps-script/</guid>
      <description>Gist
These sample scripts are for requesting multipart post using Google Apps Script.
In most cases, the multipart request is used for uploading files. So I prepared 2 sample situations as follows. For each situation, the request parameters are different.
 Upload a file from Google Drive to Slack. Convert an excel file to Spreadsheet on Google Drive using Drive API v3.  Multipart post is required for these situations.</description>
    </item>
    
    <item>
      <title>Retrieving Images on Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/07/21/retrieving-images-on-spreadsheet/</link>
      <pubDate>Fri, 21 Jul 2017 08:27:56 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/07/21/retrieving-images-on-spreadsheet/</guid>
      <description>Gist
This is a sample script for retrieving images on Spreadsheet.
Unfortunately, there are no methods for retrieving directly images on spreadsheet using GAS. So I use the method which retrieves URL from =image(URL) and retrieves the image from the URL.
In this case, =image(URL) has to be in the cell. Images embedded by insertImage() cannot be retrieved.
At first, please confirm them.
Sample script : var cell = &amp;quot;A1&amp;quot;; // Cell address with the function of &amp;quot;=image()&amp;quot; var filename = &amp;quot;samplename&amp;quot;; // Output filename var image = SpreadsheetApp.</description>
    </item>
    
    <item>
      <title>Retrieving Array Coordinates of Duplicated Elements</title>
      <link>https://tanaikech.github.io/2017/07/19/retrieving-array-coordinates-of-duplicated-elements/</link>
      <pubDate>Wed, 19 Jul 2017 10:38:26 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/07/19/retrieving-array-coordinates-of-duplicated-elements/</guid>
      <description> This sample is for retrieving array coordinates of duplicated elements.
Script : var inputdata = [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;f&amp;quot;, &amp;quot;g&amp;quot;]; var dic = {}; var result = []; inputdata.forEach(function(e, i){ if (dic[e]) { result[i] = &#39;Duplicated&#39;; } else { result[i] = null; } dic[e] = &amp;quot;temp&amp;quot;; }); Logger.log(JSON.stringify(result)) Logger.log([i for (i in result) if(result[i]==&#39;Duplicated&#39;)])  Result : [null,null,&amp;quot;Duplicated&amp;quot;,null,null,&amp;quot;Duplicated&amp;quot;,null,&amp;quot;Duplicated&amp;quot;,null,null] [2, 5, 7]  </description>
    </item>
    
    <item>
      <title>Get File List Under a Folder on Google Drive</title>
      <link>https://tanaikech.github.io/2017/07/19/get-file-list-under-a-folder-on-google-drive/</link>
      <pubDate>Wed, 19 Jul 2017 08:51:39 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/07/19/get-file-list-under-a-folder-on-google-drive/</guid>
      <description>This is a sample of Google Apps Script. This script is for retrieving all files and folders under a folder on Google Drive. All files and folders in the specific folder can be retrieved.
If you want to retrieve file list with all files and folders on Google Drive, please use DriveApp.getRootFolder().getId() as folderId.
When there are a lot of files in the folder, it may be over the limitation time to execute script.</description>
    </item>
    
    <item>
      <title>Pseudo Browser with Google Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/07/05/pseudo-browser-with-google-spreadsheet/</link>
      <pubDate>Wed, 05 Jul 2017 16:45:01 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/07/05/pseudo-browser-with-google-spreadsheet/</guid>
      <description>Gist
Overview This is a sample script for creating the pseudo browser using Google Spreadsheet.
Description I unexpectedly noticed this. I think that this is for off-line browsing using HTML data. So there are many limitations. At first, please confirm them.
 Limitations  It cannot move from opened site to other outside site. If the outer site is opened as a new wind, your own browser is opened and move there.</description>
    </item>
    
    <item>
      <title>Downloading Files From Google Drive Under No Authorization Using Browser</title>
      <link>https://tanaikech.github.io/2017/07/04/downloading-files-from-google-drive-under-no-authorization-using-browser/</link>
      <pubDate>Tue, 04 Jul 2017 15:57:20 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/07/04/downloading-files-from-google-drive-under-no-authorization-using-browser/</guid>
      <description>Gist
This is a sample script for downloading files from Google Drive under no authorization using browser. By using this sample, you can make other users download files from your Google Drive. Even if the other users are not Google users, they can download the files.

Demo This is a demonstration for downloading files from Google Drive under no authorization using browser. From the top document, You can see that an user who is not owner of Google Drive is downloading files.</description>
    </item>
    
    <item>
      <title>Updated: GAS Library - ImgApp</title>
      <link>https://tanaikech.github.io/2017/06/29/updated-gas-library---imgapp/</link>
      <pubDate>Thu, 29 Jun 2017 16:09:57 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/29/updated-gas-library---imgapp/</guid>
      <description>ImgApp was updated to v1.1.0. New method was added.
2. doResize() Overview This method is for resizing images.
Description Unfortunately, there are no methods to resize images at Google Apps Script. As a workaround, there is a method that it imports the image in Google Document and resizes the image using setWidth() and setHeight(). But in this method, the resized blob cannot be retrieved. So although I had thought of other workaround, I had not been able to find it.</description>
    </item>
    
    <item>
      <title>GAS Library - ImgApp - getSize()</title>
      <link>https://tanaikech.github.io/2017/06/27/gas-library---imgapp---getsize/</link>
      <pubDate>Tue, 27 Jun 2017 16:21:52 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/27/gas-library---imgapp---getsize/</guid>
      <description>1. getSize() Overview This method is for retrieving the width and height of image as the unit of pixel.
Description Unfortunately, there are no methods to directly retrieve the image size at Google Apps Script. As a workaround, there is a method that it imports the image in Google Document and retrieves the size using getWidth() and getHeight(). But in this method, it uses much time and resources on Google.</description>
    </item>
    
    <item>
      <title>Retrieving Access Token for Google APIs</title>
      <link>https://tanaikech.github.io/2017/06/21/retrieving-access-token-for-google-apis/</link>
      <pubDate>Wed, 21 Jun 2017 10:24:50 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/21/retrieving-access-token-for-google-apis/</guid>
      <description>This sample is for retrieving access token for Google APIs. I created this for studying newStateToken().
Script : In order to use this script, please retrieve client ID and client Secret, and deploy Web Apps, and run doGet() from Web Apps.
var clientId = &amp;quot;#####&amp;quot;, clientSecret = &amp;quot;#####&amp;quot;, scopes = &amp;quot;#####&amp;quot;, redirectUri = &amp;quot;#####&amp;quot;, baseurl = &amp;quot;https://accounts.google.com/o/oauth2/&amp;quot;; function doGet() { return HtmlService.createHtmlOutput( &amp;quot;&amp;lt;input type=\&amp;quot;button\&amp;quot; value=\&amp;quot;Auth\&amp;quot; onclick=\&amp;quot;window.open(&#39;&amp;quot; + baseurl + &amp;quot;auth?</description>
    </item>
    
    <item>
      <title>Updated: GAS Library - SOUWA</title>
      <link>https://tanaikech.github.io/2017/06/19/updated-gas-library---souwa/</link>
      <pubDate>Mon, 19 Jun 2017 07:06:45 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/19/updated-gas-library---souwa/</guid>
      <description>SOUWA means summing in Japanese. SOUWA can sum string elements in an array at the high speed. The speed of SOUWA with the pyramid algorithm is about 380 times faster than that of the standard method. New algorithm for summing array elements was developed for SOUWA. You can see the detailed report of this library at here. If you are interested in this, I&amp;rsquo;m glad.
It was updated to v1.0.2. Please check it out.</description>
    </item>
    
    <item>
      <title>Search Route and Embedding Map using Custom Function on Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/06/14/search-route-and-embedding-map-using-custom-function-on-spreadsheet/</link>
      <pubDate>Wed, 14 Jun 2017 17:35:47 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/14/search-route-and-embedding-map-using-custom-function-on-spreadsheet/</guid>
      <description>This sample script is for searching route between place A and B and embedding a map by custom function on Spreadsheet.
I think that this method is one of various ideas.
Problem When the map is embedded to a cell on spreadsheet as an image, the function =IMAGE() is suitable for this situation. However, Class Maps, setFormula() for importing =IMAGE() and DriveApp.createFile() for creating images from maps also cannot be used for custom functions.</description>
    </item>
    
    <item>
      <title>Giving and Retrieving Parameters for Chart at GAS</title>
      <link>https://tanaikech.github.io/2017/06/12/giving-and-retrieving-parameters-for-chart-at-gas/</link>
      <pubDate>Mon, 12 Jun 2017 11:11:06 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/12/giving-and-retrieving-parameters-for-chart-at-gas/</guid>
      <description>This sample script is for retrieving parameters from a chart. The chart created by both Google Apps Script and manually operation can be used.
Creates Chart When a chart is created, it supposes following parameters.
var parameters = { &amp;quot;title&amp;quot;: &amp;quot;x axis&amp;quot;, &amp;quot;fontName&amp;quot;: &amp;quot;Arial&amp;quot;, &amp;quot;minValue&amp;quot;: 0, &amp;quot;maxValue&amp;quot;: 100, &amp;quot;titleTextStyle&amp;quot;: { &amp;quot;color&amp;quot;: &amp;quot;#c0c0c0&amp;quot;, &amp;quot;fontSize&amp;quot;: 10, &amp;quot;fontName&amp;quot;: &amp;quot;Roboto&amp;quot;, &amp;quot;italic&amp;quot;: true, &amp;quot;bold&amp;quot;: false } }; .setOption(&#39;hAxis&#39;, parameters)  Retrieve Parameters From Chart For the chart created by above parameters, in order to retrieve the parameters, it uses following script.</description>
    </item>
    
    <item>
      <title>Benchmark: Effect of Comprehension for GAS</title>
      <link>https://tanaikech.github.io/2017/06/07/benchmark-effect-of-comprehension-for-gas/</link>
      <pubDate>Wed, 07 Jun 2017 09:21:54 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/07/benchmark-effect-of-comprehension-for-gas/</guid>
      <description>Description There are a limit executing time for Google Apps Script (GAS). It&amp;rsquo;s 6 minutes. So users have to pay attention to the process cost of the script. GAS can use JavaScript 1.7. This means to be able to be used comprehension for GAS.
In this report, the process cost for the comprehension has been investigated. The normal for loop was used as the competitor. As a result, it was found that the comprehension can be used one of methods for reducing the process cost.</description>
    </item>
    
    <item>
      <title>Embedding Animation GIF in A Cell on Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/06/06/embedding-animation-gif-in-a-cell-on-spreadsheet/</link>
      <pubDate>Tue, 06 Jun 2017 16:47:41 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/06/embedding-animation-gif-in-a-cell-on-spreadsheet/</guid>
      <description>This sample script is for embedding animation GIF in a cell using custom function on Spreadsheet.
I think that this method is one of various ideas.
Problem There are some limitations.
 Images of jpeg and png can be embedded in a cell using =IMAGE(). But when animation GIF is embedded using it, GIF is not played. insertImage() can insert the animation GIF to sheet. But it is not imported to one cell.</description>
    </item>
    
    <item>
      <title>OCR using Custom Function on Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/06/06/ocr-using-custom-function-on-spreadsheet/</link>
      <pubDate>Tue, 06 Jun 2017 07:53:57 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/06/ocr-using-custom-function-on-spreadsheet/</guid>
      <description>This sample script performs OCR and imports resultant text to a cell using custom function on Spreadsheet.
Drive API has a function to do OCR. It was used for this sample.
I think that this method is one of various ideas.
Problem When OCR is performed and imported the result to a cell on spreadsheet, there are some limitations. DriveApp, UrlFetchApp, setFormula() cannot be used for custom functions.
Solution In order to avoid these limitations, I used Web Apps.</description>
    </item>
    
    <item>
      <title>Retirving All files in Folder with Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/06/04/retirving-all-files-in-folder-with-spreadsheet/</link>
      <pubDate>Sun, 04 Jun 2017 18:15:37 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/04/retirving-all-files-in-folder-with-spreadsheet/</guid>
      <description>This sample retrieves all files in a folder with spreadsheet. When there are some folders in the folder with spreadsheet, this script can retrieve all files in all folders. This script has to be a container-bound script for spreadsheet.
Script : function getFileList(){ var folderlist = (function(folder, folderSt, results){ var ar = []; var folders = folder.getFolders(); while(folders.hasNext()) ar.push(folders.next()); folderSt += folder.getId() + &amp;quot;#_aabbccddee_#&amp;quot;; var array_folderSt = folderSt.split(&amp;quot;#_aabbccddee_#&amp;quot;); array_folderSt.pop() results.</description>
    </item>
    
    <item>
      <title>Embedding a Map to a Cell using Custom Function on Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/06/04/embedding-a-map-to-a-cell-using-custom-function-on-spreadsheet/</link>
      <pubDate>Sun, 04 Jun 2017 12:02:28 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/04/embedding-a-map-to-a-cell-using-custom-function-on-spreadsheet/</guid>
      <description>This sample script embeds a map to a cell using custom function on Spreadsheet.
I think that this method is one of various ideas.
Problem When the map is embeded to a cell on spreadsheet as an image, the function =IMAGE() is suitable for this situation. However, setFormula() for importing =IMAGE() and DriveApp.createFile() for creating images from maps also cannot be used for custom functions.
Solution In order to avoid these limitations, I used Web Apps.</description>
    </item>
    
    <item>
      <title>Embedding a Chart to a Cell using Custom Function on Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/05/26/embedding-a-chart-to-a-cell-using-custom-function-on-spreadsheet/</link>
      <pubDate>Fri, 26 May 2017 11:59:06 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/26/embedding-a-chart-to-a-cell-using-custom-function-on-spreadsheet/</guid>
      <description>This sample script embeds a chart to a cell using custom function on Spreadsheet.
I think that this method is one of various ideas.
Problem When you want to create a chart and embed it to a cell using custom functions, you notice that insertChart() cannot be used. There are some limitations for using custom functions. But insertChart() creates floating charts. So in order to embed a chart to a cell, the function =IMAGE() is suitable for this situation.</description>
    </item>
    
    <item>
      <title>Retrieving HTML File ID from Microsoft Docx File on Google Drive</title>
      <link>https://tanaikech.github.io/2017/05/24/retrieving-html-file-id-from-microsoft-docx-file-on-google-drive/</link>
      <pubDate>Wed, 24 May 2017 09:08:58 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/24/retrieving-html-file-id-from-microsoft-docx-file-on-google-drive/</guid>
      <description>This sample script converts from Microsoft Docx File on Google Drive to Google Spreadsheet, and converts to HTML file.
Drive APIs v2 and v3 are used for this. Please set as follows.
 Drive API v2 Drive API v3  &amp;ldquo;Drive API v2&amp;rdquo; can be used at Google Apps Script by enabling Drive API of Advanced Google services and of Google API Console.
How to use it is as follows.</description>
    </item>
    
    <item>
      <title>Changing Line to Bars for Combo Chart using GAS</title>
      <link>https://tanaikech.github.io/2017/05/16/changing-line-to-bars-for-combo-chart-using-gas/</link>
      <pubDate>Tue, 16 May 2017 11:42:56 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/16/changing-line-to-bars-for-combo-chart-using-gas/</guid>
      <description>Sample data This is a sample data for this sample script. The column B was created by the normal distribution formula, and the column C was created by multiplying random number for column B.
A, B, C 1.0, 0.0001, 0.0000 1.5, 0.0009, 0.0006 2.0, 0.0044, 0.0037 2.5, 0.0175, 0.0133 3.0, 0.0540, 0.0236 3.5, 0.1296, 0.0533 4.0, 0.2420, 0.0073 4.5, 0.3522, 0.2468 5.0, 0.3990, 0.0843 5.5, 0.3522, 0.3352 6.0, 0.2420, 0.</description>
    </item>
    
    <item>
      <title>Sending E-mail When Spreadsheet was Edited from Outside by Sheet API</title>
      <link>https://tanaikech.github.io/2017/05/14/sending-e-mail-when-spreadsheet-was-edited-from-outside-by-sheet-api/</link>
      <pubDate>Sun, 14 May 2017 17:43:52 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/14/sending-e-mail-when-spreadsheet-was-edited-from-outside-by-sheet-api/</guid>
      <description>This sample script sends an e-mail, when spreadsheet was edited from outside by Sheet API v4. When you use this sample, please create a container bound script with spreadsheet which is edited by Sheet API. And please input your e-mail and run firstly a method of createTrigger(). By this, a trigger is installed as onChange(). After this, edit spreadsheet from outside by Sheet API v4.
When when spreadsheet was edited from outside by Sheet API v4, I used sendEmail() as a sample, because script editor is closed.</description>
    </item>
    
    <item>
      <title>Changing Slack Status using Google Apps Script</title>
      <link>https://tanaikech.github.io/2017/05/09/changing-slack-status-using-google-apps-script/</link>
      <pubDate>Tue, 09 May 2017 10:58:37 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/09/changing-slack-status-using-google-apps-script/</guid>
      <description>This script changes slack status using GAS. If you want to change it on time you decided, it can be achieved by installing this method as a trigger.
In order to use this, the required scope is users.profile:write.
function setSlackStatus(token, user, status_text, status_emoji) { return UrlFetchApp.fetch( &#39;https://slack.com/api/users.profile.set&#39;, { method: &#39;post&#39;, payload: { token: token, user: user, profile: JSON.stringify({status_text: status_text, status_emoji: status_emoji}) }, muteHttpExceptions: true } ).getContentText(); } function main() { var res = setSlackStatus( &#39;### Your access token ###&#39;, &#39;### User ID ###&#39;, &#39;sample&#39;, &#39;:coffee:&#39; ); Logger.</description>
    </item>
    
    <item>
      <title>Retrieving User Information with Shared Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/04/27/retrieving-user-information-with-shared-spreadsheet/</link>
      <pubDate>Thu, 27 Apr 2017 14:34:22 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/04/27/retrieving-user-information-with-shared-spreadsheet/</guid>
      <description>This sample script retrieves the user information which is editing the shared spreadsheet.
It was found as follows.
 User information retrieving by Class Session is the owner and users which installed triggers by themselves. When each user installs a trigger, user information retrieving by Class Session losts the accuracy. So user information has to be retrieved using a temporally installed trigger. Using onOpen(), it cannot directly install triggers and authorize.</description>
    </item>
    
    <item>
      <title>Overwriting Spreadsheet to Existing Excel File</title>
      <link>https://tanaikech.github.io/2017/04/21/overwriting-spreadsheet-to-existing-excel-file/</link>
      <pubDate>Fri, 21 Apr 2017 13:13:00 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/04/21/overwriting-spreadsheet-to-existing-excel-file/</guid>
      <description>This sample script converts a spreadsheet to excel file, and overwrites the excel file to the existing excel file. When you use this script, at first, please confirm whether Drive API is enabled at Google API console. Because the existing excel file is overwritten, the file name and file ID are not changed.
function overWrite(src_spreadsheetId, dst_excelfileId) { var accesstoken = ScriptApp.getOAuthToken(); return UrlFetchApp.fetch( &amp;quot;https://www.googleapis.com/upload/drive/v3/files/&amp;quot; + dst_excelfileId + &amp;quot;?uploadType=multipart&amp;quot;, { method: &amp;quot;PATCH&amp;quot;, headers: {Authorization: &amp;quot;Bearer &amp;quot; + accesstoken}, contentType: &amp;quot;application/vnd.</description>
    </item>
    
    <item>
      <title>Converting Spreadsheet to PDF</title>
      <link>https://tanaikech.github.io/2017/04/20/converting-spreadsheet-to-pdf/</link>
      <pubDate>Thu, 20 Apr 2017 07:56:36 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/04/20/converting-spreadsheet-to-pdf/</guid>
      <description>Converting Spreadsheet to PDF
This sample script converts from a spreadsheet to a PDF file which has all sheets in the spreadsheet. When you use this, please enable Drive API at Google API console.
var spreadsheetId = &amp;quot;#####&amp;quot;; var folderId = &amp;quot;#####&amp;quot;; var outputFilename = &amp;quot;#####&amp;quot;; DriveApp.getFolderById(folderId) .createFile(UrlFetchApp.fetch( &amp;quot;https://www.googleapis.com/drive/v3/files/&amp;quot; + spreadsheetId + &amp;quot;/export?mimeType=application/pdf&amp;quot;, { method: &amp;quot;GET&amp;quot;, headers: {Authorization: &amp;quot;Bearer &amp;quot; + ScriptApp.getOAuthToken()}, muteHttpExceptions: true }) .getBlob()) .setName(outputFilename);  </description>
    </item>
    
    <item>
      <title>GAS Library - CreateImg</title>
      <link>https://tanaikech.github.io/2017/04/17/gas-library---createimg/</link>
      <pubDate>Mon, 17 Apr 2017 15:29:15 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/04/17/gas-library---createimg/</guid>
      <description>Recently, I had been looking for creating an image from coordinate data. Unfortunately I have never found them. So I made this. This Google Apps Script (GAS) library creates an image file from coordinate data.
You can see the detail information at https://github.com/tanaikech/CreateImg.
There is a part where I would like to improve in this library. That&amp;rsquo;s convByteSlice(). I think that there is the method to be faster about the part.</description>
    </item>
    
    <item>
      <title>Comprehension of GAS</title>
      <link>https://tanaikech.github.io/2017/04/17/comprehension-of-gas/</link>
      <pubDate>Mon, 17 Apr 2017 08:16:36 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/04/17/comprehension-of-gas/</guid>
      <description>Here, I would like to introduce a comprehension of GAS.
Input :
var data = [[[0], [1], [2], [3]], [[4], [5], [6], [7]]];  Output :
[[0.0, 2.0], [0.0, 2.0]]  Pattern 1 var a = []; for (var i=0; i&amp;lt;data.length; i++) { var temp = []; for (var j=0; j&amp;lt;data[i].length; j++) { if (data[i][j][0] % 2 == 0) temp.push(j); } a.push(temp); } Logger.log(a)  Pattern 2 var b = []; data.</description>
    </item>
    
    <item>
      <title>Creating Spreadsheet from Excel file</title>
      <link>https://tanaikech.github.io/2017/04/15/creating-spreadsheet-from-excel-file/</link>
      <pubDate>Sat, 15 Apr 2017 10:39:05 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/04/15/creating-spreadsheet-from-excel-file/</guid>
      <description>These scripts can be executed on Script Editor. But, in order to use these, you have to enable Drive API of Advanced Google services and of Google API Console. &amp;ldquo;Drive API v2&amp;rdquo; can be used at Google Apps Script by enabling Drive API of Advanced Google services and of Google API Console.
How to use it is as follows.
 In the script editor, select Resources &amp;gt; Advanced Google services</description>
    </item>
    
    <item>
      <title>Creating Downloaded Excel file as Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/04/14/creating-downloaded-excel-file-as-spreadsheet/</link>
      <pubDate>Fri, 14 Apr 2017 18:03:32 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/04/14/creating-downloaded-excel-file-as-spreadsheet/</guid>
      <description>This is a sample GAS script to create an Excel file, which was downloaded from web, as Spreadsheet. By using Drive API, it can be achieved without access token.
Script :
function downloadFile(fileURL, folder) { var filename = fileURL.match(&amp;quot;.+/(.+?)([\?#;].*)?$&amp;quot;)[1]; var response = UrlFetchApp.fetch(fileURL); var rc = response.getResponseCode(); var blob = response.getBlob(); var resource = { &amp;quot;mimeType&amp;quot;: &amp;quot;application/vnd.google-apps.spreadsheet&amp;quot;, &amp;quot;parents&amp;quot;: [{id: folder}], &amp;quot;title&amp;quot;: filename }; var res = Drive.Files.insert(resource, blob); var fileInfo = [rc, res.</description>
    </item>
    
    <item>
      <title>How to use &#34;fields&#34; of Drive APIs</title>
      <link>https://tanaikech.github.io/2017/03/30/how-to-use-fields-of-drive-apis/</link>
      <pubDate>Thu, 30 Mar 2017 08:53:21 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/03/30/how-to-use-fields-of-drive-apis/</guid>
      <description>There are a lot of APIs on Google. When we use Google Drive APIs, they usually have &amp;ldquo;fields&amp;rdquo; as a resource. The parameter &amp;ldquo;fields&amp;rdquo; gives various information which is selected to us. This is one of important parameters. And this can be used at Google Apps Script (GAS) although that version is v2. About how to use it, there are some documents. But it is difficult to find how to use it at GAS.</description>
    </item>
    
    <item>
      <title>Retrieving File ID from File Name using GAS</title>
      <link>https://tanaikech.github.io/2017/03/23/retrieving-file-id-from-file-name-using-gas/</link>
      <pubDate>Thu, 23 Mar 2017 14:24:29 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/03/23/retrieving-file-id-from-file-name-using-gas/</guid>
      <description>This is a sample script of GAS for converting file name to file id on Google Drive. Drive API is used for this. So please enable Drive API at Advanced Drive Services and Google API Console.
function nameToId(filename){ return [i.id for each (i in Drive.Files.list({q: &amp;quot;title=&#39;&amp;quot; + filename + &amp;quot;&#39; and trashed=false&amp;quot;}).items)]; }  </description>
    </item>
    
    <item>
      <title>Download Files Without Authorization From Google Drive</title>
      <link>https://tanaikech.github.io/2017/03/20/download-files-without-authorization-from-google-drive/</link>
      <pubDate>Mon, 20 Mar 2017 14:30:15 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/03/20/download-files-without-authorization-from-google-drive/</guid>
      <description>Overview In this article, files can be downloaded without authorization.
Description When we download files from Google Drive, it usually has to use Drive API. In order to use Drive API, access token is required. If you want to make your friends download files from your Google Drive, the authorization process is to take time. Also Web Link for each files can be used. But it has to set for each files.</description>
    </item>
    
    <item>
      <title>Create Folder Tree on Google Drive</title>
      <link>https://tanaikech.github.io/2017/03/13/create-folder-tree-on-google-drive/</link>
      <pubDate>Mon, 13 Mar 2017 13:27:57 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/03/13/create-folder-tree-on-google-drive/</guid>
      <description>This is a sample script for creating a folder tree including all folders in Google Drive. For each element, parent folder and sub folder are retrieved.
Script :
var results = (function(folder, folderSt, results){ var ar = []; var folders = folder.getFolders(); while(folders.hasNext()) ar.push(folders.next()); folderSt += folder.getName() + &amp;quot;(&amp;quot; + folder.getId() + &amp;quot;)#_aabbccddee_#&amp;quot;; var array_folderSt = folderSt.split(&amp;quot;#_aabbccddee_#&amp;quot;); array_folderSt.pop() results.push(array_folderSt); ar.length == 0 &amp;amp;&amp;amp; (folderSt = &amp;quot;&amp;quot;); for (var i in ar) arguments.</description>
    </item>
    
    <item>
      <title>Export CSV File from Spreadsheet and Make Download Button</title>
      <link>https://tanaikech.github.io/2017/02/20/export-csv-file-from-spreadsheet-and-make-download-button/</link>
      <pubDate>Mon, 20 Feb 2017 10:00:28 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/20/export-csv-file-from-spreadsheet-and-make-download-button/</guid>
      <description>This is a script to export a CSV file from spreadsheet and make an user download it. When the users download it, they can download by push a button made by this script.
In order to use this script, put both HTML and script in a GAS project.
html :
This file name is &amp;ldquo;download.html&amp;rdquo;.
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;body&amp;gt; Download CSV? &amp;lt;form&amp;gt; &amp;lt;input type=&amp;quot;button&amp;quot; value=&amp;quot;ok&amp;quot; onclick=&amp;quot;google.script.run .withSuccessHandler(executeDownload) .saveAsCSV();&amp;quot; /&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;script&amp;gt; function executeDownload(url) { window.</description>
    </item>
    
    <item>
      <title>Send E-mail with xlsx File Converted from Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/02/20/send-e-mail-with-xlsx-file-converted-from-spreadsheet/</link>
      <pubDate>Mon, 20 Feb 2017 09:56:12 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/20/send-e-mail-with-xlsx-file-converted-from-spreadsheet/</guid>
      <description>This is a script to send e-mail with a xlsx file converted from spreadsheet as an attachment file. Access token is necessary to use this script.
function excelSender() { var accesstoken = &amp;quot;[your accesstoken]&amp;quot;; var sheetID = &amp;quot;[sheet id]&amp;quot;; var xlsxName = &amp;quot;[output xlsx file name]&amp;quot; var params = { &amp;quot;headers&amp;quot; : {Authorization: &amp;quot;Bearer &amp;quot; + accesstoken}, &amp;quot;muteHttpExceptions&amp;quot; : true }; var dUrl = &amp;quot;https://www.googleapis.com/drive/v3/files/&amp;quot; + sheetID + &amp;quot;/export?mimeType=application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&amp;quot; var xlsxlFile = UrlFetchApp.</description>
    </item>
    
    <item>
      <title>Send E-mail with Excel file converted from Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/02/16/send-e-mail-with-excel-file-converted-from-spreadsheet/</link>
      <pubDate>Thu, 16 Feb 2017 11:53:50 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/16/send-e-mail-with-excel-file-converted-from-spreadsheet/</guid>
      <description>This sample script sends an e-mail with an Excel file exported from Spreadsheet as an attachment file.
function excelSender() { var sheetID = [Sheet ID]; var xlsxName = [Excel file name]; var params = { &amp;quot;headers&amp;quot; : {Authorization: &amp;quot;Bearer [Retrieved AccessToken]&amp;quot;}, &amp;quot;muteHttpExceptions&amp;quot; : true }; var dUrl = &amp;quot;https://www.googleapis.com/drive/v3/files/&amp;quot; + sheetID + &amp;quot;/export?mimeType=application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&amp;quot; var xlsxlFile = UrlFetchApp.fetch(dUrl, params).getBlob().setName(xlsxName); MailApp.sendEmail({ to: [Mail address], subject: &amp;quot;sample subject&amp;quot;, body: &amp;quot;sample body&amp;quot;, attachments: [xlsxlFile] }); }  Is ScriptApp.</description>
    </item>
    
    <item>
      <title>Download a CSV File from Spreadsheet Using Google HTML Service</title>
      <link>https://tanaikech.github.io/2017/02/16/download-a-csv-file-from-spreadsheet-using-google-html-service/</link>
      <pubDate>Thu, 16 Feb 2017 10:31:37 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/16/download-a-csv-file-from-spreadsheet-using-google-html-service/</guid>
      <description>Here, I introduce how to download a CSV file from spreadsheet using Google HTML Service.
 Using &amp;ldquo;onOpen()&amp;rdquo;, it addes menu for launching a dialog.   After launching the dialog, &amp;ldquo;getFileUrl()&amp;rdquo; is launched by pushing a button. &amp;ldquo;getFileUrl()&amp;rdquo; exports a CSV file and outputs download URL.
 The CSV file is downloaded by &amp;ldquo;executeDownload()&amp;rdquo;.
  Please put both HTML and GAS to a GAS project.
HTML : download.</description>
    </item>
    
    <item>
      <title>Making charts at spreadsheet</title>
      <link>https://tanaikech.github.io/2017/02/13/making-charts-at-spreadsheet/</link>
      <pubDate>Mon, 13 Feb 2017 08:57:58 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/13/making-charts-at-spreadsheet/</guid>
      <description>var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet(); var chart = sheet.newChart() .setChartType(Charts.ChartType.LINE) .asLineChart() .addRange(sheet.getRange(&#39;a1:a21&#39;)) .addRange(sheet.getRange(&#39;b1:b21&#39;)) .addRange(sheet.getRange(&#39;c1:c21&#39;)) .setColors([&amp;quot;green&amp;quot;, &amp;quot;red&amp;quot;]) .setBackgroundColor(&amp;quot;black&amp;quot;) .setPosition(5, 5, 0, 0) .setPointStyle(Charts.PointStyle.MEDIUM) .setOption(&#39;useFirstColumnAsDomain&#39;, true) .setOption(&#39;height&#39;, 280) .setOption(&#39;width&#39;, 480) .setOption(&#39;title&#39;, &#39;Sample chart&#39;) .setOption(&#39;hAxis&#39;, { title: &#39;x axis&#39;, minValue: 0, maxValue: 20, titleTextStyle: { color: &#39;#c0c0c0&#39;, fontSize: 20, italic: false, bold: false }, textStyle: { color: &#39;#c0c0c0&#39;, fontSize: 12, bold: false, italic: false }, baselineColor: &#39;#c0c0c0&#39;, gridlines: { color: &#39;#c0c0c0&#39;, count: 4 } }) .</description>
    </item>
    
    <item>
      <title>Event of onEdit() for Google spreadsheet</title>
      <link>https://tanaikech.github.io/2017/02/07/event-of-onedit-for-google-spreadsheet/</link>
      <pubDate>Tue, 07 Feb 2017 11:03:56 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/07/event-of-onedit-for-google-spreadsheet/</guid>
      <description>About Event Objects For example, it thinks the situation of input text of &amp;lsquo;test&amp;rsquo; to &amp;lsquo;A1&amp;rsquo; on a sheet.
When you use only &amp;lsquo;onEdit(e)&amp;rsquo; without an installing trigger, &amp;lsquo;e&amp;rsquo; has following parameters.
{authMode=LIMITED, range=Range, source=Spreadsheet, user=, value=test}  In this case, the event cannot send an e-mail because of &amp;lsquo;authMode=LIMITED&amp;rsquo;.
When you use &amp;ldquo;onEdit(e)&amp;rdquo; with an installing trigger of &amp;ldquo;Edit&amp;rdquo;, &amp;lsquo;e&amp;rsquo; has following parameters.
{authMode=FULL, range=Range, source=Spreadsheet, value=test, triggerUid=#####}  In this case, the event can send an e-mail because of &amp;lsquo;authMode=FULL&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>File upload using doPost on Google Web Apps</title>
      <link>https://tanaikech.github.io/2017/02/05/file-upload-using-dopost-on-google-web-apps/</link>
      <pubDate>Sun, 05 Feb 2017 11:40:08 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/05/file-upload-using-dopost-on-google-web-apps/</guid>
      <description>File upload using HTML form in GAS project Rule
 Following scripts have to be made into a project of Google Apps Script.
 Deploy the GAS project as a web application. Ref
 After updated the script, it has to be updated as a new version.
  Form.html :
&amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;form&amp;gt; &amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;imageFile&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;button&amp;quot; value=&amp;quot;ok&amp;quot; onclick=&amp;quot;google.script.run.upload(this.parentNode)&amp;quot;&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;  GAS :
function doGet() { return HtmlService.</description>
    </item>
    
    <item>
      <title>Retrieving cells without blank using GAS</title>
      <link>https://tanaikech.github.io/2017/02/03/retrieving-cells-without-blank-using-gas/</link>
      <pubDate>Fri, 03 Feb 2017 10:14:25 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/03/retrieving-cells-without-blank-using-gas/</guid>
      <description>This is a sample script for retrieving cells without blank cells. Figure 1 shows the sample spreadsheet. In this sheet, the row 14 has one space.

           Fig. 1: Sample spreadsheet.    
Data is retrieved as follows.
 var data = SpreadsheetApp .getActiveSpreadsheet() .getActiveSheet() .getRange(&#39;a1:a30&#39;) .getValues();  1. Retrieving cells with spaces and no blank cells.</description>
    </item>
    
    <item>
      <title>GAS Library - SOUWA_GAS - Effects on Optimized Codes of Pyramid Method</title>
      <link>https://tanaikech.github.io/2016/10/13/gas-library---souwa_gas---effects-on-optimized-codes-of-pyramid-method/</link>
      <pubDate>Thu, 13 Oct 2016 15:57:20 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2016/10/13/gas-library---souwa_gas---effects-on-optimized-codes-of-pyramid-method/</guid>
      <description>Kanshi TANAIKE 
Abstract I have already reported that the pyramid method is one of very effectively algolithms for summing string elements in an array using Google Apps Script (GAS). This report describes the adaptability of the pyramid method to any languages except for GAS. c++ (g++), Go, Java, Javascript on Node.js, Python and Ruby were chosen as the sample languages. In those languages, there are languages which have the distinctive commands for summing the array elements.</description>
    </item>
    
  </channel>
</rss>