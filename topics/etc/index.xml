<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Etc on tanaike</title>
    <link>https://tanaikech.github.io/topics/etc/</link>
    <description>Recent content in Etc on tanaike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Sun, 05 Feb 2017 11:40:08 +0900</lastBuildDate>
    <atom:link href="https://tanaikech.github.io/topics/etc/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>File upload using doPost on Google Web Apps</title>
      <link>https://tanaikech.github.io/2017/02/05/file-upload-using-dopost-on-google-web-apps</link>
      <pubDate>Sun, 05 Feb 2017 11:40:08 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/05/file-upload-using-dopost-on-google-web-apps</guid>
      <description>

&lt;h1 id=&#34;file-upload-using-html-form-in-gas-project&#34;&gt;File upload using HTML form in GAS project&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Rule&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Following scripts have to be made into a project of Google Apps Script.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Deploy the GAS project as a web application. &lt;a href=&#34;https://developers.google.com/apps-script/guides/web&#34;&gt;Ref&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;After updated the script, it has to be updated as a new version.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Form.html :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;form&amp;gt;
      &amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;imageFile&amp;quot;&amp;gt;
      &amp;lt;input type=&amp;quot;button&amp;quot; value=&amp;quot;ok&amp;quot; onclick=&amp;quot;google.script.run.upload(this.parentNode)&amp;quot;&amp;gt;
    &amp;lt;/form&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;GAS :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function doGet() {
  return HtmlService.createHtmlOutputFromFile(&#39;Form.html&#39;);
}

function upload(e) {
  var destination_id = &#39;#####&#39;; // Folder ID of destination folder

  // Reference : https://developers.google.com/apps-script/reference/base/blob#getAs(String)
  // You can use &#39;application/pdf&#39;, &#39;image/bmp&#39;, &#39;image/gif&#39;, &#39;image/jpeg&#39; and &#39;image/png&#39;.
  var contentType = &#39;image/jpeg&#39;;
  var img = e.imageFile;

  var destination = DriveApp.getFolderById(destination_id);
  var img = img.getAs(contentType);
  destination.createFile(img);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you set &amp;lsquo;image/jpeg&amp;rsquo; as &amp;ldquo;contentType&amp;rdquo; and upload png file, the uploaded image file is converted to jpeg file and saved it to the destination folder.&lt;/p&gt;

&lt;h1 id=&#34;file-upload-from-local-pc&#34;&gt;File upload from local PC&lt;/h1&gt;

&lt;p&gt;In the Web API of Google HTML service, cannot &amp;ldquo;multipart/form-data&amp;rdquo; be used? Although I investigated it and tried various methods of file upload using &amp;ldquo;multipart/form-data&amp;rdquo;, all of them didn&amp;rsquo;t work. So I thought other method which is file upload without &amp;ldquo;multipart/form-data&amp;rdquo;. Of course, if you use Drive API, file upload can be easily done. But I wanted to achieve the file upload using Web API of Google HTML service. I think that this is self-satisfaction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rule&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Following GAS has to be made into a project of Google Apps Script.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Deploy the GAS project as a web application. &lt;a href=&#34;https://developers.google.com/apps-script/guides/web&#34;&gt;Ref&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;After updated the script, it has to be updated as a new version.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;GAS :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This script is very simple sample. It uploads image files of bmp, gif, jpeg, png and svg. When you want to upload other files, please change following script.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function doGet(e) {
  return message(&amp;quot;Error: no parameters&amp;quot;);
}

function doPost(e) {
  if (!e.parameters.filename || !e.parameters.file || !e.parameters.imageformat) {
    return message(&amp;quot;Error: Bad parameters&amp;quot;);
  } else {
    var imgf = e.parameters.imageformat[0].toUpperCase();
    var mime =
        (imgf == &#39;BMP&#39;)  ? MimeType.BMP
      : (imgf == &#39;GIF&#39;)  ? MimeType.GIF
      : (imgf == &#39;JPEG&#39;) ? MimeType.JPEG
      : (imgf == &#39;PNG&#39;)  ? MimeType.PNG
      : (imgf == &#39;SVG&#39;)  ? MimeType.SVG
      : false;
    if (mime) {
      var data = Utilities.base64Decode(e.parameters.file, Utilities.Charset.UTF_8);
      var blob = Utilities.newBlob(data, mime, e.parameters.filename);
      DriveApp.getFolderById(&#39;FOLDER ID&#39;).createFile(blob);
      return message(&amp;quot;completed&amp;quot;);
    } else {
      return message(&amp;quot;Error: Bad image format&amp;quot;);
    }
  }
}

function message(msg) {
  return ContentService.createTextOutput(JSON.stringify({result: msg})).setMimeType(ContentService.MimeType.JSON);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;curl :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -L \
    -F &#39;filename=[file name on Google Drive]&#39; \
    -F &#39;imageformat=[image format (bmp, gif, jpeg, png and svg)]&#39; \
    -F &amp;quot;file=`base64 [upload file]`&amp;quot; \
    &#39;[Current web app URL (https://script.google.com/macros/s/fugahoge/exec)]&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using &amp;ldquo;doPost&amp;rdquo; of &lt;a href=&#34;https://developers.google.com/apps-script/guides/web&#34;&gt;Google Web Apps&lt;/a&gt;, files cannot be uploaded from local PC, while text data which isn&amp;rsquo;t a file can be uploaded. So it converted from image data to base64 data, and upload it. By this, it was found that various files can be uploaded using &amp;ldquo;doPost&amp;rdquo; of Google Web Apps. Although the sample on this submission is &amp;ldquo;curl&amp;rdquo; command, using this method, you can upload files using html form.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Add next row to current row using AWK</title>
      <link>https://tanaikech.github.io/2017/02/05/add-next-row-to-current-row-using-awk</link>
      <pubDate>Sun, 05 Feb 2017 11:03:30 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/05/add-next-row-to-current-row-using-awk</guid>
      <description>&lt;p&gt;&lt;strong&gt;File.txt :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a1
a2
a3
a4
a5
a6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Code :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;awk &#39;{array[NR]=$0} END {for (i in array) {if (i&amp;gt;1) {{print array[i-1]&amp;quot;,&amp;quot;array[i]}}}}&#39; File.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Result :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a1,a2
a2,a3
a3,a4
a4,a5
a5,a6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the all rows are imported to an array, it shows next row to current row under a condition of row &amp;gt; 1.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Retrieving cells without blank using GAS</title>
      <link>https://tanaikech.github.io/2017/02/03/retrieving-cells-without-blank-using-gas</link>
      <pubDate>Fri, 03 Feb 2017 10:14:25 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/03/retrieving-cells-without-blank-using-gas</guid>
      <description>

&lt;p&gt;This is a sample script for retrieving cells without blank cells. Figure 1 shows the sample spreadsheet. In this sheet, &lt;u&gt;the row 14 has one space.&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://tanaikech.github.io/img/fig170203a.png&#34; alt=&#34;&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Fig. 1: Sample spreadsheet.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Data is retrieved as follows.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  var data = SpreadsheetApp
             .getActiveSpreadsheet()
             .getActiveSheet()
             .getRange(&#39;a1:a30&#39;)
             .getValues();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;1-retrieving-cells-with-spaces-and-no-blank-cells&#34;&gt;1. Retrieving cells with spaces and no blank cells.&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;  var Result = [i for each (i in data)if (i)].join(&#39;&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Result : Hello World&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-retrieving-cells-without-both-spaces-and-blank-cells&#34;&gt;2. Retrieving cells without both spaces and blank cells.&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;  var Result = [i for each (i in data)if (isNaN(i))].join(&#39;&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Result : HelloWorld&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>One Liner Code for Netatmo</title>
      <link>https://tanaikech.github.io/2017/01/11/one-liner-code-for-netatmo</link>
      <pubDate>Wed, 11 Jan 2017 15:00:01 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/01/11/one-liner-code-for-netatmo</guid>
      <description>

&lt;p&gt;I made One Liner Code to retrieve data using Netatmo API. There are 2 ways. One is for windows dos. Another is for unix bash. Requirement tools are curl and jq.&lt;/p&gt;

&lt;h3 id=&#34;windows-dos&#34;&gt;windows dos&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; setlocal &amp;amp; curl -s -d &amp;quot;grant_type=password&amp;amp;client_id=&#39;#####&#39;&amp;amp;client_secret=&#39;#####&#39;&amp;amp;username=&#39;#####&#39;&amp;amp;password=&#39;#####&#39;&amp;amp;scope=read_station&amp;quot; &amp;quot;https://api.netatmo.net/oauth2/token&amp;quot; | for /f &amp;quot;usebackq tokens=*&amp;quot; %a in (`jq -r &amp;quot;.access_token&amp;quot;`) do @set a=&amp;quot;%a&amp;quot; | curl -s -d &amp;quot;access_token=%a&amp;amp;device_id=&#39;#####&#39;&amp;quot; &amp;quot;https://api.netatmo.net/api/getstationsdata&amp;quot; &amp;gt; dat.txt &amp;amp; for /f &amp;quot;usebackq tokens=*&amp;quot; %b in (`jq -r &amp;quot;.body.devices[0].dashboard_data.Temperature&amp;quot; dat.txt`) do @set b=&amp;quot;%b&amp;quot; | echo: &amp;amp; set /p nb=Indoor: Temperature %b [degree C],&amp;lt;nul &amp;amp; for /f &amp;quot;usebackq tokens=*&amp;quot; %b in (`jq -r &amp;quot;.body.devices[0].dashboard_data.Humidity&amp;quot; dat.txt`) do @set b=&amp;quot;%b&amp;quot; | set /p nb=Humidity %b [%],&amp;lt;nul &amp;amp; for /f &amp;quot;usebackq tokens=*&amp;quot; %b in (`jq -r &amp;quot;.body.devices[0].dashboard_data.Pressure&amp;quot; dat.txt`) do @set b=&amp;quot;%b&amp;quot; | set /p nb=Pressure %b [hPa]&amp;lt;nul &amp;amp; for /f &amp;quot;usebackq tokens=*&amp;quot; %b in (`jq -r &amp;quot;.body.devices[0].modules[0].dashboard_data.Temperature&amp;quot; dat.txt`) do @set b=&amp;quot;%b&amp;quot; | echo: &amp;amp; set /p nb=Outdoor: Temperature %b [degree C],&amp;lt;nul &amp;amp; for /f &amp;quot;usebackq tokens=*&amp;quot; %b in (`jq -r &amp;quot;.body.devices[0].modules[0].dashboard_data.Humidity&amp;quot; dat.txt`) do @set b=&amp;quot;%b&amp;quot; | set /p nb=Humidity %b [%]&amp;lt;nul &amp;amp; del dat.txt

Indoor: Temperature 12 [degree C],  Humidity 56 [%],  Pressure 1000.2 [hPa]
Outdoor: Temperature 12.3 [degree C],  Humidity 56 [%]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;unix-bash&#34;&gt;unix bash&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ curl -s -d &amp;quot;grant_type=password&amp;amp;client_id=&#39;#####&#39;&amp;amp;client_secret=&#39;#####&#39;&amp;amp;username=&#39;#####&#39;&amp;amp;password=&#39;#####&#39;&amp;amp;scope=read_station&amp;quot; &amp;quot;https://api.netatmo.net/oauth2/token&amp;quot;|curl -s -d &amp;quot;access_token=`jq -r &#39;.access_token&#39;`&amp;amp;device_id=&#39;#####&#39;&amp;quot; &amp;quot;https://api.netatmo.net/api/getstationsdata&amp;quot;|jq -r &#39;&amp;quot;\nIndoor: Temperature &amp;quot;+(.body.devices[0].dashboard_data.Temperature|tostring)+&amp;quot; [degree C], Humidity &amp;quot;+(.body.devices[0].dashboard_data.Humidity|tostring)+&amp;quot; [%], Pressure &amp;quot;+(.body.devices[0].dashboard_data.Pressure|tostring)+&amp;quot; [hPa]\nOutdoor: Temperature &amp;quot;+(.body.devices[0].modules[0].dashboard_data.Temperature|tostring)+&amp;quot; [degree C], Humidity &amp;quot;+(.body.devices[0].modules[0].dashboard_data.Humidity|tostring)+&amp;quot; [%]&amp;quot;&#39;

Indoor: Temperature 12 [degree C], Humidity 56 [%], Pressure 1000.2 [hPa]
Outdoor: Temperature 12.3 [degree C], Humidity 56 [%]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to use these One Liner Codes, you can use following code. Please replace &amp;ldquo;#####&amp;rdquo; to yours.&lt;/p&gt;

&lt;p&gt;Also you can see the detailed information at &lt;a href=&#34;https://github.com/tanaikech/cui4netatmo&#34;&gt;https://github.com/tanaikech/cui4netatmo&lt;/a&gt;. You will see 2 scripts except for one-liner code. These scripts retrieve data from netatmo using refresh token.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Element&#39;s Duplicate Number in Array at Python</title>
      <link>https://tanaikech.github.io/2016/10/21/elements-duplicate-number-in-array-at-python</link>
      <pubDate>Fri, 21 Oct 2016 12:29:25 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2016/10/21/elements-duplicate-number-in-array-at-python</guid>
      <description>&lt;p&gt;Suddenly I had to need this.&lt;/p&gt;

&lt;p&gt;This script can get the duplicate number of each element in array at Python. In this script, the duplicate number of each element is obtained and sorted by the duplicate number. This was expressed by the comprehension.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;data = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;b&#39;, &#39;c&#39;, &#39;b&#39;]
result = sorted({i: data.count(i) for i in set(data)}.items(), key=lambda x: x[1], reverse=True)
print(result)

&amp;gt;&amp;gt;&amp;gt; [(&#39;b&#39;, 4), (&#39;c&#39;, 3), (&#39;d&#39;, 2), (&#39;a&#39;, 1)]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>CoffeeScript</title>
      <link>https://tanaikech.github.io/2016/10/20/coffeescript</link>
      <pubDate>Thu, 20 Oct 2016 14:34:59 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2016/10/20/coffeescript</guid>
      <description>&lt;p&gt;I may be slow a bit, but I could notice much convenience of CoffeeScript just now. I didn&amp;rsquo;t know that scripts of GAS can be made by CoffeeScript up until now. This will have me work more effectively! :D&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>1stpost</title>
      <link>https://tanaikech.github.io/2016/09/18/1stpost</link>
      <pubDate>Sun, 18 Sep 2016 15:02:15 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2016/09/18/1stpost</guid>
      <description>&lt;p&gt;This is a first post. Today this blog was launched. I would like to introduce some of my experimental results. I&amp;rsquo;m Japanese. So I&amp;rsquo;ll use both English and Japanese here.
Thank you.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>