<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Etc on tanaike</title>
    <link>https://tanaikech.github.io/topics/etc/</link>
    <description>Recent content in Etc on tanaike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Thu, 30 Mar 2017 08:53:21 +0900</lastBuildDate>
    <atom:link href="https://tanaikech.github.io/topics/etc/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to use &#34;fields&#34; of Drive APIs</title>
      <link>https://tanaikech.github.io/2017/03/30/how-to-use-fields-of-drive-apis</link>
      <pubDate>Thu, 30 Mar 2017 08:53:21 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/03/30/how-to-use-fields-of-drive-apis</guid>
      <description>

&lt;p&gt;There are a lot of APIs on Google. When we use Google Drive APIs, they usually have &amp;ldquo;fields&amp;rdquo; as a resource. The parameter &amp;ldquo;fields&amp;rdquo; gives various information which is selected to us. This is one of important parameters. And this can be used at Google Apps Script (GAS) although that version is v2. About how to use it, there are &lt;a href=&#34;https://developers.google.com/drive/v2/reference/&#34;&gt;some documents&lt;/a&gt;. But it is difficult to find how to use it at GAS. So I would like to write down here as a memorandum. Most parameters for APIs have to be expressed as JSON. However, the expressions are different for each API. I would like to introduce this using some samples. &lt;strong&gt;This is for GAS.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-drive-files-list&#34;&gt;1. Drive.Files.list&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;var params = {
    q:      &amp;quot;title=&#39;sample&#39; and trashed=false&amp;quot;,
    fields: &amp;quot;items(id, title, mimeType), kind&amp;quot;
};
var res = Drive.Files.list(params)
Logger.log(JSON.stringify(res))

{
  &amp;quot;kind&amp;quot;: &amp;quot;drive#fileList&amp;quot;,
  &amp;quot;items&amp;quot;: [
    {
      &amp;quot;id&amp;quot;: &amp;quot;FILE ID&amp;quot;,
      &amp;quot;mimeType&amp;quot;: &amp;quot;mimeType&amp;quot;,
      &amp;quot;title&amp;quot;: &amp;quot;FILE NAME&amp;quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;q&lt;/code&gt; is used at &amp;ldquo;Search for Files&amp;rdquo;. At this sample, it searches file name of &amp;ldquo;sample&amp;rdquo; outside trash box.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fields&lt;/code&gt; is expressed as above. &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt; and &amp;ldquo;mimeType&amp;rdquo; are file name, file id and mime type of the file, respectively. &lt;code&gt;kind&lt;/code&gt; is &amp;ldquo;This is always drive#fileList.&amp;rdquo; from document.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;References :

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/drive/v2/reference/files/list&#34;&gt;https://developers.google.com/drive/v2/reference/files/list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/drive/v2/web/search-parameters&#34;&gt;https://developers.google.com/drive/v2/web/search-parameters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-drive-files-get&#34;&gt;2. Drive.Files.get&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;var params = {
    fields: &amp;quot;id, title, mimeType&amp;quot;
};
var dat = Drive.Files.get(&amp;quot;FILE ID&amp;quot;, params);
Logger.log(JSON.stringify(dat))

{
  &amp;quot;id&amp;quot;: &amp;quot;FILE ID&amp;quot;,
  &amp;quot;mimeType&amp;quot;: &amp;quot;mimeType&amp;quot;,
  &amp;quot;title&amp;quot;: &amp;quot;FILE NAME&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example, &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;mimeType&lt;/code&gt; are file name, file id and mime type of the file, respectively.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reference :

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/drive/v2/reference/files/get&#34;&gt;https://developers.google.com/drive/v2/reference/files/get&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;3-drive-files-insert&#34;&gt;3. Drive.Files.insert&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;var data = {
    title:    &amp;quot;sample&amp;quot;,
    mimeType: &amp;quot;application/vnd.google-apps.spreadsheet&amp;quot;,
    parents:  [{&amp;quot;id&amp;quot;: &amp;quot;FOLDER ID&amp;quot;}]
};
var res = Drive.Files.insert(data);
Logger.log(&amp;quot;{id: %s, title: %s, mimeType: %s}&amp;quot;, res.id, res.title, res.mimeType)

{
  &amp;quot;id&amp;quot;: &amp;quot;FILE ID&amp;quot;,
  &amp;quot;title&amp;quot;: &amp;quot;sample&amp;quot;,
  &amp;quot;mimeType&amp;quot;: &amp;quot;application/vnd.google-apps.spreadsheet&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By this, a new spreadsheet is created under the FOLDER ID. In this case, &amp;ldquo;fields&amp;rdquo; is retrieved from the results of execution.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reference :

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/drive/v2/reference/files/insert&#34;&gt;https://developers.google.com/drive/v2/reference/files/insert&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Retrieve old revision file from Google Drive</title>
      <link>https://tanaikech.github.io/2017/03/29/retrieve-old-revision-file-from-google-drive</link>
      <pubDate>Wed, 29 Mar 2017 16:00:06 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/03/29/retrieve-old-revision-file-from-google-drive</guid>
      <description>

&lt;p&gt;I introduce 2 kinds of methods. One is to use &lt;code&gt;curl&lt;/code&gt;. Another is to use &lt;code&gt;wget&lt;/code&gt;. At this time, I could know that &lt;code&gt;wget&lt;/code&gt; can be also used as same as &lt;code&gt;curl&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;1-file-id&#34;&gt;1. File ID&lt;/h3&gt;

&lt;p&gt;Retrieve file id from file name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -X GET -sSL \
    -H &#39;Authorization: Bearer ### Access token ###&#39; \
    &#39;https://www.googleapis.com/drive/v3/files?q=name=&amp;quot;### FileName ###&amp;quot;&amp;amp;fields=files(id,name)&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;wget -q --header=&#39;Authorization: Bearer ### Access token ###&#39; \
    &#39;https://www.googleapis.com/drive/v3/files?q=name=&amp;quot;### FileName ###&amp;quot;&amp;amp;fields=files(id,name)&#39; \
    -O out.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reference : &lt;a href=&#34;https://developers.google.com/drive/v3/reference/files/list&#34;&gt;https://developers.google.com/drive/v3/reference/files/list&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-revision-id&#34;&gt;2. Revision ID&lt;/h3&gt;

&lt;p&gt;Retrieve revision id from file id.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -X GET -sSL \
    -H &#39;Authorization: Bearer ### Access token ###&#39; \
    &#39;https://www.googleapis.com/drive/v3/files/### FileID ###/revisions?fields=revisions(id%2CmodifiedTime)&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;wget -q --header=&#39;Authorization: Bearer ### Access token ###&#39; \
    &#39;https://www.googleapis.com/drive/v3/files/### FileID ###/revisions?fields=revisions(id%2CmodifiedTime)&#39; \
    -O out.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reference : &lt;a href=&#34;https://developers.google.com/drive/v3/reference/revisions/list&#34;&gt;https://developers.google.com/drive/v3/reference/revisions/list&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-file-for-revision-id&#34;&gt;3. File for Revision ID&lt;/h3&gt;

&lt;p&gt;Retrieve a file from revision id.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -X GET -sSL \
    -H &#39;Authorization: Bearer ### Access token ###&#39; \
    &amp;quot;https://www.googleapis.com/drive/v3/files/### FileID ###/revisions/### RevisionID ###?alt=media&amp;quot; \
    -o outputfilename
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;wget -q --header=&#39;Authorization: Bearer ### Access token ###&#39; \
    &amp;quot;https://www.googleapis.com/drive/v3/files/### FileID ###/revisions/### RevisionID ###?alt=media&amp;quot; \
    -O outputfilename
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reference : &lt;a href=&#34;https://developers.google.com/drive/v3/reference/revisions/get&#34;&gt;https://developers.google.com/drive/v3/reference/revisions/get&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Put a channel to a channel for golang</title>
      <link>https://tanaikech.github.io/2017/03/29/put-a-channel-to-a-channel-for-golang</link>
      <pubDate>Wed, 29 Mar 2017 07:53:51 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/03/29/put-a-channel-to-a-channel-for-golang</guid>
      <description>&lt;p&gt;I have never heard this. I would like to use this from now.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type st struct {
    data1 int
    data2 int
}

func main() {
    c1 := make(chan *st, 1)
    c2 := make(chan *st, 1)
    c1 &amp;lt;- &amp;amp;st{1, 2}
    c2 &amp;lt;- &amp;lt;-c1
    close(c1)
    close(c2)
    res, _ := &amp;lt;-c2
    fmt.Println(res.data2)
}

&amp;gt;&amp;gt;&amp;gt; 2
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Retrieving File ID from File Name using GAS</title>
      <link>https://tanaikech.github.io/2017/03/23/retrieving-file-id-from-file-name-using-gas</link>
      <pubDate>Thu, 23 Mar 2017 14:24:29 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/03/23/retrieving-file-id-from-file-name-using-gas</guid>
      <description>&lt;p&gt;This is a sample script of GAS for converting file name to file id on Google Drive. Drive API is used for this. So please enable Drive API at Advanced Drive Services and Google API Console.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function nameToId(filename){
  return [i.id for each (i in Drive.Files.list({q: &amp;quot;title=&#39;&amp;quot; + filename + &amp;quot;&#39; and trashed=false&amp;quot;}).items)];
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Transposing Array From (n x m) To (m x n)</title>
      <link>https://tanaikech.github.io/2017/03/21/transposing-array-from-n-x-m-to-m-x-n</link>
      <pubDate>Tue, 21 Mar 2017 08:55:34 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/03/21/transposing-array-from-n-x-m-to-m-x-n</guid>
      <description>&lt;p&gt;This script transposes from an array with n rows x m columns to the array with m rows x n columns. In this script, you can use array of &lt;code&gt;n != m&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;array = [
    [a1, b1, c1, d1, e1],
    [a2, b2, c2, d2, e2],
    [a3, b3, c3, d3, e3],
    [a4, b4, c4, d4, e4],
    [a5, b5, c5, d5, e5],
    [a6, b6, c6, d6, e6],
    [a7, b7, c7, d7, e7],
    [a8, b8, c8, d8, e8],
    [a9, b9, c9, d9, e9],
    [a10, b10, c10, d10, e10]
]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var result = [];
for (i in array[0]){
    result.push(array.map(function(e,j){return e[i]}));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;result = [
    [a1, a2, a3, a4, a5, a6, a7, a8, a9, a10],
    [b1, b2, b3, b4, b5, b6, b7, b8, b9, b10],
    [c1, c2, c3, c4, c5, c6, c7, c8, c9, c10],
    [d1, d2, d3, d4, d5, d6, d7, d8, d9, d10],
    [e1, e2, e3, e4, e5, e6, e7, e8, e9, e10]
]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Download Files Without Authorization From Google Drive</title>
      <link>https://tanaikech.github.io/2017/03/20/download-files-without-authorization-from-google-drive</link>
      <pubDate>Mon, 20 Mar 2017 14:30:15 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/03/20/download-files-without-authorization-from-google-drive</guid>
      <description>

&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;

&lt;p&gt;In this article, files can be downloaded without authorization.&lt;/p&gt;

&lt;h1 id=&#34;description&#34;&gt;Description&lt;/h1&gt;

&lt;p&gt;When we download files from Google Drive, it usually has to use Drive API. In order to use Drive API, access token is required. If you want to make your friends download files from your Google Drive, the authorization process is to take time. Also Web Link for each files can be used. But it has to set for each files. So I proposal this.&lt;/p&gt;

&lt;p&gt;As a sample, I introduce a script for downloading the files using Web Apps. In this sample, it changes a file to a byte slice and send it as text data. Then, it reconstructs it. Of course, base64 encode can be used for this. But the data size for using base64 is much larger than that for using the byte slice.&lt;/p&gt;

&lt;p&gt;At this method, the project files including GAS script cannot be downloaded. When Google Docs are downloaded using this method, those are downloaded as PDF file. It may be the specification of Google.&lt;/p&gt;

&lt;p&gt;By the way, also you can upload files without authorization to Google Drive using this method.&lt;/p&gt;

&lt;h1 id=&#34;usage&#34;&gt;Usage&lt;/h1&gt;

&lt;h2 id=&#34;1-u-deploy-web-apps-https-developers-google-com-apps-script-guides-web-u&#34;&gt;1. &lt;u&gt;&lt;a href=&#34;https://developers.google.com/apps-script/guides/web&#34;&gt;Deploy Web Apps&lt;/a&gt;&lt;/u&gt;&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Open the Script Editor.&lt;/li&gt;
&lt;li&gt;On the Script Editor

&lt;ul&gt;
&lt;li&gt;File -&amp;gt; Manage Versions -&amp;gt; Save New Version&lt;/li&gt;
&lt;li&gt;Publish -&amp;gt; Deploy as Web App&lt;/li&gt;
&lt;li&gt;At Execute the app as, select &lt;strong&gt;&amp;ldquo;your account&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;At Who has access to the app, select &lt;strong&gt;&amp;ldquo;Anyone, even anonymous&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Click &amp;ldquo;Deploy&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Copy &lt;strong&gt;&amp;ldquo;Current web app URL&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Click &amp;ldquo;OK&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;2-paste-following-script-on-script-editor&#34;&gt;2. Paste following script on Script Editor.&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function doPost(e) {
  return (function(id){
    var file = DriveApp.getFileById(id);
    return ContentService
          .createTextOutput(JSON.stringify({
            result: file.getBlob().getBytes(),
            name: file.getName(),
            mimeType: file.getBlob().getContentType()
          }))
          .setMimeType(ContentService.MimeType.JSON);
  })(e.parameters.id);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-at-local-pc-use-following-script&#34;&gt;3. At local pc, use following script.&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import requests
r = requests.post(
    &amp;quot;https://script.google.com/macros/s/### Your ID ###/exec&amp;quot;,
    data={&amp;quot;id&amp;quot;: &amp;quot;### File ID ###&amp;quot;}
)
f = open(r.json()[&amp;quot;name&amp;quot;], &amp;quot;bw&amp;quot;)
f.write(np.array(r.json()[&amp;quot;result&amp;quot;], dtype=np.uint8))
f.close()
print(&amp;quot;Filename = {0}, MimeType = {1}&amp;quot;.format(r.json()[&amp;quot;name&amp;quot;], r.json()[&amp;quot;mimeType&amp;quot;]))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Files output from this sample have no extension. So please add the extension for each mimeType to the files.&lt;/p&gt;

&lt;h1 id=&#34;appendix&#34;&gt;Appendix&lt;/h1&gt;

&lt;p&gt;If you want to download with authorization, there are &lt;a href=&#34;https://developers.google.com/drive/v3/web/manage-downloads&#34;&gt;3 patterns&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/apps-script/import-export&#34;&gt;Download script and project including script.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/drive/v3/reference/files/export&#34;&gt;Download Google Docs (spreadsheet, document, presentation and so on). In this case, Google calls &amp;ldquo;Export&amp;rdquo;.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/drive/v3/reference/files/get&#34;&gt;Download files except for Google Docs.&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Create Folder Tree on Google Drive</title>
      <link>https://tanaikech.github.io/2017/03/13/create-folder-tree-on-google-drive</link>
      <pubDate>Mon, 13 Mar 2017 13:27:57 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/03/13/create-folder-tree-on-google-drive</guid>
      <description>&lt;p&gt;This is a sample script for creating a folder tree including all folders in Google Drive. For each element, parent folder and sub folder are retrieved.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Script :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  var results = (function(folder, folderSt, results){
    var ar = [];
    var folders = folder.getFolders();
    while(folders.hasNext()) ar.push(folders.next());
    folderSt += folder.getName() + &amp;quot;(&amp;quot; + folder.getId() + &amp;quot;)-&amp;quot;;
    var array_folderSt = folderSt.split(&amp;quot;-&amp;quot;);
    array_folderSt.pop()
    results.push(array_folderSt);
    ar.length == 0 &amp;amp;&amp;amp; (folderSt = &amp;quot;&amp;quot;);
    for (var i in ar) arguments.callee(ar[i], folderSt, results);
    return results;
  })(DriveApp.getRootFolder(),&amp;quot;&amp;quot;,[]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Result :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    [foldername1(folder1 id)],
    [foldername1(folder1 id), sub foldername1s(sub folde1s id)],
    [foldername1(folder2 id)],
    [foldername2(folder2 id), sub foldername2s1(sub folde2s1 id)],
    [foldername2(folder2 id), sub foldername2s1(sub folde2s1 id), sub foldername2s2(sub folde2s2 id)]
]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>gogauth</title>
      <link>https://tanaikech.github.io/2017/02/24/gogauth</link>
      <pubDate>Fri, 24 Feb 2017 12:29:32 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/24/gogauth</guid>
      <description>&lt;p&gt;Released a CLI tool for easily retrieving accesstoken from Google OAuth2. The title is &lt;strong&gt;&lt;a href=&#34;https://github.com/tanaikech/gogauth&#34;&gt;gogauth&lt;/a&gt;&lt;/strong&gt;. When I have seen stackoverflow, I knew that it is difficult to retrieve accesstoken from Google OAuth2. So I made this.&lt;/p&gt;

&lt;p&gt;Features of this CLI tool are as follows.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Retrieves easily accesstoken from Google OAuth2 for using Drive API.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you have PhantomeJS, this retrieves &amp;ldquo;code&amp;rdquo; from Google using it. So you don&amp;rsquo;t need to launch your browser for retrieving &amp;ldquo;code&amp;rdquo;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Uses expiration time of accesstoken.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Using gogauth, it will be able to easily use Drive API like &lt;a href=&#34;https://tanaikech.github.io/2017/02/08/file-upload-and-download-with-file-convert-for-curl-using-drive-api/&#34;&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can see and download gogauth from &lt;a href=&#34;https://github.com/tanaikech/gogauth&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Export CSV File from Spreadsheet and Make Download Button</title>
      <link>https://tanaikech.github.io/2017/02/20/export-csv-file-from-spreadsheet-and-make-download-button</link>
      <pubDate>Mon, 20 Feb 2017 10:00:28 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/20/export-csv-file-from-spreadsheet-and-make-download-button</guid>
      <description>&lt;p&gt;This is a script to export a CSV file from spreadsheet and make an user download it. When the users download it, they can download by push a button made by this script.&lt;/p&gt;

&lt;p&gt;In order to use this script, put both HTML and script in a GAS project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;html :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This file name is &amp;ldquo;download.html&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;
    Download CSV?
    &amp;lt;form&amp;gt;
      &amp;lt;input type=&amp;quot;button&amp;quot; value=&amp;quot;ok&amp;quot; onclick=&amp;quot;google.script.run
                                              .withSuccessHandler(executeDownload)
                                              .saveAsCSV();&amp;quot; /&amp;gt;
    &amp;lt;/form&amp;gt;
  &amp;lt;/body&amp;gt;
  &amp;lt;script&amp;gt;
    function executeDownload(url) {
      window.location.href = url;
    }
  &amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Script :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function onOpen() {
  SpreadsheetApp.getUi()
                .createMenu(&#39;csv&#39;)
                .addItem(&#39;export as csv files&#39;, &#39;dialog&#39;)
                .addToUi();
}

function dialog() {
  var html = HtmlService.createHtmlOutputFromFile(&#39;download&#39;);
  SpreadsheetApp.getUi().showModalDialog(html, &#39;CSV download dialog&#39;);
}

function saveAsCSV() {
    var filename = &amp;quot;#####&amp;quot;; // CSV file name
    var folder = &amp;quot;#####&amp;quot;; // Folder ID

    var csv = &amp;quot;&amp;quot;;
    var v = SpreadsheetApp
            .getActiveSpreadsheet()
            .getActiveSheet()
            .getDataRange()
            .getValues();
    v.forEach(function(e) {
      csv += e.join(&amp;quot;,&amp;quot;) + &amp;quot;\n&amp;quot;;
    });
    var url = DriveApp.getFolderById(folder)
              .createFile(filename, csv, MimeType.CSV)
              .getDownloadUrl()
              .replace(&amp;quot;?e=download&amp;amp;gd=true&amp;quot;,&amp;quot;&amp;quot;);
    return url;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Process :&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Using &amp;ldquo;onOpen()&amp;rdquo;, it addes menu for launching a dialog.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;After launching the dialog, &amp;ldquo;saveAsCSV()&amp;rdquo; is launched by pushing a button. &amp;ldquo;saveAsCSV()&amp;rdquo; exports a CSV file and outputs download URL. At current script, all of data on active sheet is retrieved and exported CSV. If you want to retrieve a range you need, please use &amp;ldquo;&lt;a href=&#34;https://developers.google.com/apps-script/reference/spreadsheet/sheet#getRange(Integer,Integer)&#34;&gt;getRange()&lt;/a&gt;&amp;rdquo;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The CSV file is downloaded by &amp;ldquo;executeDownload()&amp;rdquo;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can set csv file-name and output folder by &amp;ldquo;filename&amp;rdquo; and &amp;ldquo;folder&amp;rdquo;, respectively. In this sample, the source sheet is the sheet which opens currently. If you want to other sheet, please change this script.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Send E-mail with xlsx File Converted from Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/02/20/send-e-mail-with-xlsx-file-converted-from-spreadsheet</link>
      <pubDate>Mon, 20 Feb 2017 09:56:12 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/20/send-e-mail-with-xlsx-file-converted-from-spreadsheet</guid>
      <description>&lt;p&gt;This is a script to send e-mail with a xlsx file converted from spreadsheet as an attachment file. Access token is necessary to use this script.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function excelSender() {
  var accesstoken = &amp;quot;[your accesstoken]&amp;quot;;
  var sheetID = &amp;quot;[sheet id]&amp;quot;;
  var xlsxName = &amp;quot;[output xlsx file name]&amp;quot;
  var params = {
    &amp;quot;headers&amp;quot; : {Authorization: &amp;quot;Bearer &amp;quot; + accesstoken},
    &amp;quot;muteHttpExceptions&amp;quot; : true
  };
  var dUrl = &amp;quot;https://www.googleapis.com/drive/v3/files/&amp;quot; + sheetID + &amp;quot;/export?mimeType=application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&amp;quot;
  var xlsxlFile = UrlFetchApp.fetch(dUrl, params).getBlob().setName(xlsxName);
  MailApp.sendEmail({
    to: &amp;quot;[your mail address]&amp;quot;,
    subject: &amp;quot;sample mail&amp;quot;,
    body: &amp;quot;sample mail with an excel file&amp;quot;,
    attachments: [xlsxlFile]
  });
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Retrieving Access Token for Google Drive API using GAS</title>
      <link>https://tanaikech.github.io/2017/02/17/retrieving-access-token-for-google-drive-api-using-gas</link>
      <pubDate>Fri, 17 Feb 2017 17:25:29 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/17/retrieving-access-token-for-google-drive-api-using-gas</guid>
      <description>

&lt;p&gt;These GASs retrieve an access token for using Google Drive API. There are 3 parts. Before you use this, please retrieve client ID, client secret and redirect uri from Google , and choose scopes.&lt;/p&gt;

&lt;h3 id=&#34;1-retrieving-code-from-web&#34;&gt;1. Retrieving code from web&lt;/h3&gt;

&lt;p&gt;This is a script to output URL for retrieving &amp;ldquo;code&amp;rdquo; from web. Please retrieve &amp;ldquo;code&amp;rdquo; by import this URL to your browser. After you run this script, using &amp;ldquo;url&amp;rdquo; got from this script, it retrieves &amp;ldquo;code&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  var url = &#39;https://accounts.google.com/o/oauth2/auth&#39; +
        &amp;quot;?client_id=&amp;quot; + encodeURIComponent(clientid) +
        &amp;quot;&amp;amp;redirect_uri=&amp;quot; + encodeURIComponent(redirecturi) +
        &amp;quot;&amp;amp;scope=&amp;quot; + encodeURIComponent(scopes) +
        &amp;quot;&amp;amp;response_type=code&amp;amp;access_type=offline&amp;quot;;
  Logger.log(url);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-retrieving-refresh-token&#34;&gt;2. Retrieving refresh token&lt;/h3&gt;

&lt;p&gt;This is a script to retrieve &amp;ldquo;refresh token&amp;rdquo;. Before you run this script, it sets &amp;ldquo;code&amp;rdquo; got at part 1. By this script, you can also retrieve &amp;ldquo;access token&amp;rdquo;. Also this &amp;ldquo;access token&amp;rdquo; can be used. But there is a limit time for it. So you have to retrieve &amp;ldquo;access token&amp;rdquo; again. At that time, &amp;ldquo;refresh token&amp;rdquo; is need to it. According to &amp;ldquo;golang.org/x/oauth2&amp;rdquo;, it uses &amp;ldquo;refresh token&amp;rdquo; every time without using the limit time of access token. So this script can be used to only retrieve &amp;ldquo;refresh token&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  var token = JSON.parse(UrlFetchApp.fetch(&amp;quot;https://accounts.google.com/o/oauth2/token&amp;quot;, {
    &amp;quot;method&amp;quot; : &amp;quot;POST&amp;quot;,
    &amp;quot;payload&amp;quot; : {
      &amp;quot;code&amp;quot; : code,
      &amp;quot;client_id&amp;quot; : clientid,
      &amp;quot;client_secret&amp;quot; : clientsecret,
      &amp;quot;redirect_uri&amp;quot; : redirecturi,
      &amp;quot;grant_type&amp;quot; : &amp;quot;authorization_code&amp;quot;
    },
    &amp;quot;muteHttpExceptions&amp;quot; : true
  }).getContentText());
  Logger.log(token.refresh_token);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-retrieving-access-token&#34;&gt;3. Retrieving access token&lt;/h3&gt;

&lt;p&gt;This is a script to retrieve &amp;ldquo;access token&amp;rdquo; using &amp;ldquo;refresh token&amp;rdquo;. Before you run this script, it sets &amp;ldquo;refresh token&amp;rdquo; got at part 2. When you use Drive API, the &amp;ldquo;access token&amp;rdquo; can be retrieved by this script. You can continue to use &amp;ldquo;refresh token&amp;rdquo; got at part 2, until it&amp;rsquo;s revoked.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  var token = JSON.parse(UrlFetchApp.fetch(&amp;quot;https://www.googleapis.com/oauth2/v4/token&amp;quot;, {
    &amp;quot;method&amp;quot; : &amp;quot;POST&amp;quot;,
    &amp;quot;payload&amp;quot; : {
      &amp;quot;client_id&amp;quot; : clientid,
      &amp;quot;client_secret&amp;quot; : clientsecret,
      &amp;quot;refresh_token&amp;quot; :refreshtoken,
      &amp;quot;grant_type&amp;quot; : &amp;quot;refresh_token&amp;quot;
    },
    &amp;quot;muteHttpExceptions&amp;quot; : true
  }).getContentText());
  Logger.log(token.access_token);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Send E-mail with Excel file converted from Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/02/16/send-e-mail-with-excel-file-converted-from-spreadsheet</link>
      <pubDate>Thu, 16 Feb 2017 11:53:50 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/16/send-e-mail-with-excel-file-converted-from-spreadsheet</guid>
      <description>&lt;p&gt;This sample script sends an e-mail with an Excel file exported from Spreadsheet as an attachment file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function excelSender() {
  var sheetID = [Sheet ID];
  var xlsxName = [Excel file name];
  var params = {
    &amp;quot;headers&amp;quot; : {Authorization: &amp;quot;Bearer [Retrieved AccessToken]&amp;quot;},
    &amp;quot;muteHttpExceptions&amp;quot; : true
  };
  var dUrl = &amp;quot;https://www.googleapis.com/drive/v3/files/&amp;quot; + sheetID + &amp;quot;/export?mimeType=application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&amp;quot;
  var xlsxlFile = UrlFetchApp.fetch(dUrl, params).getBlob().setName(xlsxName);
  MailApp.sendEmail({
    to: [Mail address],
    subject: &amp;quot;sample subject&amp;quot;,
    body: &amp;quot;sample body&amp;quot;,
    attachments: [xlsxlFile]
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://tanaikech.github.io/img/170216b.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Is &lt;code&gt;ScriptApp.getOAuthToken()&lt;/code&gt; unstable? When it creates new GAS project, it can be used. But when the time has elapsed, the script cannot be used. On the other hand, when an access token manually retrieves without &lt;code&gt;getOAuthToken()&lt;/code&gt;, it can be used stably. The scopes I used are &lt;code&gt;https://www.googleapis.com/auth/drive&lt;/code&gt; and &lt;code&gt;https://www.googleapis.com/auth/drive.file&lt;/code&gt;. I don&amp;rsquo;t know about this reason.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Download a CSV File from Spreadsheet Using Google HTML Service</title>
      <link>https://tanaikech.github.io/2017/02/16/download-a-csv-file-from-spreadsheet-using-google-html-service</link>
      <pubDate>Thu, 16 Feb 2017 10:31:37 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/16/download-a-csv-file-from-spreadsheet-using-google-html-service</guid>
      <description>

&lt;p&gt;Here, I introduce how to download a CSV file from spreadsheet using Google HTML Service.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using &amp;ldquo;onOpen()&amp;rdquo;, it addes menu for launching a dialog.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://tanaikech.github.io/img/170216a.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;After launching the dialog, &amp;ldquo;getFileUrl()&amp;rdquo; is launched by pushing a button. &amp;ldquo;getFileUrl()&amp;rdquo; exports a CSV file and outputs download URL.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The CSV file is downloaded by &amp;ldquo;executeDownload()&amp;rdquo;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;u&gt;Please put both HTML and GAS to a GAS project.&lt;/u&gt;&lt;/p&gt;

&lt;h2 id=&#34;html-download-html&#34;&gt;HTML : download.html&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;
    Download CSV?
    &amp;lt;form&amp;gt;
      &amp;lt;input type=&amp;quot;button&amp;quot; value=&amp;quot;ok&amp;quot; onclick=&amp;quot;google.script.run
                                              .withSuccessHandler(executeDownload)
                                              .getFileUrl();&amp;quot; /&amp;gt;
    &amp;lt;/form&amp;gt;
  &amp;lt;/body&amp;gt;
  &amp;lt;script&amp;gt;
    function executeDownload(url) {
      window.location.href = url;
    }
  &amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;gas&#34;&gt;GAS :&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;function onOpen() {
  SpreadsheetApp.getUi()
                .createMenu(&#39;export&#39;)
                .addItem(&#39;export csv files&#39;, &#39;dialog&#39;)
                .addToUi();
}

function dialog() {
  var html = HtmlService.createHtmlOutputFromFile(&#39;download&#39;);
  SpreadsheetApp.getUi().showModalDialog(html, &#39;CSV download dialog&#39;);
}

function getFileUrl() {
    var filename = &amp;quot;#####&amp;quot;; // CSV file name
    var folder = &amp;quot;#####&amp;quot;; // Folder ID

    var csv = &amp;quot;&amp;quot;;
    var v = SpreadsheetApp // Now spreadsheet is an active sheet.
            .getActiveSpreadsheet()
            .getActiveSheet()
            .getDataRange()
            .getValues();
    v.forEach(function(e) {
      csv += e.join(&amp;quot;,&amp;quot;) + &amp;quot;\n&amp;quot;;
    });
    var url = DriveApp.getFolderById(folder)
              .createFile(filename, csv, MimeType.CSV)
              .getDownloadUrl()
              .replace(&amp;quot;?e=download&amp;amp;gd=true&amp;quot;,&amp;quot;&amp;quot;);
    return url;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Making charts at spreadsheet</title>
      <link>https://tanaikech.github.io/2017/02/13/making-charts-at-spreadsheet</link>
      <pubDate>Mon, 13 Feb 2017 08:57:58 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/13/making-charts-at-spreadsheet</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://tanaikech.github.io/img/table.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
 var chart = sheet.newChart()
    .setChartType(Charts.ChartType.LINE)
    .asLineChart()
    .addRange(sheet.getRange(&#39;a1:a21&#39;))
    .addRange(sheet.getRange(&#39;b1:b21&#39;))
    .addRange(sheet.getRange(&#39;c1:c21&#39;))
    .setColors([&amp;quot;green&amp;quot;, &amp;quot;red&amp;quot;])
    .setBackgroundColor(&amp;quot;black&amp;quot;)
    .setPosition(5, 5, 0, 0)
    .setPointStyle(Charts.PointStyle.MEDIUM)
    .setOption(&#39;useFirstColumnAsDomain&#39;, true)
    .setOption(&#39;height&#39;, 280)
    .setOption(&#39;width&#39;, 480)
    .setOption(&#39;title&#39;, &#39;Sample chart&#39;)
    .setOption(&#39;hAxis&#39;, {
      title: &#39;x axis&#39;,
      minValue: 0,
      maxValue: 20,
      titleTextStyle: {
        color: &#39;#c0c0c0&#39;,
        fontSize: 20,
        italic: false,
        bold: false
      },
      textStyle: {
        color: &#39;#c0c0c0&#39;,
        fontSize: 12,
        bold: false,
        italic: false
      },
      baselineColor: &#39;#c0c0c0&#39;,
      gridlines: {
        color: &#39;#c0c0c0&#39;,
        count: 4
      }
    })
    .setOption(&#39;vAxis&#39;, {title: &#39;y axis&#39;,
      minValue: 0,
      maxValue: 800,
      titleTextStyle: {
        color: &#39;#c0c0c0&#39;,
        fontSize: 20,
        italic: false,
        bold: false
      },
      textStyle: {
        color: &#39;#c0c0c0&#39;,
        fontSize: 12,
        bold: false,
        italic: false
      },
      baselineColor: &#39;#c0c0c0&#39;,
        gridlines: {
        color: &#39;#c0c0c0&#39;,
        count: 4
      }
    })
    .setOption(&#39;legend&#39;, {
      position: &#39;right&#39;,
      textStyle: {
        color: &#39;yellow&#39;,
        fontSize: 16
      }
    })
    .build();
    sheet.insertChart(chart);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://tanaikech.github.io/img/chart.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Reference pages are &lt;a href=&#34;https://developers.google.com/apps-script/reference/spreadsheet/embedded-line-chart-builder&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://developers.google.com/chart/interactive/docs/gallery/areachart#configuration-options&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>File Upload and Download with File Convert For curl using Drive API</title>
      <link>https://tanaikech.github.io/2017/02/08/file-upload-and-download-with-file-convert-for-curl-using-drive-api</link>
      <pubDate>Wed, 08 Feb 2017 15:50:52 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/08/file-upload-and-download-with-file-convert-for-curl-using-drive-api</guid>
      <description>

&lt;p&gt;It is necessary to retrieve access token on Google. Scope is as follows.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://www.googleapis.com/auth/drive
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Other mimetypes can be seen &lt;a href=&#34;https://developers.google.com/drive/v3/web/manage-downloads&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;download-and-convert-from-spreadsheet-to-excel&#34;&gt;Download and convert from Spreadsheet to Excel&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;curl -X GET -sSL \
        -H &amp;quot;Authorization: Bearer [Your access token]&amp;quot; \
        -o &amp;quot;Excel file name&amp;quot; \
        &amp;quot;https://www.googleapis.com/drive/v3/files/[File ID]/export?mimeType=application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;upload-and-convert-from-excel-to-spreadsheet&#34;&gt;Upload and convert from Excel to Spreadsheet&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;curl -X POST -sSL \
        -H &amp;quot;Authorization: Bearer [Your access token]&amp;quot; \
        -F &amp;quot;metadata={ \
                     name : &#39;[File name on Google Drive]&#39;, \
                     mimeType : &#39;application/vnd.google-apps.spreadsheet&#39; \
                     };type=application/json;charset=UTF-8&amp;quot; \
        -F &amp;quot;file=@[Your Excel file];type=application/vnd.ms-excel&amp;quot; \
        &amp;quot;https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>