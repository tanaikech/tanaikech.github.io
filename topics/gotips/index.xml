<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GoTips on tanaike</title>
    <link>https://tanaikech.github.io/topics/gotips/</link>
    <description>Recent content in GoTips on tanaike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Mon, 20 Jul 2020 16:34:16 +0900</lastBuildDate>
    
	<atom:link href="https://tanaikech.github.io/topics/gotips/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using Request Body of String JSON for Google APIs with googleapis of golang</title>
      <link>https://tanaikech.github.io/2020/07/20/using-request-body-of-string-json-for-google-apis-with-googleapis-of-golang/</link>
      <pubDate>Mon, 20 Jul 2020 16:34:16 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/07/20/using-request-body-of-string-json-for-google-apis-with-googleapis-of-golang/</guid>
      <description>Gists
This is a sample script for directly using the request body of the string JSON for Google APIs with googleapis of golang.
At googleapis for golang, when Google API is used, it is required to create the request body like this sample script. I have several contacts for creating about such request body. I thought that such script might be a bit difficult for users. I thought that when the string JSON object is directly used for this, it might be useful.</description>
    </item>
    
    <item>
      <title>Setting Number Format of Cells on Google Spreadsheet using batchUpdate in Sheets API with golang</title>
      <link>https://tanaikech.github.io/2020/07/19/setting-number-format-of-cells-on-google-spreadsheet-using-batchupdate-in-sheets-api-with-golang/</link>
      <pubDate>Sun, 19 Jul 2020 16:11:07 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/07/19/setting-number-format-of-cells-on-google-spreadsheet-using-batchupdate-in-sheets-api-with-golang/</guid>
      <description>Gists
This is a sample script for setting the number format of cells on Google Spreadsheet using batchUpdate in Sheets API with golang. In this case, googleapis for golang is used. The script of the authorization can be seen at the official document.
Sample script In this script, the number format of the column &amp;ldquo;A&amp;rdquo; is changed to yyyy-mm-dd hh:mm:ss. And, please include https://www.googleapis.com/auth/spreadsheets to the scopes.
sheetId := 12345678 // Please set the sheet ID which is not Spreadsheet ID.</description>
    </item>
    
    <item>
      <title>Updated: GetFileList for golang, Javascript, Node.js and Python</title>
      <link>https://tanaikech.github.io/2020/06/01/updated-getfilelist-for-golang-javascript-node.js-and-python/</link>
      <pubDate>Mon, 01 Jun 2020 14:12:33 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/06/01/updated-getfilelist-for-golang-javascript-node.js-and-python/</guid>
      <description>Updated: GetFileList for golang, Javascript, Node.js and Python
This is the libraries to retrieve the file list with the folder tree from the specific folder of own Google Drive and shared Drives.
 Golang: https://github.com/tanaikech/go-getfilelist  Updated to v1.0.4.   Javascript: https://github.com/tanaikech/GetFileList_js  Updated to v1.0.3.   Node.js: https://github.com/tanaikech/node-getfilelist  Updated to v1.0.5.   Python: https://github.com/tanaikech/getfilelistpy  Updated to v1.0.6.    </description>
    </item>
    
    <item>
      <title>Updated: Go Library - go-getfilelist to v103</title>
      <link>https://tanaikech.github.io/2020/05/14/updated-go-library-go-getfilelist-to-v103/</link>
      <pubDate>Thu, 14 May 2020 16:02:49 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/05/14/updated-go-library-go-getfilelist-to-v103/</guid>
      <description>go-getfilelist was updated to v1.0.3   v1.0.3 (May 14, 2020)
  Shared drive got to be able to be used. The file list can be retrieved from both your Google Drive and the shared drive.
 For example, when the folder ID in the shared Drive is used folderID of Folder(folderID), you can retrieve the file list from the folder in the shared Drive.      You can get this from https://github.</description>
    </item>
    
    <item>
      <title>Libraries of gdoctableapp for golang, Node.js and python were updated to v110</title>
      <link>https://tanaikech.github.io/2020/01/22/libraries-of-gdoctableapp-for-golang-node.js-and-python-were-updated-to-v110/</link>
      <pubDate>Wed, 22 Jan 2020 15:22:54 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/01/22/libraries-of-gdoctableapp-for-golang-node.js-and-python-were-updated-to-v110/</guid>
      <description>Libraries of gdoctableapp for golang, Node.js and python were updated to v1.1.0   go-gdoctableapp
 v1.1.0 (January 22, 2020)  2 new methods were added. From this version, the texts can be replaced by images. The direct link and local file can be used as the image.      node-gdoctableapp
 v1.1.0 (January 22, 2020)  New method was added. From this version, the texts can be replaced by images.</description>
    </item>
    
    <item>
      <title>Libraries of gdoctableapp for golang, Node.js and python were updated to v105</title>
      <link>https://tanaikech.github.io/2020/01/21/libraries-of-gdoctableapp-for-golang-node.js-and-python-were-updated-to-v105/</link>
      <pubDate>Tue, 21 Jan 2020 15:00:02 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/01/21/libraries-of-gdoctableapp-for-golang-node.js-and-python-were-updated-to-v105/</guid>
      <description>Libraries of gdoctableapp for golang, Node.js and python were updated to v1.0.5  go-gdoctableapp node-gdoctableapp gdoctableapppy  Update History   v1.0.5 (January 21, 2020)
 When the inline objects and tables are put in the table. An error occurred. This bug was removed by this update.    I got the pull request at here.
  </description>
    </item>
    
    <item>
      <title>Resumable Uploading Files to Google Drive using Golang</title>
      <link>https://tanaikech.github.io/2019/07/23/resumable-uploading-files-to-google-drive-using-golang/</link>
      <pubDate>Tue, 23 Jul 2019 15:11:48 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/07/23/resumable-uploading-files-to-google-drive-using-golang/</guid>
      <description>Gists
This is a sample script for the resumable upload of Files to Google Drive using Golang. This script uses the library of google-api-go-client. About the installation of google-api-go-client, please check the Quickstart for golang at the official site.
Sample script: package mainimport (&amp;quot;context&amp;quot;&amp;quot;encoding/json&amp;quot;&amp;quot;fmt&amp;quot;&amp;quot;io/ioutil&amp;quot;&amp;quot;log&amp;quot;&amp;quot;net/http&amp;quot;&amp;quot;os&amp;quot;drive &amp;quot;google.golang.org/api/drive/v3&amp;quot;&amp;quot;golang.org/x/oauth2&amp;quot;&amp;quot;golang.org/x/oauth2/google&amp;quot;&amp;quot;golang.org/x/oauth2/jwt&amp;quot;)// ServiceAccount : Use Service accountfunc ServiceAccount(credentialFile string) *http.Client {b, err := ioutil.</description>
    </item>
    
    <item>
      <title>Creating a Table to Google Document by Retrieving Values from Google Spreadsheet for Golang</title>
      <link>https://tanaikech.github.io/2019/07/18/creating-a-table-to-google-document-by-retrieving-values-from-google-spreadsheet-for-golang/</link>
      <pubDate>Thu, 18 Jul 2019 13:49:54 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/07/18/creating-a-table-to-google-document-by-retrieving-values-from-google-spreadsheet-for-golang/</guid>
      <description>Gists
This is a sample script for creating a table to Google Document by retrieving values from Google Spreadsheet for Golang.
Before you use this script, please install go library of go-gdoctableapp.
$ go get -v -u github.com/tanaikech/go-gdoctableappSample script: This sample script uses Service Account.
In this sample script, the values are retrieved from Sheet1!A1:C5 of Spreadsheet, and new table is created to the Document using the values.
package mainimport (&amp;quot;encoding/json&amp;quot;&amp;quot;fmt&amp;quot;&amp;quot;io/ioutil&amp;quot;&amp;quot;log&amp;quot;&amp;quot;net/http&amp;quot;&amp;quot;os&amp;quot;gdoctableapp &amp;quot;github.</description>
    </item>
    
    <item>
      <title>Go Library - go-gdoctableapp</title>
      <link>https://tanaikech.github.io/2019/07/18/go-library-go-gdoctableapp/</link>
      <pubDate>Thu, 18 Jul 2019 11:40:54 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/07/18/go-library-go-gdoctableapp/</guid>
      <description>Overview This is a Golang library for managing tables on Google Document using Google Docs API.
Description Google Docs API has been released. When I used this API, I found that it is very difficult for me to manage the tables on Google Document using Google Docs API. Although I checked the official document, unfortunately, I thought that it&#39;s very difficult for me. So in order to easily manage the tables on Google Document, I created this library.</description>
    </item>
    
    <item>
      <title>Dynamically Retrieving Keys and Values from Struct Property</title>
      <link>https://tanaikech.github.io/2019/06/25/dynamically-retrieving-keys-and-values-from-struct-property/</link>
      <pubDate>Tue, 25 Jun 2019 14:34:02 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/06/25/dynamically-retrieving-keys-and-values-from-struct-property/</guid>
      <description>Gists
This is a sample script for dynamically retrieving the keys and values from struct property using golang.
Sample script: Go Playground
package mainimport (&amp;quot;fmt&amp;quot;&amp;quot;reflect&amp;quot;)func main() {s := struct {key1 stringkey2 stringkey3 string}{&amp;quot;value1&amp;quot;, &amp;quot;value2&amp;quot;, &amp;quot;value3&amp;quot;}r := reflect.ValueOf(&amp;amp;s).Elem()rt := r.Type()for i := 0; i &amp;lt; rt.NumField(); i++ {field := rt.Field(i)rv := reflect.ValueOf(&amp;amp;s)value := reflect.Indirect(rv).FieldByName(field.Name)fmt.Println(field.Name, value.</description>
    </item>
    
    <item>
      <title>Sorting for Slice using Golang</title>
      <link>https://tanaikech.github.io/2019/06/20/sorting-for-slice-using-golang/</link>
      <pubDate>Thu, 20 Jun 2019 12:19:52 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/06/20/sorting-for-slice-using-golang/</guid>
      <description>Gists
This is a sample script for sorting a slice using Golang. Recently, I had a situation for sorting the coordinates of cells of Spreadsheet. As a test case, it thinks of the situation that the randomized cells are sorted. I think that this can be also used for a table except for Spreadsheet.
Sample slice: The sample slice is as follows.
ar := []struct {row intcol intvalue string}{{0, 0, &amp;quot;A1&amp;quot;},{0, 1, &amp;quot;B1&amp;quot;},{0, 2, &amp;quot;C1&amp;quot;},{1, 0, &amp;quot;A2&amp;quot;},{1, 1, &amp;quot;B2&amp;quot;},{1, 3, &amp;quot;D2&amp;quot;},{2, 0, &amp;quot;A3&amp;quot;},{2, 2, &amp;quot;C3&amp;quot;},}When each element of above slice is put to a Spreadsheet, it becomes as follows.</description>
    </item>
    
    <item>
      <title>Go Library - go-fetchall</title>
      <link>https://tanaikech.github.io/2019/05/01/go-library-go-fetchall/</link>
      <pubDate>Wed, 01 May 2019 21:14:46 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/05/01/go-library-go-fetchall/</guid>
      <description>Overview This is a Golang library for running HTTP requests with the asynchronous process. The progress of requests can be also shown.
Demo In this demonstration, 5 requests are run by 2 workers. And before each request, the waiting time for 2 seconds is added as a sample. By this, you can easily see the work with 2 workers. Also you can see this script at the following sample script.</description>
    </item>
    
    <item>
      <title>Updated: Go Library - go-getfilelist to v102</title>
      <link>https://tanaikech.github.io/2018/12/12/updated-go-library-go-getfilelist-to-v102/</link>
      <pubDate>Wed, 12 Dec 2018 10:02:20 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/12/12/updated-go-library-go-getfilelist-to-v102/</guid>
      <description>go-getfilelist was updated to v1.0.2   v1.0.2 (December 12, 2018)
 New method for selecting mimeType was added. When this method is used, files with the specific mimeType in the specific folder can be retrieved.    You can get this from https://github.com/tanaikech/go-getfilelist</description>
    </item>
    
    <item>
      <title>Retrieving Access Token using Service Account by Google&#39;s OAuth2 package for Golang</title>
      <link>https://tanaikech.github.io/2018/12/11/retrieving-access-token-using-service-account-by-googles-oauth2-package-for-golang/</link>
      <pubDate>Tue, 11 Dec 2018 14:47:41 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/12/11/retrieving-access-token-using-service-account-by-googles-oauth2-package-for-golang/</guid>
      <description>Gists
This is a sample golang script for retrieving access token using Service Account of Google by Google&#39;s OAuth2 package.
The script without using Google&#39;s OAuth2 package is here.
package mainimport (&amp;quot;encoding/json&amp;quot;&amp;quot;fmt&amp;quot;&amp;quot;io/ioutil&amp;quot;&amp;quot;os&amp;quot;&amp;quot;golang.org/x/oauth2&amp;quot;&amp;quot;golang.org/x/oauth2/google&amp;quot;&amp;quot;golang.org/x/oauth2/jwt&amp;quot;)func serviceAccount(credentialFile string) (*oauth2.Token, error) {b, err := ioutil.ReadFile(credentialFile)if err != nil {return nil, err}var c = struct {Email string `json:&amp;quot;client_email&amp;quot;`PrivateKey string `json:&amp;quot;private_key&amp;quot;`}{}json.</description>
    </item>
    
    <item>
      <title>Go Library - go-gettokenbyserviceaccount</title>
      <link>https://tanaikech.github.io/2018/12/11/go-library-go-gettokenbyserviceaccount/</link>
      <pubDate>Tue, 11 Dec 2018 14:42:52 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/12/11/go-library-go-gettokenbyserviceaccount/</guid>
      <description>Overview This is a Golang library to retrieve access token from Service Account of Google without using Google&#39;s OAuth2 package.
You can get this from https://github.com/tanaikech/go-gettokenbyserviceaccount</description>
    </item>
    
    <item>
      <title>Using String Values to []googleapi.Field for Golang</title>
      <link>https://tanaikech.github.io/2018/11/19/using-string-values-to-googleapi.field-for-golang/</link>
      <pubDate>Mon, 19 Nov 2018 08:32:25 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/11/19/using-string-values-to-googleapi.field-for-golang/</guid>
      <description>Gists
This sample script is for using the string values to []googleapi.Field for Golang. The property of fields can often be used to the Google APIs. When such APIs are used by the Go library, there are the cases that fields parameter is required to be used. For example, at the quickstart of Drive API for golang, the value is directly put to Fields() like r, err := srv.Files.List().PageSize(10).Fields(&amp;quot;nextPageToken, files(id, name)&amp;quot;).</description>
    </item>
    
    <item>
      <title>Updated: Go Library - go-getfilelist to v101</title>
      <link>https://tanaikech.github.io/2018/11/13/updated-go-library-go-getfilelist-to-v101/</link>
      <pubDate>Tue, 13 Nov 2018 16:08:09 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/11/13/updated-go-library-go-getfilelist-to-v101/</guid>
      <description>go-getfilelist was updated to v1.0.1   v1.0.1 (November 13, 2018)
 From this version, in order to retrieve files and file information, &amp;ldquo;google.golang.org/api/drive/v3&amp;rdquo; is used.  By this, when the values are retrieved from this library, users can use the structure of drive.File. Script using this library can be seen at goodls.      You can get this from https://github.com/tanaikech/go-getfilelist</description>
    </item>
    
    <item>
      <title>Go Library - go-getfilelist</title>
      <link>https://tanaikech.github.io/2018/11/02/go-library-go-getfilelist/</link>
      <pubDate>Fri, 02 Nov 2018 14:01:41 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/11/02/go-library-go-getfilelist/</guid>
      <description>Overview This is a Golang library to retrieve the file list with the folder tree from the specific folder of Google Drive.
Description When I create applications for using Google Drive, I often retrieve a file list from a folder in the application. So far, I had created the script for retrieving a file list from a folder for each application. Recently, I thought that if there is the script for retrieving the file list with the folder tree from the folder of Google Drive as a library, it will be useful for me and other users.</description>
    </item>
    
    <item>
      <title>Zip Compression of Downloaded File using Golang</title>
      <link>https://tanaikech.github.io/2018/10/23/zip-compression-of-downloaded-file-using-golang/</link>
      <pubDate>Tue, 23 Oct 2018 16:59:51 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/10/23/zip-compression-of-downloaded-file-using-golang/</guid>
      <description>Gists
This is a sample script for creating a downloaded file as a zip file using Golang. The downloaded file is not created to a file as a temporal file. The zip file is directly created. When you use this, please modify url, downloadedFileName and zipFileName.
Sample script: package mainimport (&amp;quot;archive/zip&amp;quot;&amp;quot;bytes&amp;quot;&amp;quot;fmt&amp;quot;&amp;quot;io&amp;quot;&amp;quot;io/ioutil&amp;quot;&amp;quot;log&amp;quot;&amp;quot;net/http&amp;quot;&amp;quot;os&amp;quot;&amp;quot;time&amp;quot;)func main() {url := &amp;quot;https://localhost/sample.png&amp;quot;downloadedFileName := &amp;quot;sample.</description>
    </item>
    
    <item>
      <title>Transposing Slice From (n x m) To (m x n) for golang</title>
      <link>https://tanaikech.github.io/2018/02/22/transposing-slice-from-n-x-m-to-m-x-n-for-golang/</link>
      <pubDate>Thu, 22 Feb 2018 11:25:43 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/02/22/transposing-slice-from-n-x-m-to-m-x-n-for-golang/</guid>
      <description>Gists
This is a sample script for transposing slice from (n x m) to (m x n) for golang.
Script : package mainimport &amp;quot;fmt&amp;quot;func transpose(slice [][]string) [][]string {xl := len(slice[0])yl := len(slice)result := make([][]string, xl)for i := range result {result[i] = make([]string, yl)}for i := 0; i &amp;lt; xl; i++ {for j := 0; j &amp;lt; yl; j++ {result[i][j] = slice[j][i]}}return result}func main() {sample := [][]string{[]string{&amp;quot;a1&amp;quot;, &amp;quot;a2&amp;quot;, &amp;quot;a3&amp;quot;, &amp;quot;a4&amp;quot;, &amp;quot;a5&amp;quot;},[]string{&amp;quot;b1&amp;quot;, &amp;quot;b2&amp;quot;, &amp;quot;b3&amp;quot;, &amp;quot;b4&amp;quot;, &amp;quot;b5&amp;quot;},[]string{&amp;quot;c1&amp;quot;, &amp;quot;c2&amp;quot;, &amp;quot;c3&amp;quot;, &amp;quot;c4&amp;quot;, &amp;quot;c5&amp;quot;},}ar := transpose(sample)fmt.</description>
    </item>
    
    <item>
      <title>Copying Values from JSON to Struct using reflect Package</title>
      <link>https://tanaikech.github.io/2018/02/06/copying-values-from-json-to-struct-using-reflect-package/</link>
      <pubDate>Tue, 06 Feb 2018 10:22:55 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/02/06/copying-values-from-json-to-struct-using-reflect-package/</guid>
      <description>Gists
This is a sample script for copying values from JSON to a struct using reflect package.
Script : package mainimport (&amp;quot;encoding/json&amp;quot;&amp;quot;fmt&amp;quot;&amp;quot;reflect&amp;quot;)type obj struct {Key1 string `json:&amp;quot;k1&amp;quot;`Key2 string `json:&amp;quot;k2&amp;quot;`Key3 int64 `json:&amp;quot;k3&amp;quot;`Key4 int `json:&amp;quot;k4&amp;quot;`Key5 bool `json:&amp;quot;k5&amp;quot;`}func main() {data := `{&amp;quot;k1&amp;quot;: &amp;quot;v1&amp;quot;, &amp;quot;k2&amp;quot;: &amp;quot;v2&amp;quot;, &amp;quot;k3&amp;quot;: 1234567890, &amp;quot;k4&amp;quot;: 456, &amp;quot;k5&amp;quot;: true}`d := map[string]interface{}{}json.Unmarshal([]byte(data), &amp;amp;d)obj := &amp;amp;obj{}s := reflect.</description>
    </item>
    
    <item>
      <title>Parsing JSON object (keys are number and changing every time)</title>
      <link>https://tanaikech.github.io/2018/02/05/parsing-json-object-keys-are-number-and-changing-every-time/</link>
      <pubDate>Mon, 05 Feb 2018 13:25:03 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/02/05/parsing-json-object-keys-are-number-and-changing-every-time/</guid>
      <description>Gists
This sample script is for parsing JSON object. In the object, the keys are number and changing every time.
Object : {&amp;#34;key1&amp;#34;: {&amp;#34;key2&amp;#34;: [{&amp;#34;0&amp;#34;: [{&amp;#34;key3&amp;#34;: &amp;#34;value3a&amp;#34;}, {&amp;#34;key3&amp;#34;: &amp;#34;value3b&amp;#34;}]},{&amp;#34;1&amp;#34;: [{&amp;#34;key3&amp;#34;: &amp;#34;value3c&amp;#34;}, {&amp;#34;key3&amp;#34;: &amp;#34;value3d&amp;#34;}]}]}}Script : package mainimport (&amp;quot;encoding/json&amp;quot;&amp;quot;fmt&amp;quot;&amp;quot;strconv&amp;quot;)type key1 struct {Key1 key2 `json:&amp;quot;key1&amp;quot;`}type key2 struct {Key2 []interface{} `json:&amp;quot;key2&amp;quot;`}func main() {data := `{&amp;quot;key1&amp;quot;: {&amp;quot;key2&amp;quot;: [{&amp;quot;0&amp;quot;: [{&amp;quot;key3&amp;quot;: &amp;quot;value3a&amp;quot;}, {&amp;quot;key3&amp;quot;: &amp;quot;value3b&amp;quot;}]},{&amp;quot;1&amp;quot;: [{&amp;quot;key3&amp;quot;: &amp;quot;value3c&amp;quot;}, {&amp;quot;key3&amp;quot;: &amp;quot;value3d&amp;quot;}]}]}}`k1 := &amp;amp;key1{}json.</description>
    </item>
    
    <item>
      <title>Uploading CSV File as Spreadsheet and Modifying Permissions using Golang</title>
      <link>https://tanaikech.github.io/2017/09/21/uploading-csv-file-as-spreadsheet-and-modifying-permissions-using-golang/</link>
      <pubDate>Thu, 21 Sep 2017 15:43:14 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/09/21/uploading-csv-file-as-spreadsheet-and-modifying-permissions-using-golang/</guid>
      <description>Gists
This sample script is for uploading CSV file as Spreadsheet and modifying permissions using Golang.
I think that the detail information of google-api-go-client is a bit little. The sample scripts are so little. It retrieves most information from only godoc and GitHub. So I publish such sample scripts here. If this is useful for you, I&#39;m glad.
Important points :  Give mimeType of file that it wants to upload to options of Media(r io.</description>
    </item>
    
    <item>
      <title>spreadsheets.values.batchUpdate using Golang</title>
      <link>https://tanaikech.github.io/2017/09/15/spreadsheets.values.batchupdate-using-golang/</link>
      <pubDate>Fri, 15 Sep 2017 14:14:50 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/09/15/spreadsheets.values.batchupdate-using-golang/</guid>
      <description>Gists
Flow : In my sample script, the script was made using the Quickstart. The flow to use this sample script is as follows.
 For Go Quickstart, please do Step 1 and Step 2. Please put client_secret.json to the same directory with my sample script. Copy and paste my sample script, and create it as new script file. Run the script. When Go to the following link in your browser then type the authorization code: is shown on your terminal, please copy the URL and paste to your browser.</description>
    </item>
    
    <item>
      <title>Exporting Project on Google Drive using Golang Quickstart</title>
      <link>https://tanaikech.github.io/2017/08/27/exporting-project-on-google-drive-using-golang-quickstart/</link>
      <pubDate>Sun, 27 Aug 2017 12:01:58 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/08/27/exporting-project-on-google-drive-using-golang-quickstart/</guid>
      <description>Gists
This is a sample script for exporting a project on Google Drive to local PC using Golang Quickstart. A file with refresh token is saved to the same directory with this script as go-quickstart.json. Before you run this script, please enable Drive API on your Google API console.
Points for exporting project  In order to export project, both drive.DriveScriptsScope and drive.DriveScope have to be included in the scope. The mimeType for exporting has to be &amp;ldquo;application/vnd.</description>
    </item>
    
    <item>
      <title>Go Library - getcode</title>
      <link>https://tanaikech.github.io/2017/06/21/go-library-getcode/</link>
      <pubDate>Wed, 21 Jun 2017 14:17:39 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/21/go-library-getcode/</guid>
      <description>Overview This is a Golang library to automatically get an authorization code for retrieving access token using OAuth2.
Description When it retrieves an access token and refresh token using OAuth2, the code for retrieving them has to be got by authorization on own browser. In order to retrieve the code, in generally, users have to click the authorization button and copy the code on the browser. This library can be automatically got the code by launching HTML server as a redirected server.</description>
    </item>
    
    <item>
      <title>Benchmark: Retrieving Values from Deep Nested JSON at Golang</title>
      <link>https://tanaikech.github.io/2017/06/17/benchmark-retrieving-values-from-deep-nested-json-at-golang/</link>
      <pubDate>Sat, 17 Jun 2017 10:06:24 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/17/benchmark-retrieving-values-from-deep-nested-json-at-golang/</guid>
      <description>This sample script is for retrieving values from a deep nested JSON. There are 2 patterns. So for these, the benchmark were measured.
Script : package main import ( &amp;quot;encoding/json&amp;quot; &amp;quot;testing&amp;quot; ) const ( data = `{ &amp;quot;A_key1&amp;quot;: { &amp;quot;B_key1&amp;quot;: { &amp;quot;C_key&amp;quot;: &amp;quot;value&amp;quot; } } }` ) func BenchmarkB1(b *testing.B) { b.ResetTimer() for i := 0; i &amp;lt; b.N; i++ { var p map[string]interface{} json.Unmarshal([]byte(data), &amp;amp;p) a1 := p[&amp;quot;A_key1&amp;quot;] a2 := p[&amp;quot;A_key1&amp;quot;].</description>
    </item>
    
    <item>
      <title>Slice Created by Split at Golang</title>
      <link>https://tanaikech.github.io/2017/06/09/slice-created-by-split-at-golang/</link>
      <pubDate>Fri, 09 Jun 2017 09:16:56 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/09/slice-created-by-split-at-golang/</guid>
      <description>When a string without no strings is split by strings.Split(), the created slice is the same to the slice created by make(). The length of the slice doesn&#39;t become zero.
Sample script : package main import ( &amp;quot;fmt&amp;quot; &amp;quot;strings&amp;quot; ) func main() { sample1a := strings.Split(&amp;quot;&amp;quot;, &amp;quot; &amp;quot;) fmt.Printf(&amp;quot;%v, %v, &#39;%v&#39;, %v, %+q\n&amp;quot;, sample1a, len(sample1a), sample1a[0], len(sample1a[0]), sample1a[0]) sample1b := make([]string, 1) fmt.Printf(&amp;quot;%v, %v, &#39;%v&#39;, %v, %+q\n&amp;quot;, sample1b, len(sample1b), sample1b[0], len(sample1b[0]), sample1b[0]) var sample2a []string fmt.</description>
    </item>
    
    <item>
      <title>Changing from &#39;float64&#39; to &#39;int&#39; for Values did Unmarshal using &#39;map[string]interface{}&#39;</title>
      <link>https://tanaikech.github.io/2017/06/02/changing-from-float64-to-int-for-values-did-unmarshal-using-mapstringinterface/</link>
      <pubDate>Fri, 02 Jun 2017 17:22:13 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/02/changing-from-float64-to-int-for-values-did-unmarshal-using-mapstringinterface/</guid>
      <description>This sample is for changing from &amp;ldquo;float64&amp;rdquo; to &amp;ldquo;int&amp;rdquo; for values did unmarshal using map[string]interface{}.
When it did unmarshal using map[string]interface{}, a number with &amp;ldquo;int&amp;rdquo; was changed to &amp;ldquo;float64&amp;rdquo;. And it shows an error as follows.
Error :
panic: interface conversion: interface {} is float64, not int Sample Script : It solves using following script.
package main import ( &amp;quot;encoding/json&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;reflect&amp;quot; ) func main() { data := `{&amp;quot;key&amp;quot;: 10}` var i map[string]interface{} json.</description>
    </item>
    
    <item>
      <title>Replacing JSON Key by Golang</title>
      <link>https://tanaikech.github.io/2017/06/02/replacing-json-key-by-golang/</link>
      <pubDate>Fri, 02 Jun 2017 11:56:30 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/02/replacing-json-key-by-golang/</guid>
      <description>This sample is for replacing JSON key by golang.
package main import ( &amp;quot;encoding/json&amp;quot; &amp;quot;fmt&amp;quot; ) func main() { json1 := `{&amp;quot;key1&amp;quot;: &amp;quot;value1&amp;quot;}` obj := map[string]interface{}{} json.Unmarshal([]byte(json1), &amp;amp;obj) fmt.Println(obj) // &amp;lt;-- map[key1:value1] obj[&amp;quot;key2&amp;quot;] = obj[&amp;quot;key1&amp;quot;] delete(obj, &amp;quot;key1&amp;quot;) fmt.Println(obj) // &amp;lt;-- map[key2:value1] } </description>
    </item>
    
    <item>
      <title>Benchmark: Splitting Command-Line Arguments by Golang</title>
      <link>https://tanaikech.github.io/2017/06/02/benchmark-splitting-command-line-arguments-by-golang/</link>
      <pubDate>Fri, 02 Jun 2017 10:59:31 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/02/benchmark-splitting-command-line-arguments-by-golang/</guid>
      <description>This sample script is for splitting command-line arguments by golang. There are 2 types. One is the regular expression is used. Another is that Split() and TrimSpace() are used.
Here, each process speed was compared.
Script : package main import ( &amp;quot;regexp&amp;quot; &amp;quot;strings&amp;quot; &amp;quot;testing&amp;quot; ) func BenchmarkB1(b *testing.B) { str := &amp;quot;test1.txt, test2.txt&amp;quot; b.ResetTimer() for i := 0; i &amp;lt; b.N; i++ { ar := regexp.MustCompile(`\s*,\s*`).Split(str, -1) var result []string for _, x := range ar { result = append(result, x) // --&amp;gt; &#39;test.</description>
    </item>
    
    <item>
      <title>Decoding JSON by Golang</title>
      <link>https://tanaikech.github.io/2017/05/21/decoding-json-by-golang/</link>
      <pubDate>Sun, 21 May 2017 11:55:34 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/21/decoding-json-by-golang/</guid>
      <description>Decoding JSON by Golang
func main() { data := `{ &amp;quot;A_key1&amp;quot;: { &amp;quot;B_key1&amp;quot;: { &amp;quot;C_key&amp;quot;: &amp;quot;value&amp;quot; } }, &amp;quot;A_key2&amp;quot;: { &amp;quot;B_key2&amp;quot;: { &amp;quot;C_key&amp;quot;: &amp;quot;value&amp;quot; } }, &amp;quot;A_key3&amp;quot;: { &amp;quot;B_key3&amp;quot;: { &amp;quot;C_key&amp;quot;: &amp;quot;value&amp;quot; } }, &amp;quot;A_key4&amp;quot;: { &amp;quot;B_key4&amp;quot;: { &amp;quot;C_key&amp;quot;: &amp;quot;value&amp;quot; } }, &amp;quot;A_key5&amp;quot;: { &amp;quot;B_key5&amp;quot;: { &amp;quot;C_key&amp;quot;: &amp;quot;value&amp;quot; } } }` var p interface{} json.NewDecoder(strings.NewReader(data)).Decode(&amp;amp;p) fmt.Println(p) } Go Playground</description>
    </item>
    
    <item>
      <title>Dynamically Creating JSON by Golang</title>
      <link>https://tanaikech.github.io/2017/05/21/dynamically-creating-json-by-golang/</link>
      <pubDate>Sun, 21 May 2017 10:55:35 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/21/dynamically-creating-json-by-golang/</guid>
      <description>Dynamically Creating JSON by Golang
obj := map[string]interface{}{} obj[&amp;quot;hoge&amp;quot;] = &amp;quot;huga&amp;quot; fmt.Println(obj) Go Playground</description>
    </item>
    
    <item>
      <title>Retrieving Response Headers by Golang</title>
      <link>https://tanaikech.github.io/2017/05/21/retrieving-response-headers-by-golang/</link>
      <pubDate>Sun, 21 May 2017 10:43:32 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/21/retrieving-response-headers-by-golang/</guid>
      <description>Retrieving Response Headers by Golang
res, _ := client.Do(req) contentType := res.Header.Get(&amp;quot;Content-Type&amp;quot;) contentLength := res.Header.Get(&amp;quot;Content-Length&amp;quot;) </description>
    </item>
    
    <item>
      <title>Dynamical Nested JSON Objects by Golang</title>
      <link>https://tanaikech.github.io/2017/05/09/dynamical-nested-json-objects-by-golang/</link>
      <pubDate>Tue, 09 May 2017 15:58:08 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/09/dynamical-nested-json-objects-by-golang/</guid>
      <description>This sample script dynamically creates nested JSON objects.
Script obj := map[string]interface{}{} for i := 1; i &amp;lt;= 5; i++ { value := map[string]interface{}{ fmt.Sprintf(&amp;quot;B_key%d&amp;quot;, i): map[string]interface{}{ &amp;quot;C_key&amp;quot;: &amp;quot;value&amp;quot;, }, } obj[fmt.Sprintf(&amp;quot;A_key%d&amp;quot;, i)] = value } Result { &amp;#34;A_key1&amp;#34;: { &amp;#34;B_key1&amp;#34;: { &amp;#34;C_key&amp;#34;: &amp;#34;value&amp;#34; } }, &amp;#34;A_key2&amp;#34;: { &amp;#34;B_key2&amp;#34;: { &amp;#34;C_key&amp;#34;: &amp;#34;value&amp;#34; } }, &amp;#34;A_key3&amp;#34;: { &amp;#34;B_key3&amp;#34;: { &amp;#34;C_key&amp;#34;: &amp;#34;value&amp;#34; } }, &amp;#34;A_key4&amp;#34;: { &amp;#34;B_key4&amp;#34;: { &amp;#34;C_key&amp;#34;: &amp;#34;value&amp;#34; } }, &amp;#34;A_key5&amp;#34;: { &amp;#34;B_key5&amp;#34;: { &amp;#34;C_key&amp;#34;: &amp;#34;value&amp;#34; } } } </description>
    </item>
    
    <item>
      <title>Put a channel to a channel for golang</title>
      <link>https://tanaikech.github.io/2017/03/29/put-a-channel-to-a-channel-for-golang/</link>
      <pubDate>Wed, 29 Mar 2017 07:53:51 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/03/29/put-a-channel-to-a-channel-for-golang/</guid>
      <description>I have never heard this. I would like to use this from now.
package main import &amp;quot;fmt&amp;quot; type st struct { data1 int data2 int } func main() { c1 := make(chan *st, 1) c2 := make(chan *st, 1) c1 &amp;lt;- &amp;amp;st{1, 2} c2 &amp;lt;- &amp;lt;-c1 close(c1) close(c2) res, _ := &amp;lt;-c2 fmt.Println(res.data2) } &amp;gt;&amp;gt;&amp;gt; 2 </description>
    </item>
    
  </channel>
</rss>