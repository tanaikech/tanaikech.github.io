<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gotips on tanaike</title>
    <link>https://tanaikech.github.io/topics/gotips/</link>
    <description>Recent content in Gotips on tanaike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Sun, 21 May 2017 10:43:32 +0900</lastBuildDate>
    <atom:link href="https://tanaikech.github.io/topics/gotips/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Retrieving Response Headers by Golang</title>
      <link>https://tanaikech.github.io/2017/05/21/retrieving-response-headers-by-golang</link>
      <pubDate>Sun, 21 May 2017 10:43:32 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/21/retrieving-response-headers-by-golang</guid>
      <description>&lt;p&gt;Retrieving Response Headers by Golang&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;res, _ := client.Do(req)
contentType := res.Header.Get(&amp;quot;Content-Type&amp;quot;)
contentLength := res.Header.Get(&amp;quot;Content-Length&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Dynamical Nested JSON Objects by Golang</title>
      <link>https://tanaikech.github.io/2017/05/09/dynamical-nested-json-objects-by-golang</link>
      <pubDate>Tue, 09 May 2017 15:58:08 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/09/dynamical-nested-json-objects-by-golang</guid>
      <description>

&lt;p&gt;This sample script dynamically creates nested JSON objects.&lt;/p&gt;

&lt;h3 id=&#34;script&#34;&gt;Script&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;obj := map[string]interface{}{}
for i := 1; i &amp;lt;= 5; i++ {
    value := map[string]interface{}{
        fmt.Sprintf(&amp;quot;B_key%d&amp;quot;, i): map[string]interface{}{
            &amp;quot;C_key&amp;quot;: &amp;quot;value&amp;quot;,
        },
    }
    obj[fmt.Sprintf(&amp;quot;A_key%d&amp;quot;, i)] = value
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;result&#34;&gt;Result&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;A_key1&amp;quot;: {
    &amp;quot;B_key1&amp;quot;: {
      &amp;quot;C_key&amp;quot;: &amp;quot;value&amp;quot;
    }
  },
  &amp;quot;A_key2&amp;quot;: {
    &amp;quot;B_key2&amp;quot;: {
      &amp;quot;C_key&amp;quot;: &amp;quot;value&amp;quot;
    }
  },
  &amp;quot;A_key3&amp;quot;: {
    &amp;quot;B_key3&amp;quot;: {
      &amp;quot;C_key&amp;quot;: &amp;quot;value&amp;quot;
    }
  },
  &amp;quot;A_key4&amp;quot;: {
    &amp;quot;B_key4&amp;quot;: {
      &amp;quot;C_key&amp;quot;: &amp;quot;value&amp;quot;
    }
  },
  &amp;quot;A_key5&amp;quot;: {
    &amp;quot;B_key5&amp;quot;: {
      &amp;quot;C_key&amp;quot;: &amp;quot;value&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Put a channel to a channel for golang</title>
      <link>https://tanaikech.github.io/2017/03/29/put-a-channel-to-a-channel-for-golang</link>
      <pubDate>Wed, 29 Mar 2017 07:53:51 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/03/29/put-a-channel-to-a-channel-for-golang</guid>
      <description>&lt;p&gt;I have never heard this. I would like to use this from now.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type st struct {
    data1 int
    data2 int
}

func main() {
    c1 := make(chan *st, 1)
    c2 := make(chan *st, 1)
    c1 &amp;lt;- &amp;amp;st{1, 2}
    c2 &amp;lt;- &amp;lt;-c1
    close(c1)
    close(c2)
    res, _ := &amp;lt;-c2
    fmt.Println(res.data2)
}

&amp;gt;&amp;gt;&amp;gt; 2
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>