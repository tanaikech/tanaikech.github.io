<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Benchmark on tanaike</title>
    <link>https://tanaikech.github.io/tags/benchmark/</link>
    <description>Recent content in Benchmark on tanaike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Wed, 15 Mar 2023 16:24:00 +0900</lastBuildDate><atom:link href="https://tanaikech.github.io/tags/benchmark/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Benchmark: Process Costs for Searching Value using Object with Google Apps Script</title>
      <link>https://tanaikech.github.io/2023/03/15/benchmark-process-costs-for-searching-value-using-object-with-google-apps-script/</link>
      <pubDate>Wed, 15 Mar 2023 16:24:00 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/03/15/benchmark-process-costs-for-searching-value-using-object-with-google-apps-script/</guid>
      <description>Gists
When a value is searched from the 1-dimensional array and a 2-dimensional array, after V8 runtime could be used, I use JSON object, Set object, and Map Object. But, I had never measured the process cost of this situation. In this post, I would like to introduce the process cost for searching a value using a JSON object, Set object, and Map object converted from the 1-dimensional array and 2-dimensional array.</description>
    </item>
    
    <item>
      <title>Benchmark: Process Costs for Checking Value in Array using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/09/12/benchmark-process-costs-for-checking-value-in-array-using-google-apps-script/</link>
      <pubDate>Mon, 12 Sep 2022 14:24:08 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/09/12/benchmark-process-costs-for-checking-value-in-array-using-google-apps-script/</guid>
      <description>Gists
Kanshi Tanaike
Introduction There is a maximum executing time for Google Apps Script (GAS). That is 6 minutes. And, in the case of the custom function and the simple trigger, it is 30 seconds. Ref So users always have to pay attention to reducing the process cost of the scripts. Especially, it is very important to know the process costs for the array processing, because array processing is often used for spreadsheets and Google APIs.</description>
    </item>
    
    <item>
      <title>Benchmark: High-Efficiency Finding and Replacing Many Values in Google Spreadsheet with Low Process Cost using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/08/19/benchmark-high-efficiency-finding-and-replacing-many-values-in-google-spreadsheet-with-low-process-cost-using-google-apps-script/</link>
      <pubDate>Fri, 19 Aug 2022 15:11:09 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/08/19/benchmark-high-efficiency-finding-and-replacing-many-values-in-google-spreadsheet-with-low-process-cost-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for high-efficiency finding and replacing many values in Google Spreadsheet with the low process cost using Google Apps Script.
When the various values are replaced in Google Spreadsheet using Google Apps Script, I&amp;rsquo;m worried about the process cost. So, in this report, I would like to introduce a sample script for high-efficiency achieving this.
As the result, using a sample situation, when the process cost of the sample script using Sheets API is compared with that of the sample script using Spreadsheet services (SpreadsheetApp), it was found that the above script using Sheets API could reduce the process cost by about 70 % from the script using Spreadsheet service.</description>
    </item>
    
    <item>
      <title>Report: Handling 10,000,000 cells in Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/04/25/report-handling-10000000-cells-in-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Mon, 25 Apr 2022 15:06:49 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/04/25/report-handling-10000000-cells-in-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
Introduction On March 14, 2022, it reported about &amp;ldquo;Google Sheets doubles cell limit&amp;rdquo;. Ref By this update, now, the users can use 10,000,000 cells in a Google Spreadsheet. This is great news for us. When I tried to handle 10,000,000 cells in a Google Spreadsheet using Google Apps Script, it was found that there were various important points. In this report, I would like to introduce the important points for handling 10,000,000 cells in Google Spreadsheet using Google Apps Script.</description>
    </item>
    
  </channel>
</rss>
