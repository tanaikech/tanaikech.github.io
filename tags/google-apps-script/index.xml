<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Google Apps Script on tanaike</title>
    <link>https://tanaikech.github.io/tags/google-apps-script/</link>
    <description>Recent content in Google Apps Script on tanaike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Thu, 29 Jun 2017 16:09:57 +0900</lastBuildDate>
    <atom:link href="https://tanaikech.github.io/tags/google-apps-script/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Updated: GAS Library - ImgApp</title>
      <link>https://tanaikech.github.io/2017/06/29/updated-gas-library---imgapp</link>
      <pubDate>Thu, 29 Jun 2017 16:09:57 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/29/updated-gas-library---imgapp</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/tanaikech/ImgApp&#34;&gt;ImgApp&lt;/a&gt; was updated to v1.1.0. New method was added.&lt;/p&gt;

&lt;h2 id=&#34;2-doresize&#34;&gt;2. doResize()&lt;/h2&gt;

&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;

&lt;p&gt;This method is for resizing images.&lt;/p&gt;

&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;

&lt;p&gt;Unfortunately, there are no methods to resize images at Google Apps Script. As a workaround, there is a method that it imports the image in Google Document and resizes the image using &lt;code&gt;setWidth()&lt;/code&gt; and &lt;code&gt;setHeight()&lt;/code&gt;. But in this method, the resized blob cannot be retrieved. So although I had thought of other workaround, I had not been able to find it. Recently, I accidentally discovered the other workaround &lt;code&gt;doResize()&lt;/code&gt;. Since it was found that this workaround can be surely used, I added this to ImgApp.&lt;/p&gt;

&lt;h3 id=&#34;demo&#34;&gt;Demo&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/tanaikech/ImgApp/raw/master/images/demo2.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is a demonstration for this method. As a sample. at first, the size of source image is retrieved using &lt;code&gt;getSize()&lt;/code&gt;. Then, the source image is resized by the inputted width. &lt;strong&gt;The play speed is the real time.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This sample image is created by &lt;a href=&#34;http://k3-studio.deviantart.com/art/Chromatic-lituus-415318548&#34;&gt;k3-studio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can see the detail information here &lt;a href=&#34;https://github.com/tanaikech/ImgApp&#34;&gt;https://github.com/tanaikech/ImgApp&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GAS Library - ImgApp - getSize()</title>
      <link>https://tanaikech.github.io/2017/06/27/gas-library---imgapp---getsize</link>
      <pubDate>Tue, 27 Jun 2017 16:21:52 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/27/gas-library---imgapp---getsize</guid>
      <description>

&lt;h2 id=&#34;1-getsize&#34;&gt;1. getSize()&lt;/h2&gt;

&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;

&lt;p&gt;This method is for retrieving the width and height of image as the unit of pixel.&lt;/p&gt;

&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;

&lt;p&gt;Unfortunately, there are no methods to directly retrieve the image size at Google Apps Script. As a workaround, there is a method that it imports the image in Google Document and retrieves the size using &lt;code&gt;getWidth()&lt;/code&gt; and &lt;code&gt;getHeight()&lt;/code&gt;. But in this method, it uses much time and resources on Google. So I thought of retrieving the information of image at the binary level, and created this. By this, the low process cost could be achieved.&lt;/p&gt;

&lt;h3 id=&#34;demo&#34;&gt;Demo&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/tanaikech/ImgApp/raw/master/images/demo1.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is a demonstration for this method. the size information is retrieved from BMP, GIF, PNG and JPG files. The play speed is the real time. From this demo, you can see the speed for retrieving the size information from files.&lt;/p&gt;

&lt;p&gt;This sample image is created by &lt;a href=&#34;http://k3-studio.deviantart.com/art/Overpass-413875385&#34;&gt;k3-studio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can see the detail information here &lt;a href=&#34;https://github.com/tanaikech/ImgApp&#34;&gt;https://github.com/tanaikech/ImgApp&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Retrieving Access Token for Google APIs</title>
      <link>https://tanaikech.github.io/2017/06/21/retrieving-access-token-for-google-apis</link>
      <pubDate>Wed, 21 Jun 2017 10:24:50 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/21/retrieving-access-token-for-google-apis</guid>
      <description>

&lt;p&gt;This sample is for retrieving access token for Google APIs. I created this for studying &lt;code&gt;newStateToken()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;script&#34;&gt;Script :&lt;/h2&gt;

&lt;p&gt;In order to use this script, please retrieve client ID and client Secret, and deploy Web Apps, and run doGet() from Web Apps.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var clientId = &amp;quot;#####&amp;quot;,
    clientSecret = &amp;quot;#####&amp;quot;,
    scopes = &amp;quot;#####&amp;quot;,
    redirectUri = &amp;quot;#####&amp;quot;,
    baseurl = &amp;quot;https://accounts.google.com/o/oauth2/&amp;quot;;

function doGet() {
  return HtmlService.createHtmlOutput(
    &amp;quot;&amp;lt;input type=\&amp;quot;button\&amp;quot; value=\&amp;quot;Auth\&amp;quot; onclick=\&amp;quot;window.open(&#39;&amp;quot; +
    baseurl +
    &amp;quot;auth?state=&amp;quot; + ScriptApp.newStateToken().withMethod(&amp;quot;callback&amp;quot;).withTimeout(300).createToken() +
    &amp;quot;&amp;amp;client_id=&amp;quot; + clientId +
    &amp;quot;&amp;amp;redirect_uri=&amp;quot; + redirectUri +
    &amp;quot;&amp;amp;scope=&amp;quot; + scopes +
    &amp;quot;&amp;amp;response_type=code&amp;amp;access_type=offline&amp;amp;approval_prompt=force&amp;quot; +
    &amp;quot;&#39;, &#39;Authorization&#39;, &#39;width=500,height=600&#39;);\&amp;quot;&amp;gt;&amp;quot;
  );
}

function callback(e) {
  return HtmlService.createHtmlOutput(
    UrlFetchApp.fetch(baseurl + &amp;quot;token&amp;quot;, {
      method: &amp;quot;POST&amp;quot;,
      payload: {
        client_id: clientId,
        client_secret: clientSecret,
        redirect_uri: redirectUri,
        code: e.parameter.code,
        grant_type: &amp;quot;authorization_code&amp;quot;
      },
      muteHttpExceptions: true
  }).getContentText());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;note&#34;&gt;Note :&lt;/h2&gt;

&lt;p&gt;When I had made this sample script, I had encountered a strange error. So I searched about this.&lt;/p&gt;

&lt;p&gt;Recently, the specification was changed. You can see at following blog.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.googleblog.com/2017/05/updating-developer-identity-guidelines.html&#34;&gt;&lt;strong&gt;Updating developer identity guidelines and registration processes to protect users&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By this, when access token is retrieved on web, it is necessary to register your apps to OAuth Developer Verification form for some scopes. The error is as follows.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;400. Thatâ€™s an error.

Error: invalid_scope

You don&#39;t have permission to access some scopes.
Your project is trying to access scopes that need to go through the verification process.
{invalid = [### scope ###]}
If you need to use one of these scopes, submit a verification request.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It has already appeared at scopes for gmail and drive. The scopes for calendar can be used.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Updated: GAS Library - SOUWA</title>
      <link>https://tanaikech.github.io/2017/06/19/updated-gas-library---souwa</link>
      <pubDate>Mon, 19 Jun 2017 07:06:45 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/19/updated-gas-library---souwa</guid>
      <description>&lt;p&gt;SOUWA means summing in Japanese. SOUWA can sum string elements in an array at the high speed. The speed of SOUWA with &lt;strong&gt;the pyramid algorithm is about 380 times faster than that of the standard method&lt;/strong&gt;. New algorithm for summing array elements was developed for SOUWA. You can see the detailed report of this library at here. If you are interested in this, I&amp;rsquo;m glad.&lt;/p&gt;

&lt;p&gt;It was updated to v1.0.2. Please check it out. &lt;a href=&#34;https://github.com/tanaikech/SOUWA_GAS&#34;&gt;https://github.com/tanaikech/SOUWA_GAS&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Search Route and Embedding Map using Custom Function on Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/06/14/search-route-and-embedding-map-using-custom-function-on-spreadsheet</link>
      <pubDate>Wed, 14 Jun 2017 17:35:47 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/14/search-route-and-embedding-map-using-custom-function-on-spreadsheet</guid>
      <description>

&lt;p&gt;This sample script is for searching route between place A and B and embedding a map by custom function on Spreadsheet.&lt;/p&gt;

&lt;p&gt;I think that this method is one of various ideas.&lt;/p&gt;

&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;

&lt;p&gt;When the map is embedded to a cell on spreadsheet as an image, the function &lt;code&gt;=IMAGE()&lt;/code&gt; is suitable for this situation. However, &lt;code&gt;Class Maps&lt;/code&gt;, &lt;code&gt;setFormula()&lt;/code&gt; for importing &lt;code&gt;=IMAGE()&lt;/code&gt; and &lt;code&gt;DriveApp.createFile()&lt;/code&gt; for creating images from maps also cannot be used for custom functions.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;In order to avoid these limitations, I used &lt;a href=&#34;https://developers.google.com/apps-script/guides/web&#34;&gt;Web Apps&lt;/a&gt;. From previous research, it has been found that Web Apps can avoid various limitations. Also in the case of this situation, Web Apps could avoid the above limitations.&lt;/p&gt;

&lt;p&gt;To use this sample script, please deploy Web Apps as follows.&lt;/p&gt;

&lt;p&gt;On the Script Editor,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;File

&lt;ul&gt;
&lt;li&gt;-&amp;gt; Manage Versions&lt;/li&gt;
&lt;li&gt;-&amp;gt; Save New Version&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Publish

&lt;ul&gt;
&lt;li&gt;-&amp;gt; Deploy as Web App&lt;/li&gt;
&lt;li&gt;-&amp;gt; At Execute the app as, select &lt;strong&gt;&amp;ldquo;your account&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;-&amp;gt; At Who has access to the app, select &lt;strong&gt;&amp;ldquo;Anyone, even anonymous&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;-&amp;gt; Click &lt;strong&gt;&amp;ldquo;Deploy&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;-&amp;gt; Copy &lt;strong&gt;&amp;ldquo;Current web app URL&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;-&amp;gt; Click &lt;strong&gt;&amp;ldquo;OK&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When it deploys Web Apps, the approval required authorization can be done, simultaneously.&lt;/p&gt;

&lt;h2 id=&#34;sample-script&#34;&gt;Sample Script :&lt;/h2&gt;

&lt;p&gt;Please copy and paste this script to a bound script of spreadsheet. This sample uses &lt;code&gt;UrlShortener API&lt;/code&gt;. So before use this, please enable UrlShortener API at Advanced Google Services and console API.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var folderId = &#39;### Folder ID ###&#39;; // Please input this.

function getroute(pos1, pos2, mode) {
  var ac = SpreadsheetApp.getActiveSheet().getActiveCell();
  var q1 = &#39;?pos1=&#39; + pos1;
  var q2 = &#39;&amp;amp;pos2=&#39; + pos2;
  var q3 = &#39;&amp;amp;mode=&#39; + mode;
  var q4 = &#39;&amp;amp;row=&#39; + ac.getRow();
  var q5 = &#39;&amp;amp;col=&#39; + ac.getColumn();
  UrlFetchApp.fetch(ScriptApp.getService().getUrl() + q1 + q2 + q3 + q4 + q5);
}

function doGet(e) {
  var data = createMap(e.parameters.pos1, e.parameters.pos2, e.parameters.mode);
  if (data) {
    try {
      var blob = UrlFetchApp.fetch(data[0]).getBlob().setName(e.parameters.pos1 + &#39;_&#39; + e.parameters.pos2);
      var file = DriveApp.getFolderById(folderId).createFile(blob);
      file.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
      SpreadsheetApp
      .getActiveSheet()
      .getRange(e.parameters.row, e.parameters.col, 1, 4)
      .setFormulas([[
        &#39;=T(&amp;quot;&#39; + data[1].duration.value + &#39;&amp;quot;)&#39;,
        &#39;=T(&amp;quot;&#39; + data[1].distance.value + &#39;&amp;quot;)&#39;,
        &#39;=T(&amp;quot;&#39; + data[0] + &#39;&amp;quot;)&#39;,
        &#39;=IMAGE(&amp;quot;&#39; + &#39;http://drive.google.com/uc?id=&#39; + file.getId() + &#39;&amp;quot;)&#39;,
      ]]);
    } catch(m) {
      err(e.parameters.row, e.parameters.col);
    }
  } else {
    err(e.parameters.row, e.parameters.col);
  }
}

function createMap(pos1s, pos2s, mode) {
  var geo = Maps.newGeocoder();
  var pos1 = geo.geocode(pos1s).results[0];
  var pos2 = geo.geocode(pos2s).results[0];
  var map = Maps.newStaticMap().setSize(1000, 1000).setLanguage(&#39;en&#39;);
  var directions = Maps.newDirectionFinder()
  .setOrigin(pos1.geometry.location.lat, pos1.geometry.location.lng)
  .setDestination(pos2.geometry.location.lat, pos2.geometry.location.lng)
  .setMode(function(mode) {
    switch (mode) {
      case &#39;transit&#39;: return Maps.DirectionFinder.Mode.TRANSIT; break;
      case &#39;driving&#39;: return Maps.DirectionFinder.Mode.DRIVING; break;
      case &#39;walking&#39;: return Maps.DirectionFinder.Mode.WALKING; break;
      case &#39;bicycling&#39;: return Maps.DirectionFinder.Mode.BICYCLING; break;
      default : return Maps.DirectionFinder.Mode.DRIVING; break;
    }
  }(mode))
  .setDepart(new Date())
  .getDirections();
  map.setPathStyle(5, Maps.StaticMap.Color.GREEN, null);
  map.beginPath();
  directions.routes.forEach(function(e1) {
    e1.legs.forEach(function(e2) {
      e2.steps.forEach(function(e3) {
        map.addPath(Maps.decodePolyline(e3.polyline.points));
      });
    });
  });
  map.endPath();
  map.setMarkerStyle(Maps.StaticMap.MarkerSize.MID, Maps.StaticMap.Color.RED, &#39;A&#39;).addMarker(pos1s);
  map.setMarkerStyle(Maps.StaticMap.MarkerSize.MID, Maps.StaticMap.Color.BLUE, &#39;B&#39;).addMarker(pos2s);
  try {
    return [UrlShortener.Url.insert({longUrl: map.getMapUrl()}).id, directions.routes[0].legs[0]];
  } catch(e) {
    return null;
  }
}

function err(row, col) {
  SpreadsheetApp
    .getActiveSheet()
    .getRange(row, col, 1, 2)
    .setFormulas([[
      &#39;=T(&amp;quot;Route was not found.&amp;quot;)&#39;,
      &#39;=T(&amp;quot;Route was not found.&amp;quot;)&#39;,
  ]]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;flow-of-script&#34;&gt;Flow of Script :&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;getroute()&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Input &lt;code&gt;=getroute(A2, B2, C2)&lt;/code&gt; in cell &lt;code&gt;D2&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;fetch()&lt;/code&gt;, sends data of &lt;code&gt;&amp;quot;Tokyo station&amp;quot;, &amp;quot;Ginza station&amp;quot;, &amp;quot;transit&amp;quot;&lt;/code&gt; and the inputted coordinate to &lt;code&gt;doGet()&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;doGet()&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using &lt;code&gt;doGet()&lt;/code&gt;, get the data.&lt;/li&gt;
&lt;li&gt;Searches the route from &amp;ldquo;Tokyo station&amp;rdquo; to &amp;ldquo;Ginza station&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Creates the map with the route.&lt;/li&gt;
&lt;li&gt;Saves a map as an image. (in this case, saves as PNG)&lt;/li&gt;
&lt;li&gt;Updates a permission of the image file to use for &lt;code&gt;=IMAGE()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Embeds the text data and image using &lt;code&gt;=T()&lt;/code&gt; and &lt;code&gt;=IMAGE()&lt;/code&gt; which was imported by &lt;code&gt;setFormula()&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;result&#34;&gt;Result :&lt;/h2&gt;

&lt;p&gt;By inputting &lt;code&gt;=getroute(A2, B2, C2)&lt;/code&gt; in cell &lt;code&gt;D2&lt;/code&gt; as a custom function, following result can be obtained.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Although this demo movie seems short loading time, this loading time is edited. Actual loading time is about 40 seconds.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tanaikech.github.io/img/20170614_demo.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;note&#34;&gt;Note :&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;When the custom function &lt;code&gt;getroute()&lt;/code&gt; is used, loading time is about 40 seconds. (I don&amp;rsquo;t know whether this occurs only my environment.)&lt;/li&gt;
&lt;li&gt;Permissions of the created image are &lt;a href=&#34;https://developers.google.com/apps-script/reference/drive/access&#34;&gt;ANYONE_WITH_LINK&lt;/a&gt;, &lt;a href=&#34;https://developers.google.com/apps-script/reference/drive/permission&#34;&gt;VIEW&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;related-tips&#34;&gt;Related Tips&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tanaikech.github.io/2017/06/06/embedding-animation-gif-in-a-cell-on-spreadsheet/&#34;&gt;Embedding Animation GIF in A Cell on Spreadsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tanaikech.github.io/2017/06/06/ocr-using-custom-function-on-spreadsheet/&#34;&gt;OCR using Custom Function on Spreadsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tanaikech.github.io/2017/06/04/embedding-a-map-to-a-cell-using-custom-function-on-spreadsheet/&#34;&gt;Embedding a Map to a Cell using Custom Function on Spreadsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tanaikech.github.io/2017/05/26/embedding-a-chart-to-a-cell-using-custom-function-on-spreadsheet/&#34;&gt;Embedding a Chart to a Cell using Custom Function on Spreadsheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Giving and Retrieving Parameters for Chart at GAS</title>
      <link>https://tanaikech.github.io/2017/06/12/giving-and-retrieving-parameters-for-chart-at-gas</link>
      <pubDate>Mon, 12 Jun 2017 11:11:06 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/12/giving-and-retrieving-parameters-for-chart-at-gas</guid>
      <description>

&lt;p&gt;This sample script is for retrieving parameters from a chart. The chart created by both Google Apps Script and manually operation can be used.&lt;/p&gt;

&lt;h2 id=&#34;creates-chart&#34;&gt;Creates Chart&lt;/h2&gt;

&lt;p&gt;When a chart is created, it supposes following parameters.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var parameters = {
  &amp;quot;title&amp;quot;: &amp;quot;x axis&amp;quot;,
  &amp;quot;fontName&amp;quot;: &amp;quot;Arial&amp;quot;,
  &amp;quot;minValue&amp;quot;: 0,
  &amp;quot;maxValue&amp;quot;: 100,
  &amp;quot;titleTextStyle&amp;quot;: {
    &amp;quot;color&amp;quot;: &amp;quot;#c0c0c0&amp;quot;,
    &amp;quot;fontSize&amp;quot;: 10,
    &amp;quot;fontName&amp;quot;: &amp;quot;Roboto&amp;quot;,
    &amp;quot;italic&amp;quot;: true,
    &amp;quot;bold&amp;quot;: false
  }
};

.setOption(&#39;hAxis&#39;, parameters)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;retrieve-parameters-from-chart&#34;&gt;Retrieve Parameters From Chart&lt;/h2&gt;

&lt;p&gt;For the chart created by above parameters, in order to retrieve the parameters, it uses following script.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var hAxis_title = chart.getOptions().get(&#39;hAxis.title&#39;)
var hAxis_fontName = chart.getOptions().get(&#39;hAxis.fontName&#39;)
var hAxis_minValue = chart.getOptions().get(&#39;hAxis.minValue&#39;)
var hAxis_maxValue = chart.getOptions().get(&#39;hAxis.maxValue&#39;)
var hAxis_titleTextStyle_color = chart.getOptions().get(&#39;hAxis.titleTextStyle.color&#39;)
var hAxis_titleTextStyle_fontSize = chart.getOptions().get(&#39;hAxis.titleTextStyle.fontSize&#39;)
var hAxis_titleTextStyle_fontName = chart.getOptions().get(&#39;hAxis.titleTextStyle.fontName&#39;)
var hAxis_titleTextStyle_italic = chart.getOptions().get(&#39;hAxis.titleTextStyle.italic&#39;)
var hAxis_titleTextStyle_bold = chart.getOptions().get(&#39;hAxis.titleTextStyle.bold&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Result :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x axis
Arial
0.0
100.0
#c0c0c0
10.0
Roboto
true
false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At Google chart, the parameters is constructed by JSON data. So when the chart is created, JSON data is used.
In the same way, when the parameters is retrieved from the chart, it retrieves from the JSON data.&lt;/p&gt;

&lt;p&gt;By using this method, it is possible to create a Google Apps Script from the charts which was manually created.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Benchmark: Effect of Comprehension for GAS</title>
      <link>https://tanaikech.github.io/2017/06/07/benchmark-effect-of-comprehension-for-gas</link>
      <pubDate>Wed, 07 Jun 2017 09:21:54 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/07/benchmark-effect-of-comprehension-for-gas</guid>
      <description>

&lt;h1 id=&#34;description&#34;&gt;Description&lt;/h1&gt;

&lt;p&gt;There are a limit executing time for Google Apps Script (GAS). It&amp;rsquo;s 6 minutes. So users have to pay attention to the process cost of the script. GAS can use JavaScript 1.7. This means to be able to be used comprehension for GAS.&lt;/p&gt;

&lt;p&gt;In this report, the process cost for the comprehension has been investigated. The normal for loop was used as the competitor. As a result, it was found that the comprehension can be used one of methods for reducing the process cost. For 1 dimensional array, the process cost of comprehension is about &lt;strong&gt;60% lower&lt;/strong&gt; than that of the normal one. For 2 dimensional array, the process cost of comprehension is about &lt;strong&gt;50% lower&lt;/strong&gt; than that of the normal one. Each data is the average for 10 times measurements.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tanaikech.github.io/img/20170607a_1d.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tanaikech.github.io/img/20170607a_2d.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;sample-script&#34;&gt;Sample Script&lt;/h1&gt;

&lt;p&gt;As a sample, 1 dimensional array and 2 dimensional array were used. The continuous number was imported to 1 dimensional array. For 2 dimensional array, the number of 1 to 100 was imported each element. As the calculation for measuring the process cost, when the element was multiples of 5, it was retrieved. These samples are GAS.&lt;/p&gt;

&lt;h2 id=&#34;for-1d&#34;&gt;For 1D&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function make1dAr(row){
  var ar = [];
  for (var i=0; i&amp;lt;row; i++) {
    ar[i] = i + 1;
  }
  return ar;
}

function comprehension1d(ar){
  return [i for each (i in ar) if(i % 5 == 0)];
}

function normal1d(ar){
  var result = [];
  for (var i=0; i&amp;lt;ar.length; i++) {
    if (ar[i] % 5 == 0) {
      result.push(ar[i]);
    }
  }
  return result;
}

function main1d() {
  var data = make1dAr(1000000);

  var start_P_time1 = Date.now();
  var res = normal1d(data);
  var end_P_time1 = Date.now();
  Logger.log((end_P_time1 - start_P_time1)/1000 + &#39; [s]&#39;)

  var start_P_time1 = Date.now();
  var res = comprehension1d(data);
  var end_P_time1 = Date.now();
  Logger.log((end_P_time1 - start_P_time1)/1000 + &#39; [s]&#39;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;for-2d&#34;&gt;For 2D&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function make2dAr(row){
  var ar1 = [];
  for (var i=0; i&amp;lt;row; i++) {
    var ar2 = [];
    for (var j=0; j&amp;lt;100; j++) {
      ar2[j] = j + 1;
    }
    ar1[i] = ar2;
  }
  return ar1;
}

function comprehension2d(ar){
  return [[j for each (j in i) if(j % 5 == 0)] for each (i in ar)];
}

function normal2d(ar){
  var ar1 = [];
  for (var i=0; i&amp;lt;ar.length; i++) {
    var ar2 = [];
    for (var j=0; j&amp;lt;ar[i].length; j++) {
      if (ar[i][j] % 5 == 0) {
        ar2.push(ar[i][j]);
      }
    }
    ar1.push(ar2)
  }
  return ar1;
}

function main2d() {
  var data = make2dAr(10000);

  var start_P_time1 = Date.now();
  var res = normal2d(data);
  var end_P_time1 = Date.now();
  Logger.log((end_P_time1 - start_P_time1)/1000 + &#39; [s]&#39;)

  var start_P_time1 = Date.now();
  var res = comprehension2d(data);
  var end_P_time1 = Date.now();
  Logger.log((end_P_time1 - start_P_time1)/1000 + &#39; [s]&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Embedding Animation GIF in A Cell on Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/06/06/embedding-animation-gif-in-a-cell-on-spreadsheet</link>
      <pubDate>Tue, 06 Jun 2017 16:47:41 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/06/embedding-animation-gif-in-a-cell-on-spreadsheet</guid>
      <description>

&lt;p&gt;This sample script is for embedding animation GIF in a cell using custom function on Spreadsheet.&lt;/p&gt;

&lt;p&gt;I think that this method is one of various ideas.&lt;/p&gt;

&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;

&lt;p&gt;There are some limitations.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Images of jpeg and png can be embedded in a cell using &lt;code&gt;=IMAGE()&lt;/code&gt;. But when animation GIF is embedded using it, GIF is not played.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insertImage()&lt;/code&gt; can insert the animation GIF to sheet. But it is not imported to one cell. It floats on several cells.&lt;/li&gt;
&lt;li&gt;In order to float the animation GIF on one cell, the size of GIF has to be retrieved. But the size of image cannot be retrieved at spreadsheet APIs.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;=IMAGE()&lt;/code&gt; and &lt;code&gt;insertImage()&lt;/code&gt; cannot be used by custom functions.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;I thought a method to floating an animation GIF on one cell using &lt;code&gt;insertImage()&lt;/code&gt;. By this, I thought that it will be easy to use as a sheet with GIF images.&lt;/p&gt;

&lt;p&gt;In order to retrieve the size of image, it uses Google Document APIs. Class InlineImage of Document APIs has &lt;code&gt;getHeight()&lt;/code&gt; and &lt;code&gt;getWidth()&lt;/code&gt;. By this, the image size can be retrieved, and the size of cell can be changed using this. Although I have tried to resize image using &lt;code&gt;setHeight()&lt;/code&gt; and &lt;code&gt;setWidth()&lt;/code&gt;, when the image resized using them is retrieved, the size was original one.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;insertImage()&lt;/code&gt; can be used by Web Apps &lt;a href=&#34;https://developers.google.com/apps-script/guides/web&#34;&gt;Web Apps&lt;/a&gt;. From previous research, it has been found that Web Apps can avoid various limitations. Also in the case of this situation, Web Apps could avoid the above limitations.&lt;/p&gt;

&lt;p&gt;To use this sample script, please deploy Web Apps as follows.&lt;/p&gt;

&lt;p&gt;On the Script Editor,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;File

&lt;ul&gt;
&lt;li&gt;-&amp;gt; Manage Versions&lt;/li&gt;
&lt;li&gt;-&amp;gt; Save New Version&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Publish

&lt;ul&gt;
&lt;li&gt;-&amp;gt; Deploy as Web App&lt;/li&gt;
&lt;li&gt;-&amp;gt; At Execute the app as, select &lt;strong&gt;&amp;ldquo;your account&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;-&amp;gt; At Who has access to the app, select &lt;strong&gt;&amp;ldquo;Anyone, even anonymous&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;-&amp;gt; Click &lt;strong&gt;&amp;ldquo;Deploy&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;-&amp;gt; Copy &lt;strong&gt;&amp;ldquo;Current web app URL&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;-&amp;gt; Click &lt;strong&gt;&amp;ldquo;OK&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When it deploys Web Apps, the approval required authorization can be done, simultaneously.&lt;/p&gt;

&lt;h2 id=&#34;sample-script&#34;&gt;Sample Script :&lt;/h2&gt;

&lt;p&gt;Please copy and paste this script to a bound script of spreadsheet.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function gif(filename) {
  var ac = SpreadsheetApp.getActiveSheet().getActiveCell();
  var q1 = &amp;quot;?file=&amp;quot; + filename;
  var q2 = &amp;quot;&amp;amp;row=&amp;quot; + ac.getRow();
  var q3 = &amp;quot;&amp;amp;col=&amp;quot; + ac.getColumn();
  var url = ScriptApp.getService().getUrl() + q1 + q2 + q3;
  UrlFetchApp.fetch(url);
}

function doGet(e) {
  var srcfile = DriveApp.getFilesByName(e.parameters.file).next();
  srcfile.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
  var fileid = Drive.Files.insert({
      title: &amp;quot;temp&amp;quot;,
      mimeType: &amp;quot;application/vnd.google-apps.document&amp;quot;,
      parents:  [{&amp;quot;id&amp;quot;: srcfile.getParents().next().getId()}]
  }).getId();
  var img = DocumentApp.openById(fileid)
            .insertImage(
              0,
              UrlFetchApp.fetch(Drive.Files.get(srcfile.getId())
              .webContentLink)
              .getBlob()
            );
  var sheet = SpreadsheetApp.getActiveSheet();
  sheet.setRowHeight(e.parameters.row, img.getHeight() + 4);
  sheet.setColumnWidth(e.parameters.col, img.getWidth() + 3);
  sheet.getRange(e.parameters.row, e.parameters.col).setFormula(&amp;quot;&amp;quot;);
  sheet.insertImage(Drive.Files.get(srcfile.getId()).webContentLink, e.parameters.row, e.parameters.col);
  Utilities.sleep(1000);
  Drive.Files.remove(fileid);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;flow-of-script&#34;&gt;Flow of Script :&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;gif()&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Input &lt;code&gt;=gif(&amp;quot;sample.gif&amp;quot;)&lt;/code&gt; in cell &lt;code&gt;B2&lt;/code&gt;. &lt;code&gt;&amp;quot;sample.gif&amp;quot;&lt;/code&gt; is an animation GIF.&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;fetch()&lt;/code&gt;, sends data of &lt;code&gt;&amp;quot;sample.gif&amp;quot;&lt;/code&gt; and the inputted coordinate to &lt;code&gt;doGet()&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;doGet()&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using &lt;code&gt;doGet()&lt;/code&gt;, get the data.&lt;/li&gt;
&lt;li&gt;Update the permission of GIF.&lt;/li&gt;
&lt;li&gt;Create Document file as new file.&lt;/li&gt;
&lt;li&gt;Import GIF to the Document and retrieve the image size of GIF.&lt;/li&gt;
&lt;li&gt;Using the size, change the size of cell for importing GIF.&lt;/li&gt;
&lt;li&gt;Import GIF to the cell.&lt;/li&gt;
&lt;li&gt;Delete Document file.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;result&#34;&gt;Result :&lt;/h2&gt;

&lt;p&gt;By inputting &lt;code&gt;=gif(&amp;quot;sample.png&amp;quot;)&lt;/code&gt; in cell &lt;code&gt;B2&lt;/code&gt; as a custom function, following result can be obtained.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Although this demo movie seems short loading time, this loading time is edited. Actual loading time is about 40 seconds.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tanaikech.github.io/img/20170606c_demo.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;note&#34;&gt;Note :&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;When the custom function &lt;code&gt;gif()&lt;/code&gt; is used, loading time is about 40 seconds. (I don&amp;rsquo;t know whether this occurs only my environment.)&lt;/li&gt;
&lt;li&gt;Permissions of GIF are &lt;a href=&#34;https://developers.google.com/apps-script/reference/drive/access&#34;&gt;ANYONE_WITH_LINK&lt;/a&gt;, &lt;a href=&#34;https://developers.google.com/apps-script/reference/drive/permission&#34;&gt;VIEW&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;related-tips&#34;&gt;Related Tips&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tanaikech.github.io/2017/06/06/ocr-using-custom-function-on-spreadsheet/&#34;&gt;OCR using Custom Function on Spreadsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tanaikech.github.io/2017/05/26/embedding-a-chart-to-a-cell-using-custom-function-on-spreadsheet/&#34;&gt;Embedding a Chart to a Cell using Custom Function on Spreadsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tanaikech.github.io/2017/06/04/embedding-a-map-to-a-cell-using-custom-function-on-spreadsheet/&#34;&gt;Embedding a Map to a Cell using Custom Function on Spreadsheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>OCR using Custom Function on Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/06/06/ocr-using-custom-function-on-spreadsheet</link>
      <pubDate>Tue, 06 Jun 2017 07:53:57 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/06/ocr-using-custom-function-on-spreadsheet</guid>
      <description>

&lt;p&gt;This sample script performs OCR and imports resultant text to a cell using custom function on Spreadsheet.&lt;/p&gt;

&lt;p&gt;Drive API has a function to do OCR. It was used for this sample.&lt;/p&gt;

&lt;p&gt;I think that this method is one of various ideas.&lt;/p&gt;

&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;

&lt;p&gt;When OCR is performed and imported the result to a cell on spreadsheet, there are some limitations. &lt;code&gt;DriveApp&lt;/code&gt;, &lt;code&gt;UrlFetchApp&lt;/code&gt;, &lt;code&gt;setFormula()&lt;/code&gt; cannot be used for custom functions.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;In order to avoid these limitations, I used &lt;a href=&#34;https://developers.google.com/apps-script/guides/web&#34;&gt;Web Apps&lt;/a&gt;. From previous research, it has been found that Web Apps can avoid various limitations. Also in the case of this situation, Web Apps could avoid the above limitations.&lt;/p&gt;

&lt;p&gt;To use this sample script, please deploy Web Apps as follows.&lt;/p&gt;

&lt;p&gt;On the Script Editor,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;File

&lt;ul&gt;
&lt;li&gt;-&amp;gt; Manage Versions&lt;/li&gt;
&lt;li&gt;-&amp;gt; Save New Version&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Publish

&lt;ul&gt;
&lt;li&gt;-&amp;gt; Deploy as Web App&lt;/li&gt;
&lt;li&gt;-&amp;gt; At Execute the app as, select &lt;strong&gt;&amp;ldquo;your account&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;-&amp;gt; At Who has access to the app, select &lt;strong&gt;&amp;ldquo;Anyone, even anonymous&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;-&amp;gt; Click &lt;strong&gt;&amp;ldquo;Deploy&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;-&amp;gt; Copy &lt;strong&gt;&amp;ldquo;Current web app URL&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;-&amp;gt; Click &lt;strong&gt;&amp;ldquo;OK&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When it deploys Web Apps, the approval required authorization can be done, simultaneously.&lt;/p&gt;

&lt;h2 id=&#34;sample-script&#34;&gt;Sample Script :&lt;/h2&gt;

&lt;p&gt;Please copy and paste this script to a bound script of spreadsheet.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var folderId = &amp;quot;### Folder ID ###&amp;quot;;

function OCR(filename) {
  var ac = SpreadsheetApp.getActiveSheet().getActiveCell();
  var q1 = &amp;quot;?file=&amp;quot; + filename;
  var q2 = &amp;quot;&amp;amp;row=&amp;quot; + ac.getRow();
  var q3 = &amp;quot;&amp;amp;col=&amp;quot; + ac.getColumn();
  var url = ScriptApp.getService().getUrl() + q1 + q2 + q3;
  UrlFetchApp.fetch(url);
}

function doGet(e) {
  var res = doOCR(e.parameters.file);
  SpreadsheetApp
  .getActiveSheet()
  .getRange(e.parameters.row, e.parameters.col, 1, 2)
  .setFormulas([[
    &#39;=T(&amp;quot;&#39; + e.parameters.file + &#39;&amp;quot;)&#39;,
    &#39;=T(&amp;quot;&#39; + res + &#39;&amp;quot;)&#39;
  ]]);
}

function doOCR(src) {
  var srcfile = DriveApp.getFilesByName(src).next();
  var fileid = Drive.Files.insert(
    {
      title: srcfile.getName(),
      mimeType: Drive.Files.get(srcfile.getId(), {fields: &amp;quot;mimeType&amp;quot;}).mimeType,
      parents:  [{&amp;quot;id&amp;quot;: srcfile.getParents().next().getId()}]
    },
    srcfile.getBlob(),
    {
      ocr: true,
      ocrLanguage: &#39;en&#39;
    }
  ).getId();
  var textdata = UrlFetchApp.fetch(
    &amp;quot;https://www.googleapis.com/drive/v3/files/&amp;quot; +
    fileid +
    &amp;quot;/export?mimeType=text/plain&amp;quot;,
    {
      headers : {Authorization: &amp;quot;Bearer &amp;quot; + ScriptApp.getOAuthToken()},
      muteHttpExceptions : true
    }
  ).getContentText();
  Drive.Files.remove(fileid);
  return textdata.replace(&amp;quot;________________&amp;quot;, &amp;quot;&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The text data obtained by OCR is included a text &lt;code&gt;&amp;quot;________________&amp;quot;&lt;/code&gt;. I don&amp;rsquo;t know the reason. But this can be remove using &lt;code&gt;replace()&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;flow-of-script&#34;&gt;Flow of Script :&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;OCR()&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Input &lt;code&gt;=OCR(&amp;quot;sample.png&amp;quot;)&lt;/code&gt; in cell &lt;code&gt;A1&lt;/code&gt;. &lt;code&gt;&amp;quot;sample.png&amp;quot;&lt;/code&gt; is a source image file. Also PDF files can be used for a source file. &lt;code&gt;&amp;quot;sample.png&amp;quot;&lt;/code&gt; is as follows.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://tanaikech.github.io/img/20170606a_sample.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using &lt;code&gt;fetch()&lt;/code&gt;, sends data of &lt;code&gt;&amp;quot;sample.png&amp;quot;&lt;/code&gt; and the inputted coordinate to &lt;code&gt;doGet()&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;doGet()&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using &lt;code&gt;doGet()&lt;/code&gt;, get the data.&lt;/li&gt;
&lt;li&gt;The source file is converted to a Google Document using &lt;code&gt;Drive API&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The created Document is converted to text data using &lt;code&gt;Drive API&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Imports the text data by &lt;code&gt;setFormula()&lt;/code&gt;. &lt;code&gt;setFormula()&lt;/code&gt; is used for overwriting &lt;code&gt;=OCR(&amp;quot;sample.png&amp;quot;)&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;result&#34;&gt;Result :&lt;/h2&gt;

&lt;p&gt;By inputting &lt;code&gt;=OCR(&amp;quot;sample.png&amp;quot;)&lt;/code&gt; in cell &lt;code&gt;A1&lt;/code&gt; as a custom function, following result can be obtained.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tanaikech.github.io/img/20170606b.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;note&#34;&gt;Note :&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;When the custom function &lt;code&gt;OCR()&lt;/code&gt; is used, loading time is about 40 seconds. (I don&amp;rsquo;t know whether this occurs only my environment.)&lt;/li&gt;
&lt;li&gt;Permissions of the created image are &lt;a href=&#34;https://developers.google.com/apps-script/reference/drive/access&#34;&gt;ANYONE_WITH_LINK&lt;/a&gt;, &lt;a href=&#34;https://developers.google.com/apps-script/reference/drive/permission&#34;&gt;VIEW&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;related-tips&#34;&gt;Related Tips&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tanaikech.github.io/2017/05/26/embedding-a-chart-to-a-cell-using-custom-function-on-spreadsheet/&#34;&gt;Embedding a Chart to a Cell using Custom Function on Spreadsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tanaikech.github.io/2017/06/04/embedding-a-map-to-a-cell-using-custom-function-on-spreadsheet/&#34;&gt;Embedding a Map to a Cell using Custom Function on Spreadsheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Retirving All files in Folder with Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/06/04/retirving-all-files-in-folder-with-spreadsheet</link>
      <pubDate>Sun, 04 Jun 2017 18:15:37 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/04/retirving-all-files-in-folder-with-spreadsheet</guid>
      <description>

&lt;p&gt;This sample retrieves all files in a folder with spreadsheet. When there are some folders in the folder with spreadsheet, this script can retrieve all files in all folders. This script has to be a container-bound script for spreadsheet.&lt;/p&gt;

&lt;h2 id=&#34;script&#34;&gt;Script :&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function getFileList(){
  var folderlist = (function(folder, folderSt, results){
    var ar = [];
    var folders = folder.getFolders();
    while(folders.hasNext()) ar.push(folders.next());
    folderSt += folder.getId() + &amp;quot;#_aabbccddee_#&amp;quot;;
    var array_folderSt = folderSt.split(&amp;quot;#_aabbccddee_#&amp;quot;);
    array_folderSt.pop()
    results.push(array_folderSt);
    ar.length == 0 &amp;amp;&amp;amp; (folderSt = &amp;quot;&amp;quot;);
    for (var i in ar) arguments.callee(ar[i], folderSt, results);
    return results;
  })(DriveApp.getFolderById(
    DriveApp.getFileById(
      SpreadsheetApp.getActiveSpreadsheet().getId()
    ).getParents().next().getId()
  ),&amp;quot;&amp;quot;,[]);

  var filelist = [];
  for (var i in folderlist){
    var folderid = folderlist[i][folderlist[i].length - 1];
    var temp = [];
    var folder = DriveApp.getFolderById(folderid);
    var files = folder.getFiles();
    var foldername = folder.getName();
    while(files.hasNext()){
      var file = files.next();
      temp.push([foldername, file.getName()]);
    }
    filelist.push(temp);
  }
  return Array.prototype.concat.apply([], filelist);
}

function main() {
  var data = getFileList();
  var ss = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  ss.getRange(1,1,data.length,data[0].length).setValues(data);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;result&#34;&gt;Result :&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://tanaikech.github.io/img/20170604b.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Embedding a Map to a Cell using Custom Function on Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/06/04/embedding-a-map-to-a-cell-using-custom-function-on-spreadsheet</link>
      <pubDate>Sun, 04 Jun 2017 12:02:28 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/04/embedding-a-map-to-a-cell-using-custom-function-on-spreadsheet</guid>
      <description>

&lt;p&gt;This sample script embeds a map to a cell using custom function on Spreadsheet.&lt;/p&gt;

&lt;p&gt;I think that this method is one of various ideas.&lt;/p&gt;

&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;

&lt;p&gt;When the map is embeded to a cell on spreadsheet as an image, the function &lt;code&gt;=IMAGE()&lt;/code&gt; is suitable for this situation. However, &lt;code&gt;setFormula()&lt;/code&gt; for importing &lt;code&gt;=IMAGE()&lt;/code&gt; and &lt;code&gt;DriveApp.createFile()&lt;/code&gt; for creating images from maps also cannot be used for custom functions.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;In order to avoid these limitations, I used &lt;a href=&#34;https://developers.google.com/apps-script/guides/web&#34;&gt;Web Apps&lt;/a&gt;. From previous research, it has been found that Web Apps can avoid various limitations. Also in the case of this situation, Web Apps could avoid the above limitations.&lt;/p&gt;

&lt;p&gt;To use this sample script, please deploy Web Apps as follows.&lt;/p&gt;

&lt;p&gt;On the Script Editor,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;File

&lt;ul&gt;
&lt;li&gt;-&amp;gt; Manage Versions&lt;/li&gt;
&lt;li&gt;-&amp;gt; Save New Version&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Publish

&lt;ul&gt;
&lt;li&gt;-&amp;gt; Deploy as Web App&lt;/li&gt;
&lt;li&gt;-&amp;gt; At Execute the app as, select &lt;strong&gt;&amp;ldquo;your account&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;-&amp;gt; At Who has access to the app, select &lt;strong&gt;&amp;ldquo;Anyone, even anonymous&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;-&amp;gt; Click &lt;strong&gt;&amp;ldquo;Deploy&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;-&amp;gt; Copy &lt;strong&gt;&amp;ldquo;Current web app URL&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;-&amp;gt; Click &lt;strong&gt;&amp;ldquo;OK&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When it deploys Web Apps, the approval required authorization can be done, simultaneously.&lt;/p&gt;

&lt;h2 id=&#34;sample-script&#34;&gt;Sample Script :&lt;/h2&gt;

&lt;p&gt;Please copy and paste this script to a bound script of spreadsheet.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var folderId = &amp;quot;### Folder ID ###&amp;quot;;

function embedMap(range, zoom) {
  var ac = SpreadsheetApp.getActiveSheet().getActiveCell();
  var q1 = &amp;quot;?address=&amp;quot; + range;
  var q2 = &amp;quot;&amp;amp;zoom=&amp;quot; + zoom;
  var q3 = &amp;quot;&amp;amp;row=&amp;quot; + ac.getRow();
  var q4 = &amp;quot;&amp;amp;col=&amp;quot; + ac.getColumn();
  UrlFetchApp.fetch(ScriptApp.getService().getUrl() + q1 + q2 + q3 + q4);
}

function doGet(e) {
  var data = Maps.newGeocoder().geocode(e.parameters.address).results[0];
  var file = DriveApp.getFolderById(folderId).createFile(
    Maps.newStaticMap()
    .setSize(800, 600)
    .setCenter(data.geometry.location.lat, data.geometry.location.lng)
    .setZoom(parseInt(e.parameters.zoom, 10))
    .setLanguage(&amp;quot;en&amp;quot;)
    .getBlob()
    .getAs(&#39;image/png&#39;)
    .setName(&amp;quot;map.png&amp;quot;)
  );
  file.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
  SpreadsheetApp
  .getActiveSheet()
  .getRange(e.parameters.row, e.parameters.col, 1, 2)
  .setFormulas([[
    &#39;=T(&amp;quot;&#39; + data.formatted_address + &#39;&amp;quot;)&#39;,
    &#39;=IMAGE(&amp;quot;&#39; + &amp;quot;http://drive.google.com/uc?id=&amp;quot; + file.getId() + &#39;&amp;quot;)&#39;
  ]]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;flow-of-script&#34;&gt;Flow of Script :&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;embedMap()&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Input &lt;code&gt;=embedMap(&amp;quot;Tokyo station&amp;quot;, 16)&lt;/code&gt; in cell &lt;code&gt;B3&lt;/code&gt;. &lt;code&gt;&amp;quot;Tokyo station&amp;quot;&lt;/code&gt; and &lt;code&gt;16&lt;/code&gt; are a name of place and zoom, respectively.&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;fetch()&lt;/code&gt;, sends data of &lt;code&gt;&amp;quot;Tokyo station&amp;quot;, 16&lt;/code&gt; and the inputted coordinate to &lt;code&gt;doGet()&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;doGet()&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using &lt;code&gt;doGet()&lt;/code&gt;, get the data.&lt;/li&gt;
&lt;li&gt;Creates the map from the name of place.&lt;/li&gt;
&lt;li&gt;Saves a map as an image. (in this case, saves as PNG)&lt;/li&gt;
&lt;li&gt;Updates a permission of the image file to use for &lt;code&gt;=IMAGE()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Embeds the address and image using &lt;code&gt;=T()&lt;/code&gt; and &lt;code&gt;=IMAGE()&lt;/code&gt; which was imported by &lt;code&gt;setFormula()&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;result&#34;&gt;Result :&lt;/h2&gt;

&lt;p&gt;By inputting &lt;code&gt;=embedMap(&amp;quot;Tokyo station&amp;quot;, 16)&lt;/code&gt; in cell &lt;code&gt;B3&lt;/code&gt; as a custom function, following result can be obtained.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tanaikech.github.io/img/20170604a.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;note&#34;&gt;Note :&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;When the custom function &lt;code&gt;embedMap()&lt;/code&gt; is used, loading time is about 40 seconds. (I don&amp;rsquo;t know whether this occurs only my environment.)&lt;/li&gt;
&lt;li&gt;Permissions of the created image are &lt;a href=&#34;https://developers.google.com/apps-script/reference/drive/access&#34;&gt;ANYONE_WITH_LINK&lt;/a&gt;, &lt;a href=&#34;https://developers.google.com/apps-script/reference/drive/permission&#34;&gt;VIEW&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;embedMap()&lt;/code&gt; is overwritten by &lt;code&gt;=IMAGE()&lt;/code&gt;. So when the spreadsheet is reopened, the response of &lt;code&gt;=IMAGE()&lt;/code&gt; is much faster than that of &lt;code&gt;embedMap()&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;related-tips&#34;&gt;Related Tips&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tanaikech.github.io/2017/06/06/ocr-using-custom-function-on-spreadsheet/&#34;&gt;OCR using Custom Function on Spreadsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tanaikech.github.io/2017/05/26/embedding-a-chart-to-a-cell-using-custom-function-on-spreadsheet/&#34;&gt;Embedding a Chart to a Cell using Custom Function on Spreadsheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Updated ggsrun to v121</title>
      <link>https://tanaikech.github.io/2017/05/28/updated-ggsrun-to-v121</link>
      <pubDate>Sun, 28 May 2017 14:20:08 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/28/updated-ggsrun-to-v121</guid>
      <description>

&lt;h1 id=&#34;ggsrun-was-updated-to-v-1-2-1&#34;&gt;ggsrun was updated to v.1.2.1&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Configuration file (&lt;code&gt;ggsrun.cfg&lt;/code&gt;) became to be able to be read using the environment variable.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can check this at &lt;a href=&#34;https://github.com/tanaikech/ggsrun&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Embedding a Chart to a Cell using Custom Function on Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/05/26/embedding-a-chart-to-a-cell-using-custom-function-on-spreadsheet</link>
      <pubDate>Fri, 26 May 2017 11:59:06 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/26/embedding-a-chart-to-a-cell-using-custom-function-on-spreadsheet</guid>
      <description>

&lt;p&gt;This sample script embeds a chart to a cell using custom function on Spreadsheet.&lt;/p&gt;

&lt;p&gt;I think that this method is one of various ideas.&lt;/p&gt;

&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;

&lt;p&gt;When you want to create a chart and embed it to a cell using custom functions, you notice that &lt;code&gt;insertChart()&lt;/code&gt; cannot be used. There are some limitations for using custom functions. But &lt;code&gt;insertChart()&lt;/code&gt; creates floating charts. So in order to embed a chart to a cell, the function &lt;code&gt;=IMAGE()&lt;/code&gt; is suitable for this situation. Here, &lt;code&gt;setFormula()&lt;/code&gt; for setting &lt;code&gt;=IMAGE()&lt;/code&gt; and &lt;code&gt;DriveApp.createFile()&lt;/code&gt; for creating images from charts also cannot be used for custom functions.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;In order to avoid these limitations, I used &lt;a href=&#34;https://developers.google.com/apps-script/guides/web&#34;&gt;Web Apps&lt;/a&gt;. From previous research, it has been found that Web Apps can avoid various limitations. Also in the case of this situation, Web Apps could avoid the above limitations.&lt;/p&gt;

&lt;p&gt;To use this sample script, please deploy Web Apps as follows.&lt;/p&gt;

&lt;p&gt;On the Script Editor,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;File

&lt;ul&gt;
&lt;li&gt;-&amp;gt; Manage Versions&lt;/li&gt;
&lt;li&gt;-&amp;gt; Save New Version&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Publish

&lt;ul&gt;
&lt;li&gt;-&amp;gt; Deploy as Web App&lt;/li&gt;
&lt;li&gt;-&amp;gt; At Execute the app as, select &lt;strong&gt;&amp;ldquo;your account&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;-&amp;gt; At Who has access to the app, select &lt;strong&gt;&amp;ldquo;Anyone, even anonymous&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;-&amp;gt; Click &lt;strong&gt;&amp;ldquo;Deploy&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;-&amp;gt; Copy &lt;strong&gt;&amp;ldquo;Current web app URL&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;-&amp;gt; Click &lt;strong&gt;&amp;ldquo;OK&amp;rdquo;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When it deploys Web Apps, the approval required authorization can be done, simultaneously.&lt;/p&gt;

&lt;h2 id=&#34;sample-script&#34;&gt;Sample Script :&lt;/h2&gt;

&lt;p&gt;Please copy and paste this script to a bound script of spreadsheet.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var folderId = &amp;quot;### Folder ID ###&amp;quot;;
var webappsurl = &amp;quot;https://script.google.com/macros/s/######/exec&amp;quot;;

function embedChart(range) {
  var ac = SpreadsheetApp.getActiveSheet().getActiveCell();
  var q1 = &amp;quot;?datarange=&amp;quot; + range;
  var q2 = &amp;quot;&amp;amp;row=&amp;quot; + ac.getRow();
  var q3 = &amp;quot;&amp;amp;col=&amp;quot; + ac.getColumn();
  var url = webappsurl + q1 + q2 + q3;
  UrlFetchApp.fetch(url);
}

function doGet(e) {
  var sheet = SpreadsheetApp.getActiveSheet();
  var chart = sheet.newChart()
    .setChartType(Charts.ChartType.PIE)
    .addRange(sheet.getRange(e.parameters.datarange))
    .setOption(&#39;height&#39;, 280)
    .setOption(&#39;width&#39;, 480)
    .setOption(&#39;title&#39;, &#39;Sample chart&#39;)
    .build();
  var file = DriveApp.getFolderById(folderId).createFile(
    chart.getAs(&#39;image/png&#39;).setName(&amp;quot;chart_image.png&amp;quot;)
  );
  file.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
  sheet.getRange(e.parameters.row, e.parameters.col).setFormula(
    &#39;=IMAGE(&amp;quot;&#39; + &amp;quot;http://drive.google.com/uc?id=&amp;quot; + file.getId() + &#39;&amp;quot;)&#39;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;flow-of-script&#34;&gt;Flow of Script :&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;embedChart()&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Input &lt;code&gt;=embedChart(&amp;quot;a2:a6&amp;quot;)&lt;/code&gt; in cell &lt;code&gt;B7&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;fetch()&lt;/code&gt;, sends data of &lt;code&gt;a2:a6&lt;/code&gt; and the inputted coordinate to &lt;code&gt;doGet()&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;doGet()&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using &lt;code&gt;doGet()&lt;/code&gt;, get the data.&lt;/li&gt;
&lt;li&gt;Creates a chart using inputted range &lt;code&gt;a2:a6&lt;/code&gt;. (in this case, creates a pie chart)&lt;/li&gt;
&lt;li&gt;Saves a chart as an image.  (in this case, saves as PNG)&lt;/li&gt;
&lt;li&gt;Updates a permission of the image file to use for &lt;code&gt;=IMAGE()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Embeds the image using &lt;code&gt;=IMAGE()&lt;/code&gt; which was imported by &lt;code&gt;setFormula()&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;result&#34;&gt;Result :&lt;/h2&gt;

&lt;p&gt;By inputting &lt;code&gt;=embedChart(&amp;quot;a2:a6&amp;quot;)&lt;/code&gt; in cell &lt;code&gt;B7&lt;/code&gt; as a custom function, following result can be obtained.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://tanaikech.github.io/img/20170526a.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;note&#34;&gt;Note :&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;When the custom function &lt;code&gt;embedChart()&lt;/code&gt; is used, loading time is about 40 seconds. (I don&amp;rsquo;t know whether this occurs only my environment.)&lt;/li&gt;
&lt;li&gt;Permissions of the created image are &lt;a href=&#34;https://developers.google.com/apps-script/reference/drive/access&#34;&gt;ANYONE_WITH_LINK&lt;/a&gt;, &lt;a href=&#34;https://developers.google.com/apps-script/reference/drive/permission&#34;&gt;VIEW&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;embedChart()&lt;/code&gt; is overwritten by &lt;code&gt;=IMAGE()&lt;/code&gt;. So when the spreadsheet is reopened, the response of &lt;code&gt;=IMAGE()&lt;/code&gt; is much faster than that of &lt;code&gt;embedChart()&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;related-tips&#34;&gt;Related Tips&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tanaikech.github.io/2017/06/06/ocr-using-custom-function-on-spreadsheet/&#34;&gt;OCR using Custom Function on Spreadsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tanaikech.github.io/2017/06/04/embedding-a-map-to-a-cell-using-custom-function-on-spreadsheet/&#34;&gt;Embedding a Map to a Cell using Custom Function on Spreadsheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Retrieving HTML File ID from Microsoft Docx File on Google Drive</title>
      <link>https://tanaikech.github.io/2017/05/24/retrieving-html-file-id-from-microsoft-docx-file-on-google-drive</link>
      <pubDate>Wed, 24 May 2017 09:08:58 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/24/retrieving-html-file-id-from-microsoft-docx-file-on-google-drive</guid>
      <description>

&lt;p&gt;This sample script converts from Microsoft Docx File on Google Drive to Google Spreadsheet, and converts to HTML file.&lt;/p&gt;

&lt;p&gt;Drive APIs v2 and v3 are used for this. Please set as follows.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/drive/v2/reference/&#34;&gt;Drive API v2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/drive/v3/reference/&#34;&gt;Drive API v3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;ldquo;Drive API v2&amp;rdquo; can be used at Google Apps Script by enabling Drive API of Advanced Google services and of Google API Console.&lt;/p&gt;

&lt;p&gt;How to use it is as follows.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In the script editor, select Resources &amp;gt; Advanced Google services&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the dialog that appears, click the on/off switch for Drive API v2.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;At the bottom of the dialog, click the link for the Google API Console.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the console, click into the filter box and type part of the name of the API &amp;ldquo;Drive API&amp;rdquo;, then click the name once you see it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On the next screen, click Enable API. By this, Drive APIs v2 and v3 can be used.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Close the Developers Console and return to the script editor. Click OK in the dialog. The advanced service you enabled is now available in autocomplete.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The detail information is &lt;a href=&#34;https://developers.google.com/apps-script/guides/services/advanced&#34;&gt;https://developers.google.com/apps-script/guides/services/advanced&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;script&#34;&gt;Script&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function doGet(e){
  var folderId = &amp;quot;### Folder ID ###&amp;quot;;

  var file = DriveApp.getFileById(e.parameters.id);
  var docfileId = Drive.Files.insert(
    {
      &amp;quot;title&amp;quot;: file.getName(),
      &amp;quot;mimeType&amp;quot;: &amp;quot;application/vnd.google-apps.document&amp;quot;,
      &amp;quot;parents&amp;quot;:  [{&amp;quot;id&amp;quot;: folderId}]
    },
    file.getBlob()
  ).id;
  var htmlId = DriveApp.getFolderById(folderId).createFile(
    UrlFetchApp.fetch(
      &amp;quot;https://www.googleapis.com/drive/v3/files/&amp;quot; + docfileId + &amp;quot;/export?mimeType=text/html&amp;quot;,
      {
        headers : {Authorization: &amp;quot;Bearer &amp;quot; + ScriptApp.getOAuthToken()},
        muteHttpExceptions : true
      }
    ).getBlob()
  ).setName(file.getName() + &amp;quot;.html&amp;quot;).getId();
  Drive.Files.remove(docfileId);
  return ContentService.createTextOutput(htmlId);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;check-script&#34;&gt;Check Script&lt;/h2&gt;

&lt;p&gt;In order to check above script, you can do it using curl as follows. When Docx File ID is sent to doGet() on Google, you can retrieve HTML file ID from Google.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -L https://script.google.com/macros/s/#####/exec?id=### Docx File ID ###
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Updated ggsrun to v120</title>
      <link>https://tanaikech.github.io/2017/05/19/updated-ggsrun-to-v120</link>
      <pubDate>Fri, 19 May 2017 08:49:06 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/19/updated-ggsrun-to-v120</guid>
      <description>

&lt;h1 id=&#34;ggsrun-was-updated-to-v-1-2-0&#34;&gt;ggsrun was updated to v.1.2.0&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Added a command for retrieving revision files on Google Drive.&lt;/li&gt;
&lt;li&gt;Some modifications.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can check this at &lt;a href=&#34;https://github.com/tanaikech/ggsrun&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>