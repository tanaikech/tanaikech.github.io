<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Google Apps Script on tanaike</title>
    <link>https://tanaikech.github.io/tags/google-apps-script/</link>
    <description>Recent content in Google Apps Script on tanaike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Thu, 16 Feb 2017 10:31:37 +0900</lastBuildDate>
    <atom:link href="https://tanaikech.github.io/tags/google-apps-script/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Download a CSV File from Spreadsheet Using Google HTML Service</title>
      <link>https://tanaikech.github.io/2017/02/16/download-a-csv-file-from-spreadsheet-using-google-html-service</link>
      <pubDate>Thu, 16 Feb 2017 10:31:37 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/16/download-a-csv-file-from-spreadsheet-using-google-html-service</guid>
      <description>

&lt;p&gt;Here, I introduce how to download a CSV file from spreadsheet using Google HTML Service.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using &amp;ldquo;onOpen()&amp;rdquo;, it addes menu for launching a dialog.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://tanaikech.github.io/img/170216a.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;After launching the dialog, &amp;ldquo;getFileUrl()&amp;rdquo; is launched by pushing a button. &amp;ldquo;getFileUrl()&amp;rdquo; exports a CSV file and outputs download URL.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The CSV file is downloaded by &amp;ldquo;executeDownload()&amp;rdquo;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;u&gt;Please put both HTML and GAS to a GAS project.&lt;/u&gt;&lt;/p&gt;

&lt;h2 id=&#34;html-download-html&#34;&gt;HTML : download.html&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;
    Download CSV?
    &amp;lt;form&amp;gt;
      &amp;lt;input type=&amp;quot;button&amp;quot; value=&amp;quot;ok&amp;quot; onclick=&amp;quot;google.script.run
                                              .withSuccessHandler(executeDownload)
                                              .getFileUrl();&amp;quot; /&amp;gt;
    &amp;lt;/form&amp;gt;
  &amp;lt;/body&amp;gt;
  &amp;lt;script&amp;gt;
    function executeDownload(url) {
      window.location.href = url;
    }
  &amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;gas&#34;&gt;GAS :&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;function onOpen() {
  SpreadsheetApp.getUi()
                .createMenu(&#39;export&#39;)
                .addItem(&#39;export csv files&#39;, &#39;dialog&#39;)
                .addToUi();
}

function dialog() {
  var html = HtmlService.createHtmlOutputFromFile(&#39;download&#39;);
  SpreadsheetApp.getUi().showModalDialog(html, &#39;CSV download dialog&#39;);
}

function getFileUrl() {
    var filename = &amp;quot;#####&amp;quot;; // CSV file name
    var folder = &amp;quot;#####&amp;quot;; // Folder ID

    var csv = &amp;quot;&amp;quot;;
    var v = SpreadsheetApp // Now spreadsheet is an active sheet.
            .getActiveSpreadsheet()
            .getActiveSheet()
            .getDataRange()
            .getValues();
    v.forEach(function(e) {
      csv += e.join(&amp;quot;,&amp;quot;) + &amp;quot;\n&amp;quot;;
    });
    var url = DriveApp.getFolderById(folder)
              .createFile(filename, csv, MimeType.CSV)
              .getDownloadUrl()
              .replace(&amp;quot;?e=download&amp;amp;gd=true&amp;quot;,&amp;quot;&amp;quot;);
    return url;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Making charts at spreadsheet</title>
      <link>https://tanaikech.github.io/2017/02/13/making-charts-at-spreadsheet</link>
      <pubDate>Mon, 13 Feb 2017 08:57:58 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/13/making-charts-at-spreadsheet</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://tanaikech.github.io/img/table.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; var ss = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
 var chart = sheet.newChart()
    .setChartType(Charts.ChartType.LINE)
    .asLineChart()
    .addRange(sheet.getRange(&#39;a1:a21&#39;))
    .addRange(sheet.getRange(&#39;b1:b21&#39;))
    .addRange(sheet.getRange(&#39;c1:c21&#39;))
    .setColors([&amp;quot;green&amp;quot;, &amp;quot;red&amp;quot;])
    .setBackgroundColor(&amp;quot;black&amp;quot;)
    .setPosition(5, 5, 0, 0)
    .setPointStyle(Charts.PointStyle.MEDIUM)
    .setOption(&#39;useFirstColumnAsDomain&#39;, true)
    .setOption(&#39;height&#39;, 280)
    .setOption(&#39;width&#39;, 480)
    .setOption(&#39;title&#39;, &#39;Sample chart&#39;)
    .setOption(&#39;hAxis&#39;, {
      title: &#39;x axis&#39;,
      minValue: 0,
      maxValue: 20,
      titleTextStyle: {
        color: &#39;#c0c0c0&#39;,
        fontSize: 20,
        italic: false,
        bold: false
      },
      textStyle: {
        color: &#39;#c0c0c0&#39;,
        fontSize: 12,
        bold: false,
        italic: false
      },
      baselineColor: &#39;#c0c0c0&#39;,
      gridlines: {
        color: &#39;#c0c0c0&#39;,
        count: 4
      }
    })
    .setOption(&#39;vAxis&#39;, {title: &#39;y axis&#39;,
      minValue: 0,
      maxValue: 800,
      titleTextStyle: {
        color: &#39;#c0c0c0&#39;,
        fontSize: 20,
        italic: false,
        bold: false
      },
      textStyle: {
        color: &#39;#c0c0c0&#39;,
        fontSize: 12,
        bold: false,
        italic: false
      },
      baselineColor: &#39;#c0c0c0&#39;,
        gridlines: {
        color: &#39;#c0c0c0&#39;,
        count: 4
      }
    })
    .setOption(&#39;legend&#39;, {
      position: &#39;right&#39;,
      textStyle: {
        color: &#39;yellow&#39;,
        fontSize: 16
      }
    })
    .build();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://tanaikech.github.io/img/chart.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Reference pages are &lt;a href=&#34;https://developers.google.com/apps-script/reference/spreadsheet/embedded-line-chart-builder&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://developers.google.com/chart/interactive/docs/gallery/areachart#configuration-options&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Event of onEdit() for Google spreadsheet</title>
      <link>https://tanaikech.github.io/2017/02/07/event-of-onedit-for-google-spreadsheet</link>
      <pubDate>Tue, 07 Feb 2017 11:03:56 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/07/event-of-onedit-for-google-spreadsheet</guid>
      <description>

&lt;h1 id=&#34;about-event-objects&#34;&gt;About Event Objects&lt;/h1&gt;

&lt;p&gt;For example, it thinks the situation of input text of &amp;lsquo;test&amp;rsquo; to &amp;lsquo;A1&amp;rsquo; on a sheet.&lt;/p&gt;

&lt;p&gt;When you use only &amp;lsquo;onEdit(e)&amp;rsquo; without an installing trigger, &amp;lsquo;e&amp;rsquo; has following parameters.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{authMode=LIMITED, range=Range, source=Spreadsheet, user=, value=test}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, the event cannot send an e-mail because of &amp;lsquo;authMode=LIMITED&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;When you use &amp;ldquo;onEdit(e)&amp;rdquo; with an installing trigger of &amp;ldquo;Edit&amp;rdquo;, &amp;lsquo;e&amp;rsquo; has following parameters.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{authMode=FULL, range=Range, source=Spreadsheet, value=test, triggerUid=#####}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, the event can send an e-mail because of &amp;lsquo;authMode=FULL&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;&amp;lsquo;range&amp;rsquo; and &amp;lsquo;source&amp;rsquo; are the coordinate and spreadsheet of the edited cell, respectively. They can confirm using &amp;lsquo;e.range.getA1Notation()&amp;rsquo; and &amp;lsquo;getId()&amp;rsquo;, respectively.&lt;/p&gt;

&lt;h2 id=&#34;about-ljava-lang-object&#34;&gt;About [Ljava.lang.Object;&lt;/h2&gt;

&lt;p&gt;About &amp;ldquo;Form submit event&amp;rdquo; of GAS with spreadsheet, e.values and e.namedValues have &amp;ldquo;[Ljava.lang.Object;&amp;ldquo;. Using &amp;ldquo;JSON.Stringify()&amp;rdquo; like &amp;ldquo;JSON.stringify(e.values)&amp;rdquo;, &amp;ldquo;JSON.stringify(e.namedValues)&amp;rdquo;, values from &amp;ldquo;[Ljava.lang.Object;&amp;rdquo; can be retrieved.&lt;/p&gt;

&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;

&lt;p&gt;You can see the detailed information of sheet events from &lt;a href=&#34;https://developers.google.com/apps-script/guides/triggers/events&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>File upload using doPost on Google Web Apps</title>
      <link>https://tanaikech.github.io/2017/02/05/file-upload-using-dopost-on-google-web-apps</link>
      <pubDate>Sun, 05 Feb 2017 11:40:08 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/05/file-upload-using-dopost-on-google-web-apps</guid>
      <description>

&lt;h1 id=&#34;file-upload-using-html-form-in-gas-project&#34;&gt;File upload using HTML form in GAS project&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Rule&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Following scripts have to be made into a project of Google Apps Script.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Deploy the GAS project as a web application. &lt;a href=&#34;https://developers.google.com/apps-script/guides/web&#34;&gt;Ref&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;After updated the script, it has to be updated as a new version.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Form.html :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;form&amp;gt;
      &amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;imageFile&amp;quot;&amp;gt;
      &amp;lt;input type=&amp;quot;button&amp;quot; value=&amp;quot;ok&amp;quot; onclick=&amp;quot;google.script.run.upload(this.parentNode)&amp;quot;&amp;gt;
    &amp;lt;/form&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;GAS :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function doGet() {
  return HtmlService.createHtmlOutputFromFile(&#39;Form.html&#39;);
}

function upload(e) {
  var destination_id = &#39;#####&#39;; // Folder ID of destination folder

  // Reference : https://developers.google.com/apps-script/reference/base/blob#getAs(String)
  // You can use &#39;application/pdf&#39;, &#39;image/bmp&#39;, &#39;image/gif&#39;, &#39;image/jpeg&#39; and &#39;image/png&#39;.
  var contentType = &#39;image/jpeg&#39;;
  var img = e.imageFile;

  var destination = DriveApp.getFolderById(destination_id);
  var img = img.getAs(contentType);
  destination.createFile(img);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you set &amp;lsquo;image/jpeg&amp;rsquo; as &amp;ldquo;contentType&amp;rdquo; and upload png file, the uploaded image file is converted to jpeg file and saved it to the destination folder.&lt;/p&gt;

&lt;h1 id=&#34;file-upload-from-local-pc&#34;&gt;File upload from local PC&lt;/h1&gt;

&lt;p&gt;For the Web API of Google HTML service, cannot &amp;ldquo;multipart/form-data&amp;rdquo; be used from local HTML form? Although I investigated it and tried various methods of file upload using &amp;ldquo;multipart/form-data&amp;rdquo;, all of them didn&amp;rsquo;t work. So I thought other method which is file upload without &amp;ldquo;multipart/form-data&amp;rdquo;. Of course, if you use Drive API, file upload can be easily done. But I wanted to achieve the file upload using Web API of Google HTML service. I think that this is self-satisfaction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rule&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Following GAS has to be made into a project of Google Apps Script.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Deploy the GAS project as a web application. &lt;a href=&#34;https://developers.google.com/apps-script/guides/web&#34;&gt;Ref&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;After updated the script, it has to be updated as a new version.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;GAS :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This script is very simple sample. It uploads image files of bmp, gif, jpeg, png and svg. When you want to upload other files, please change following script.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function doGet(e) {
  return message(&amp;quot;Error: no parameters&amp;quot;);
}

function doPost(e) {
  if (!e.parameters.filename || !e.parameters.file || !e.parameters.imageformat) {
    return message(&amp;quot;Error: Bad parameters&amp;quot;);
  } else {
    var imgf = e.parameters.imageformat[0].toUpperCase();
    var mime =
        (imgf == &#39;BMP&#39;)  ? MimeType.BMP
      : (imgf == &#39;GIF&#39;)  ? MimeType.GIF
      : (imgf == &#39;JPEG&#39;) ? MimeType.JPEG
      : (imgf == &#39;PNG&#39;)  ? MimeType.PNG
      : (imgf == &#39;SVG&#39;)  ? MimeType.SVG
      : false;
    if (mime) {
      var data = Utilities.base64Decode(e.parameters.file, Utilities.Charset.UTF_8);
      var blob = Utilities.newBlob(data, mime, e.parameters.filename);
      DriveApp.getFolderById(&#39;FOLDER ID&#39;).createFile(blob);
      return message(&amp;quot;completed&amp;quot;);
    } else {
      return message(&amp;quot;Error: Bad image format&amp;quot;);
    }
  }
}

function message(msg) {
  return ContentService.createTextOutput(JSON.stringify({result: msg})).setMimeType(ContentService.MimeType.JSON);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;curl :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -L \
    -F &#39;filename=[file name on Google Drive]&#39; \
    -F &#39;imageformat=[image format (bmp, gif, jpeg, png and svg)]&#39; \
    -F &amp;quot;file=`base64 [upload file]`&amp;quot; \
    &#39;[Current web app URL (https://script.google.com/macros/s/[Project ID]/exec)]&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using &amp;ldquo;doPost&amp;rdquo; of &lt;a href=&#34;https://developers.google.com/apps-script/guides/web&#34;&gt;Google Web Apps&lt;/a&gt;, files cannot be uploaded from local PC, while text data which isn&amp;rsquo;t a file can be uploaded. So I thought that it converted from image data to base64 data, and upload it. By this, it was found that various files can be uploaded from local HTML form using &amp;ldquo;doPost&amp;rdquo; of Google Web Apps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;html form :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;script src=&amp;quot;http://code.jquery.com/jquery-latest.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;input type=&amp;quot;file&amp;quot; id=&amp;quot;file&amp;quot;&amp;gt;

    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
        $(function(){
            var url = &#39;https://script.google.com/macros/s/[Project ID]/exec&#39;;
            var params = {
                filename: &#39;samplefile&#39;,
                imageformat: &#39;PNG&#39;
            };

            $(&#39;#file&#39;).on(&amp;quot;change&amp;quot;, function() {
                var file = this.files[0];
                var fr = new FileReader();
                fr.onload = function(e) {
                    params.file = e.target.result.replace(/^.*,/, &#39;&#39;);
                    postJump();
                }
                fr.readAsDataURL(file);
            });

            function postJump(){
                var html = &#39;&amp;lt;form method=&amp;quot;post&amp;quot; action=&amp;quot;&#39;+url+&#39;&amp;quot; id=&amp;quot;postjump&amp;quot; style=&amp;quot;display: none;&amp;quot;&amp;gt;&#39;;
                Object.keys(params).forEach(function (key) {
                    html += &#39;&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;&#39;+key+&#39;&amp;quot; value=&amp;quot;&#39;+params[key]+&#39;&amp;quot; &amp;gt;&#39;;
                });
                html += &#39;&amp;lt;/form&amp;gt;&#39;;
                $(&amp;quot;body&amp;quot;).append(html);
                $(&#39;#postjump&#39;).submit();
                $(&#39;#postjump&#39;).remove();
            }
        });
    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Retrieving cells without blank using GAS</title>
      <link>https://tanaikech.github.io/2017/02/03/retrieving-cells-without-blank-using-gas</link>
      <pubDate>Fri, 03 Feb 2017 10:14:25 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/03/retrieving-cells-without-blank-using-gas</guid>
      <description>

&lt;p&gt;This is a sample script for retrieving cells without blank cells. Figure 1 shows the sample spreadsheet. In this sheet, &lt;u&gt;the row 14 has one space.&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://tanaikech.github.io/img/fig170203a.png&#34; alt=&#34;&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Fig. 1: Sample spreadsheet.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Data is retrieved as follows.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  var data = SpreadsheetApp
             .getActiveSpreadsheet()
             .getActiveSheet()
             .getRange(&#39;a1:a30&#39;)
             .getValues();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;1-retrieving-cells-with-spaces-and-no-blank-cells&#34;&gt;1. Retrieving cells with spaces and no blank cells.&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;  var Result = [i for each (i in data)if (i)].join(&#39;&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Result : Hello World&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-retrieving-cells-without-both-spaces-and-blank-cells&#34;&gt;2. Retrieving cells without both spaces and blank cells.&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;  var Result = [i for each (i in data)if (isNaN(i))].join(&#39;&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Result : HelloWorld&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>