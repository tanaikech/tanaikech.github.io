<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spreadsheet on tanaike</title>
    <link>https://tanaikech.github.io/tags/spreadsheet/</link>
    <description>Recent content in Spreadsheet on tanaike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Mon, 31 Jul 2017 14:38:28 +0900</lastBuildDate>
    
	<atom:link href="https://tanaikech.github.io/tags/spreadsheet/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Converting a1Notation to GridRange for Google Sheets API</title>
      <link>https://tanaikech.github.io/2017/07/31/converting-a1notation-to-gridrange-for-google-sheets-api/</link>
      <pubDate>Mon, 31 Jul 2017 14:38:28 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/07/31/converting-a1notation-to-gridrange-for-google-sheets-api/</guid>
      <description>Gists
When it uses Google Sheets API v4, GridRange is used for it as the range property. These sample scripts are for converting from a1Notation to GridRange. You can chose from following 2 scripts. Both scripts can retrieve the same result.
Script 1 : This is from me.
function a1notation2gridrange1(sheetid, a1notation) { var data = a1notation.match(/(^.+)!(.+):(.+$)/); var ss = SpreadsheetApp.openById(sheetid).getSheetByName(data[1]); var range = ss.getRange(data[2] + &amp;quot;:&amp;quot; + data[3]); var gridRange = { sheetId: ss.</description>
    </item>
    
    <item>
      <title>Pseudo Browser with Google Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/07/05/pseudo-browser-with-google-spreadsheet/</link>
      <pubDate>Wed, 05 Jul 2017 16:45:01 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/07/05/pseudo-browser-with-google-spreadsheet/</guid>
      <description>Gist
Overview This is a sample script for creating the pseudo browser using Google Spreadsheet.
Description I unexpectedly noticed this. I think that this is for off-line browsing using HTML data. So there are many limitations. At first, please confirm them.
 Limitations  It cannot move from opened site to other outside site. If the outer site is opened as a new wind, your own browser is opened and move there.</description>
    </item>
    
    <item>
      <title>Search Route and Embedding Map using Custom Function on Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/06/14/search-route-and-embedding-map-using-custom-function-on-spreadsheet/</link>
      <pubDate>Wed, 14 Jun 2017 17:35:47 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/14/search-route-and-embedding-map-using-custom-function-on-spreadsheet/</guid>
      <description>This sample script is for searching route between place A and B and embedding a map by custom function on Spreadsheet.
I think that this method is one of various ideas.
Problem When the map is embedded to a cell on spreadsheet as an image, the function =IMAGE() is suitable for this situation. However, Class Maps, setFormula() for importing =IMAGE() and DriveApp.createFile() for creating images from maps also cannot be used for custom functions.</description>
    </item>
    
    <item>
      <title>Giving and Retrieving Parameters for Chart at GAS</title>
      <link>https://tanaikech.github.io/2017/06/12/giving-and-retrieving-parameters-for-chart-at-gas/</link>
      <pubDate>Mon, 12 Jun 2017 11:11:06 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/12/giving-and-retrieving-parameters-for-chart-at-gas/</guid>
      <description>This sample script is for retrieving parameters from a chart. The chart created by both Google Apps Script and manually operation can be used.
Creates Chart When a chart is created, it supposes following parameters.
var parameters = { &amp;quot;title&amp;quot;: &amp;quot;x axis&amp;quot;, &amp;quot;fontName&amp;quot;: &amp;quot;Arial&amp;quot;, &amp;quot;minValue&amp;quot;: 0, &amp;quot;maxValue&amp;quot;: 100, &amp;quot;titleTextStyle&amp;quot;: { &amp;quot;color&amp;quot;: &amp;quot;#c0c0c0&amp;quot;, &amp;quot;fontSize&amp;quot;: 10, &amp;quot;fontName&amp;quot;: &amp;quot;Roboto&amp;quot;, &amp;quot;italic&amp;quot;: true, &amp;quot;bold&amp;quot;: false } }; .setOption(&#39;hAxis&#39;, parameters)  Retrieve Parameters From Chart For the chart created by above parameters, in order to retrieve the parameters, it uses following script.</description>
    </item>
    
    <item>
      <title>Embedding Animation GIF in A Cell on Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/06/06/embedding-animation-gif-in-a-cell-on-spreadsheet/</link>
      <pubDate>Tue, 06 Jun 2017 16:47:41 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/06/embedding-animation-gif-in-a-cell-on-spreadsheet/</guid>
      <description>This sample script is for embedding animation GIF in a cell using custom function on Spreadsheet.
I think that this method is one of various ideas.
Problem There are some limitations.
 Images of jpeg and png can be embedded in a cell using =IMAGE(). But when animation GIF is embedded using it, GIF is not played. insertImage() can insert the animation GIF to sheet. But it is not imported to one cell.</description>
    </item>
    
    <item>
      <title>OCR using Custom Function on Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/06/06/ocr-using-custom-function-on-spreadsheet/</link>
      <pubDate>Tue, 06 Jun 2017 07:53:57 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/06/ocr-using-custom-function-on-spreadsheet/</guid>
      <description>This sample script performs OCR and imports resultant text to a cell using custom function on Spreadsheet.
Drive API has a function to do OCR. It was used for this sample.
I think that this method is one of various ideas.
Problem When OCR is performed and imported the result to a cell on spreadsheet, there are some limitations. DriveApp, UrlFetchApp, setFormula() cannot be used for custom functions.
Solution In order to avoid these limitations, I used Web Apps.</description>
    </item>
    
    <item>
      <title>Embedding a Map to a Cell using Custom Function on Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/06/04/embedding-a-map-to-a-cell-using-custom-function-on-spreadsheet/</link>
      <pubDate>Sun, 04 Jun 2017 12:02:28 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/04/embedding-a-map-to-a-cell-using-custom-function-on-spreadsheet/</guid>
      <description>This sample script embeds a map to a cell using custom function on Spreadsheet.
I think that this method is one of various ideas.
Problem When the map is embeded to a cell on spreadsheet as an image, the function =IMAGE() is suitable for this situation. However, setFormula() for importing =IMAGE() and DriveApp.createFile() for creating images from maps also cannot be used for custom functions.
Solution In order to avoid these limitations, I used Web Apps.</description>
    </item>
    
    <item>
      <title>Embedding a Chart to a Cell using Custom Function on Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/05/26/embedding-a-chart-to-a-cell-using-custom-function-on-spreadsheet/</link>
      <pubDate>Fri, 26 May 2017 11:59:06 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/26/embedding-a-chart-to-a-cell-using-custom-function-on-spreadsheet/</guid>
      <description>This sample script embeds a chart to a cell using custom function on Spreadsheet.
I think that this method is one of various ideas.
Problem When you want to create a chart and embed it to a cell using custom functions, you notice that insertChart() cannot be used. There are some limitations for using custom functions. But insertChart() creates floating charts. So in order to embed a chart to a cell, the function =IMAGE() is suitable for this situation.</description>
    </item>
    
    <item>
      <title>Changing Line to Bars for Combo Chart using GAS</title>
      <link>https://tanaikech.github.io/2017/05/16/changing-line-to-bars-for-combo-chart-using-gas/</link>
      <pubDate>Tue, 16 May 2017 11:42:56 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/16/changing-line-to-bars-for-combo-chart-using-gas/</guid>
      <description>Sample data This is a sample data for this sample script. The column B was created by the normal distribution formula, and the column C was created by multiplying random number for column B.
A, B, C 1.0, 0.0001, 0.0000 1.5, 0.0009, 0.0006 2.0, 0.0044, 0.0037 2.5, 0.0175, 0.0133 3.0, 0.0540, 0.0236 3.5, 0.1296, 0.0533 4.0, 0.2420, 0.0073 4.5, 0.3522, 0.2468 5.0, 0.3990, 0.0843 5.5, 0.3522, 0.3352 6.0, 0.2420, 0.</description>
    </item>
    
    <item>
      <title>Sending E-mail When Spreadsheet was Edited from Outside by Sheet API</title>
      <link>https://tanaikech.github.io/2017/05/14/sending-e-mail-when-spreadsheet-was-edited-from-outside-by-sheet-api/</link>
      <pubDate>Sun, 14 May 2017 17:43:52 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/14/sending-e-mail-when-spreadsheet-was-edited-from-outside-by-sheet-api/</guid>
      <description>This sample script sends an e-mail, when spreadsheet was edited from outside by Sheet API v4. When you use this sample, please create a container bound script with spreadsheet which is edited by Sheet API. And please input your e-mail and run firstly a method of createTrigger(). By this, a trigger is installed as onChange(). After this, edit spreadsheet from outside by Sheet API v4.
When when spreadsheet was edited from outside by Sheet API v4, I used sendEmail() as a sample, because script editor is closed.</description>
    </item>
    
    <item>
      <title>Retrieving User Information with Shared Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/04/27/retrieving-user-information-with-shared-spreadsheet/</link>
      <pubDate>Thu, 27 Apr 2017 14:34:22 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/04/27/retrieving-user-information-with-shared-spreadsheet/</guid>
      <description>This sample script retrieves the user information which is editing the shared spreadsheet.
It was found as follows.
 User information retrieving by Class Session is the owner and users which installed triggers by themselves. When each user installs a trigger, user information retrieving by Class Session losts the accuracy. So user information has to be retrieved using a temporally installed trigger. Using onOpen(), it cannot directly install triggers and authorize.</description>
    </item>
    
    <item>
      <title>Send E-mail with Excel file converted from Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/02/16/send-e-mail-with-excel-file-converted-from-spreadsheet/</link>
      <pubDate>Thu, 16 Feb 2017 11:53:50 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/16/send-e-mail-with-excel-file-converted-from-spreadsheet/</guid>
      <description>This sample script sends an e-mail with an Excel file exported from Spreadsheet as an attachment file.
function excelSender() { var sheetID = [Sheet ID]; var xlsxName = [Excel file name]; var params = { &amp;quot;headers&amp;quot; : {Authorization: &amp;quot;Bearer [Retrieved AccessToken]&amp;quot;}, &amp;quot;muteHttpExceptions&amp;quot; : true }; var dUrl = &amp;quot;https://www.googleapis.com/drive/v3/files/&amp;quot; + sheetID + &amp;quot;/export?mimeType=application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&amp;quot; var xlsxlFile = UrlFetchApp.fetch(dUrl, params).getBlob().setName(xlsxName); MailApp.sendEmail({ to: [Mail address], subject: &amp;quot;sample subject&amp;quot;, body: &amp;quot;sample body&amp;quot;, attachments: [xlsxlFile] }); }  Is ScriptApp.</description>
    </item>
    
    <item>
      <title>Download a CSV File from Spreadsheet Using Google HTML Service</title>
      <link>https://tanaikech.github.io/2017/02/16/download-a-csv-file-from-spreadsheet-using-google-html-service/</link>
      <pubDate>Thu, 16 Feb 2017 10:31:37 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/16/download-a-csv-file-from-spreadsheet-using-google-html-service/</guid>
      <description>Here, I introduce how to download a CSV file from spreadsheet using Google HTML Service.
 Using &amp;ldquo;onOpen()&amp;rdquo;, it addes menu for launching a dialog.   After launching the dialog, &amp;ldquo;getFileUrl()&amp;rdquo; is launched by pushing a button. &amp;ldquo;getFileUrl()&amp;rdquo; exports a CSV file and outputs download URL.
 The CSV file is downloaded by &amp;ldquo;executeDownload()&amp;rdquo;.
  Please put both HTML and GAS to a GAS project.
HTML : download.</description>
    </item>
    
    <item>
      <title>Making charts at spreadsheet</title>
      <link>https://tanaikech.github.io/2017/02/13/making-charts-at-spreadsheet/</link>
      <pubDate>Mon, 13 Feb 2017 08:57:58 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/13/making-charts-at-spreadsheet/</guid>
      <description>var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet(); var chart = sheet.newChart() .setChartType(Charts.ChartType.LINE) .asLineChart() .addRange(sheet.getRange(&#39;a1:a21&#39;)) .addRange(sheet.getRange(&#39;b1:b21&#39;)) .addRange(sheet.getRange(&#39;c1:c21&#39;)) .setColors([&amp;quot;green&amp;quot;, &amp;quot;red&amp;quot;]) .setBackgroundColor(&amp;quot;black&amp;quot;) .setPosition(5, 5, 0, 0) .setPointStyle(Charts.PointStyle.MEDIUM) .setOption(&#39;useFirstColumnAsDomain&#39;, true) .setOption(&#39;height&#39;, 280) .setOption(&#39;width&#39;, 480) .setOption(&#39;title&#39;, &#39;Sample chart&#39;) .setOption(&#39;hAxis&#39;, { title: &#39;x axis&#39;, minValue: 0, maxValue: 20, titleTextStyle: { color: &#39;#c0c0c0&#39;, fontSize: 20, italic: false, bold: false }, textStyle: { color: &#39;#c0c0c0&#39;, fontSize: 12, bold: false, italic: false }, baselineColor: &#39;#c0c0c0&#39;, gridlines: { color: &#39;#c0c0c0&#39;, count: 4 } }) .</description>
    </item>
    
    <item>
      <title>Sample Array Script for Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/02/08/sample-array-script-for-spreadsheet/</link>
      <pubDate>Wed, 08 Feb 2017 08:50:38 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/08/sample-array-script-for-spreadsheet/</guid>
      <description>This is a Sample Array Script for Spreadsheet. It makes an 2D array filled by strings and number. The strings and number are column strings and row number, respectively.
However, because this is a sample, the maximum column number is 26.
function sa(row, col){ if (col &amp;gt; 26) return; var ar = new Array(row); for(var i = 0; i &amp;lt; row; i++) ar[i] = new Array(col); for (var i = 0; i &amp;lt; row; i++){ for (var j = 0; j &amp;lt; col; j++){ ar[i][j] = String.</description>
    </item>
    
    <item>
      <title>Event of onEdit() for Google spreadsheet</title>
      <link>https://tanaikech.github.io/2017/02/07/event-of-onedit-for-google-spreadsheet/</link>
      <pubDate>Tue, 07 Feb 2017 11:03:56 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/07/event-of-onedit-for-google-spreadsheet/</guid>
      <description>About Event Objects For example, it thinks the situation of input text of &amp;lsquo;test&amp;rsquo; to &amp;lsquo;A1&amp;rsquo; on a sheet.
When you use only &amp;lsquo;onEdit(e)&amp;rsquo; without an installing trigger, &amp;lsquo;e&amp;rsquo; has following parameters.
{authMode=LIMITED, range=Range, source=Spreadsheet, user=, value=test}  In this case, the event cannot send an e-mail because of &amp;lsquo;authMode=LIMITED&amp;rsquo;.
When you use &amp;ldquo;onEdit(e)&amp;rdquo; with an installing trigger of &amp;ldquo;Edit&amp;rdquo;, &amp;lsquo;e&amp;rsquo; has following parameters.
{authMode=FULL, range=Range, source=Spreadsheet, value=test, triggerUid=#####}  In this case, the event can send an e-mail because of &amp;lsquo;authMode=FULL&amp;rsquo;.</description>
    </item>
    
  </channel>
</rss>