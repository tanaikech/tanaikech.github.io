<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spreadsheet on tanaike</title>
    <link>https://tanaikech.github.io/tags/spreadsheet/</link>
    <description>Recent content in spreadsheet on tanaike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Thu, 29 Feb 2024 11:22:34 +0900</lastBuildDate><atom:link href="https://tanaikech.github.io/tags/spreadsheet/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Similarity Viewer using Gemini API with Google Spreadsheet and Google Apps Script</title>
      <link>https://tanaikech.github.io/2024/02/29/similarity-viewer-using-gemini-api-with-google-spreadsheet-and-google-apps-script/</link>
      <pubDate>Thu, 29 Feb 2024 11:22:34 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2024/02/29/similarity-viewer-using-gemini-api-with-google-spreadsheet-and-google-apps-script/</guid>
      <description>Gists
Abstract The Gemini API enables both content generation and semantic search, managing data effectively. This report introduces a Gemini-powered similarity viewer for easy visualization of complex text similarity scores, using Google Spreadsheet and Apps Script.
Introduction The Gemini API unlocks new possibilities, extending its capabilities beyond content generation to encompass semantic search. Within this context, the API excels at efficiently managing data within corpora. While semantic search provides valuable similarity scores (chunkRelevanceScore) for text pairs, interpreting these numerical values can be cumbersome.</description>
    </item>
    
    <item>
      <title>Allowing Access by IMPORTHTML, IMPORTDATA, IMPORTFEED, IMPORTXML, and IMPORTRANGE on Google Spreadsheet with Google Apps Script</title>
      <link>https://tanaikech.github.io/2024/02/25/allowing-access-by-importhtml-importdata-importfeed-importxml-and-importrange-on-google-spreadsheet-with-google-apps-script/</link>
      <pubDate>Sun, 25 Feb 2024 14:00:49 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2024/02/25/allowing-access-by-importhtml-importdata-importfeed-importxml-and-importrange-on-google-spreadsheet-with-google-apps-script/</guid>
      <description>Gists
Abstract This is a sample script for enabling &amp;ldquo;Allow Access&amp;rdquo; for IMPORTHTML, IMPORTDATA, IMPORTFEED, IMPORTXML, IMAGE and IMPORTRANGE functions in Google Apps Script.
Description Using the IMPORTRANGE function in Google Sheets requires granting permission to access data within the spreadsheet. As you know, this has always been the case. However, I recently noticed that permission requirements have been expanded to include IMPORTHTML, IMPORTDATA, IMPORTFEED, IMPORTXML, and IMAGE. Source
Currently, entering a formula like IMPORTXML into a cell triggers a warning message as shown in the top image:</description>
    </item>
    
    <item>
      <title>Updated: GAS Library - DocsServiceApp</title>
      <link>https://tanaikech.github.io/2024/01/30/updated-gas-library-docsserviceapp/</link>
      <pubDate>Tue, 30 Jan 2024 20:41:29 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2024/01/30/updated-gas-library-docsserviceapp/</guid>
      <description>DocsServiceApp was updated to v1.2.2   v1.2.2 (January 30, 2024)
 Remove a bug in ExcelApp. When the inserted image had no data, an error occurred. This issue was removed.    You can see the detail information here https://github.com/tanaikech/DocsServiceApp</description>
    </item>
    
    <item>
      <title>Creating Dining Reservation System using Google Apps Script</title>
      <link>https://tanaikech.github.io/2024/01/22/creating-dining-reservation-system-using-google-apps-script/</link>
      <pubDate>Mon, 22 Jan 2024 10:53:47 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2024/01/22/creating-dining-reservation-system-using-google-apps-script/</guid>
      <description>Gists
Abstract Google Apps Script automates tasks (even offline) and builds web apps using spreadsheets as databases. This report presents a basic dining reservation system to illustrate key aspects of web app development with Apps Script, HTML, and Javascript.
Introduction Google Apps Script is one of the powerful automation tools for achieving the automation process. When Google Apps Script can be used for the situation, even when users are away from their computers, automation can continue thanks to cloud computing.</description>
    </item>
    
    <item>
      <title>Inserting Generated Text to Google Documents, Google Spreadsheets, and Google Slides using Gemini Pro API with Google Apps Script</title>
      <link>https://tanaikech.github.io/2023/12/22/inserting-generated-text-to-google-documents-google-spreadsheets-and-google-slides-using-gemini-pro-api-with-google-apps-script/</link>
      <pubDate>Fri, 22 Dec 2023 15:14:18 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/12/22/inserting-generated-text-to-google-documents-google-spreadsheets-and-google-slides-using-gemini-pro-api-with-google-apps-script/</guid>
      <description>Gists
Description When the generated text can be automatically inserted into the cursor position of Google Document, Google Spreadsheet, and Google Slide, it will be useful for users. This report introduces sample scripts for achieving this.
Sample scripts Here, I would like to introduce 3 sample scripts for a Google Document, a Google Spreadsheet, and a Google Slide.
Create an API key These sample scripts request Gemini Pro API using an API key.</description>
    </item>
    
    <item>
      <title>Technique for Managing Rich Text on Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2023/11/28/technique-for-managing-rich-text-on-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Tue, 28 Nov 2023 15:57:51 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/11/28/technique-for-managing-rich-text-on-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
Abstract One day, you might have a situation where you are required to manage rich texts in Google Spreadsheet using Google Apps Script. In this report, I would like to introduce the basic technique for managing rich texts with Google Apps Script.
Introduction At Google Spreadsheet, rich texts can be used as a cell value. The rich texts can be also managed by Google Apps Script. Ref When I saw the official document related to the rich texts with Google Apps Script, I&amp;rsquo;m worried that it might be difficult a little for users to manage the rich texts using Google Apps Script.</description>
    </item>
    
    <item>
      <title>Workaround: Making Users Edit Protected Cells using Google Apps Script</title>
      <link>https://tanaikech.github.io/2023/11/24/workaround-making-users-edit-protected-cells-using-google-apps-script/</link>
      <pubDate>Fri, 24 Nov 2023 09:30:50 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/11/24/workaround-making-users-edit-protected-cells-using-google-apps-script/</guid>
      <description>Gists
Abstract One day, you might have a situation where you are required to make users edit the protected cells using Google Apps Script. This report introduces a workaround for achieving this situation. The key factors for achieving this are as follows. 1. Run the script as the owner of Spreadsheet even when the script is run by a user. 2. In order to run the script as the owner, the installable triggers and the Web Apps are used.</description>
    </item>
    
    <item>
      <title>Technique of Array Processing for Custom Functions on Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2023/11/20/technique-of-array-processing-for-custom-functions-on-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Mon, 20 Nov 2023 10:53:20 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/11/20/technique-of-array-processing-for-custom-functions-on-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
Description At Google Spreadsheet, custom functions created by Google Apps Script can be used. Ref When the custom function is used, the users can create a function for expanding the built-in functions for Spreadsheet. One day, you might have a situation for executing the custom function using an array. For example, under the situation that your custom function uses a single value instead of an array as the argument, when you want to use an array for each argument of the custom function, it is required to modify the original script of the custom function or the function calling the custom function.</description>
    </item>
    
    <item>
      <title>Technique for Processing Google Spreadsheet Including Merged Cells using Google Apps Script</title>
      <link>https://tanaikech.github.io/2023/11/13/technique-for-processing-google-spreadsheet-including-merged-cells-using-google-apps-script/</link>
      <pubDate>Mon, 13 Nov 2023 09:04:51 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/11/13/technique-for-processing-google-spreadsheet-including-merged-cells-using-google-apps-script/</guid>
      <description>Gists
Description At Google Spreadsheet, the cells can be merged as one cell. But, when the Spreadsheet including the merged cells is used with Google Apps Script, the script becomes a bit complicated. Also, I sometimes find some questions like this situation on Stackoverflow. In this report, I would like to introduce a technique for easily using the Spreadsheet including the merged cells with Google Apps Script.
Principle Before it introduces the sample scripts, I would like to introduce the principle for using the Spreadsheet for the merged cells.</description>
    </item>
    
    <item>
      <title>Uploading Files without Authorizing Scopes by Shared Users with Dialog on Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2023/11/08/uploading-files-without-authorizing-scopes-by-shared-users-with-dialog-on-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Wed, 08 Nov 2023 15:25:34 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/11/08/uploading-files-without-authorizing-scopes-by-shared-users-with-dialog-on-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
Abstract One day, you might have a situation where you are required to make the shared users upload a file and text using a dialog or sidebar on Google Spreadsheet to your Google Drive and Spreadsheet without authorization by the users. This report introduces a solution for achieving this situation.
Introduction Google Spreadsheet can run Javascript on a dialog and a sidebar. Ref These can be used as a strong tool for working on Spreadsheet.</description>
    </item>
    
    <item>
      <title>Workaround: Detecting Change of IMPORTRANGE using OnEdit trigger with Google Apps Script</title>
      <link>https://tanaikech.github.io/2023/10/30/workaround-detecting-change-of-importrange-using-onedit-trigger-with-google-apps-script/</link>
      <pubDate>Mon, 30 Oct 2023 16:10:54 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/10/30/workaround-detecting-change-of-importrange-using-onedit-trigger-with-google-apps-script/</guid>
      <description>Gists
Abstract One day, you might have a situation where you are required to update a sheet using Google Apps Script when the cell values retrieved by IMPORTRANGE are changed. This report introduces a workaround for achieving this situation.
Introduction Google Apps Script can be executed by several triggers. Ref When a cell in a Google Spreadsheet is manually edited, a function of Google Apps Script can be executed by detecting this edit.</description>
    </item>
    
    <item>
      <title>Retrieve Comments with Emoji Reactions from Google Documents, Google Slides, and Google Spreadsheets using Google Apps Script</title>
      <link>https://tanaikech.github.io/2023/10/26/retrieve-comments-with-emoji-reactions-from-google-documents-google-slides-and-google-spreadsheets-using-google-apps-script/</link>
      <pubDate>Thu, 26 Oct 2023 15:44:42 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/10/26/retrieve-comments-with-emoji-reactions-from-google-documents-google-slides-and-google-spreadsheets-using-google-apps-script/</guid>
      <description>Gists
Abstract This report introduces the method for retrieving the Emoji reactions from the comments in Google Docs files (Google Documents, Google Slides, and Google Spreadsheets) using Google Apps Script.
Introduction Recently, the Emoji reactions have been implemented in the comments on Google Docs files (Google Documents, Google Slides, and Google Spreadsheets). Ref With this implementation, the collaborative work has been higher. Here, it is considered that when the Emoji reactions can be retrieved from the Google Docs files, the statistics of the reactions will be also more useful for increasing collaboration.</description>
    </item>
    
    <item>
      <title>Updated: GAS Library - HtmlFormApp</title>
      <link>https://tanaikech.github.io/2023/10/17/updated-gas-library-htmlformapp/</link>
      <pubDate>Tue, 17 Oct 2023 10:46:54 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/10/17/updated-gas-library-htmlformapp/</guid>
      <description>HtmlFormApp was updated to v1.0.2.   v1.0.2 (October 17, 2023)
  The 2nd argument row of appendFormData(object, row) was added. This is from this suggestion. When row is used, the value is put into the specific row of the Spreadsheet. In this case, please set the value of row more than 1.
 In this case, the submitted row can be forcefully put into the specific row of Google Spreadsheet.</description>
    </item>
    
    <item>
      <title>Copy Date Object between Google Spreadsheets with Different Timezone using Google Apps Script</title>
      <link>https://tanaikech.github.io/2023/09/03/copy-date-object-between-google-spreadsheets-with-different-timezone-using-google-apps-script/</link>
      <pubDate>Sun, 03 Sep 2023 16:26:36 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/09/03/copy-date-object-between-google-spreadsheets-with-different-timezone-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for copying the date object between Google Spreadsheets with the different time zones using Google Apps Script.
One day, you might have a situation in which it is required to copy the date object between Google Spreadsheets with the different time zones using Google Apps Script. In this post, I would like to introduce the sample scripts for achieving this.
Sample situation Here, the sample situation is declared.</description>
    </item>
    
    <item>
      <title>Focusing Selected Cell to Top Left on Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2023/08/31/focusing-selected-cell-to-top-left-on-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Thu, 31 Aug 2023 10:22:50 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/08/31/focusing-selected-cell-to-top-left-on-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for moving the selected cell to the top left on Google Spreadsheet to focus it using Google Apps Script.
One day, there might be a case where you are required to focus the specific cell on Google Spreadsheet to help edit cells. In this post, I would like to introduce a sample script for achieving this.
Sample script Please copy and paste the following script to the script editor of Google Spreadsheet, and save the script.</description>
    </item>
    
    <item>
      <title>Benchmark: Efficiently Deleting Rows by Conditions on Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2023/08/13/benchmark-efficiently-deleting-rows-by-conditions-on-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Sun, 13 Aug 2023 15:51:49 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/08/13/benchmark-efficiently-deleting-rows-by-conditions-on-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
Description In this report, I would like to introduce a sample script for efficiently deleting rows by conditions on Google Spreadsheet using Google Apps Script. Recently, I had a situation for being required to achieve this situation. In my report, it has already known that when Sheets API is used, the rows can be efficiently deleted by a condition. Ref However, in that case, Sheets API couldn&amp;rsquo;t be used. Under this situation, I came up with a method.</description>
    </item>
    
    <item>
      <title>Overwrapped Cells on Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2023/07/24/overwrapped-cells-on-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Mon, 24 Jul 2023 09:00:03 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/07/24/overwrapped-cells-on-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for checking the overwrapped cells of multiple ranges on Google Spreadsheet using Google Apps Script.
When applications are developed, there might be a case that it is required to confirm whether 2 ranges on Google Spreadsheet are overwrapped. In this post, I would like to introduce a sample script for achieving this.
Method: getOverwrappedCells The following script is a method of getOverwrappedCells. This is the main script of this post.</description>
    </item>
    
    <item>
      <title>Automatically Refreshing Basic Filter on Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2023/07/20/automatically-refreshing-basic-filter-on-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Thu, 20 Jul 2023 14:18:42 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/07/20/automatically-refreshing-basic-filter-on-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for automatically refreshing the basic filter on Google Spreadsheet using Google Apps Script.
Description A sample situation is as follows.
In this sample, the basic filter is set to columns &amp;ldquo;B&amp;rdquo; and &amp;ldquo;D&amp;rdquo;.
 Column &amp;ldquo;B&amp;rdquo;: When the checkbox is checked, the row is hidden. Column &amp;ldquo;D&amp;rdquo;: When the cell value is multiples of 3, the row is hidden. In this case, the custom function =MOD(E2,3)&amp;lt;&amp;gt;0 is used.</description>
    </item>
    
    <item>
      <title>Copying Google Spreadsheet by Removing Container-Bound Script Using Google Apps Script</title>
      <link>https://tanaikech.github.io/2023/07/07/copying-google-spreadsheet-by-removing-container-bound-script-using-google-apps-script/</link>
      <pubDate>Fri, 07 Jul 2023 11:06:22 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/07/07/copying-google-spreadsheet-by-removing-container-bound-script-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for copying a Google Spreadsheet including a container-bound script by removing the container-bound script using Google Apps Script.
When you want to copy a Google Google Spreadsheet including a container-bound script by removing the container-bound script using Google Apps Script, this could be achieved by using &amp;ldquo;get&amp;rdquo; and &amp;ldquo;create&amp;rdquo; methods of Sheets API before. The sample script is as follows.
const obj = Sheets.Spreadsheets.get(  SpreadsheetApp.</description>
    </item>
    
    <item>
      <title>Converting Relative Reference to Absolute Reference and vice versa of A1Notation on Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2023/06/27/converting-relative-reference-to-absolute-reference-and-vice-versa-of-a1notation-on-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Tue, 27 Jun 2023 11:56:59 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/06/27/converting-relative-reference-to-absolute-reference-and-vice-versa-of-a1notation-on-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for converting the relative reference to the absolute reference and vice versa of A1Notation on Google Spreadsheet using Google Apps Script.
Description A1Notation is used in the cells on Google Spreadsheet.
As the 1st sample, it supposes that a formula of =A1 is put into a cell &amp;ldquo;B1&amp;rdquo;. Under this condition, when the cell &amp;ldquo;B1&amp;rdquo; is copied to &amp;ldquo;B2&amp;rdquo; and &amp;ldquo;C1&amp;rdquo;, the cells &amp;ldquo;B2&amp;rdquo; and &amp;ldquo;C1&amp;rdquo; have the formulas of =A2 and =B1, respectively.</description>
    </item>
    
    <item>
      <title>Retrieving Release Notes of Google Apps Script and Google APIs from RSS using Google Apps Script</title>
      <link>https://tanaikech.github.io/2023/06/17/retrieving-release-notes-of-google-apps-script-and-google-apis-from-rss-using-google-apps-script/</link>
      <pubDate>Sat, 17 Jun 2023 15:45:42 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/06/17/retrieving-release-notes-of-google-apps-script-and-google-apis-from-rss-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for retrieving the release notes of Google Apps Script and Google APIs from RSS using Google Apps Script.
Recently, the release notes of Google Apps Script and Google APIs have been published as RSS. By this, the data got to be able to be easily retrieved using XmlService of Google Apps Script. Knowing the latest release notes will be useful for developing the applications. So, I would like to introduce the sample script for retrieving this information.</description>
    </item>
    
    <item>
      <title>Report: Easily Implementing HTML Form with Google Spreadsheet as Database using Google Apps Script</title>
      <link>https://tanaikech.github.io/2023/05/31/report-easily-implementing-html-form-with-google-spreadsheet-as-database-using-google-apps-script/</link>
      <pubDate>Wed, 31 May 2023 10:02:05 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/05/31/report-easily-implementing-html-form-with-google-spreadsheet-as-database-using-google-apps-script/</guid>
      <description>Gists
Abstract This report introduces the method for easily implementing HTML forms with a Google Spreadsheet as a database using Google Apps Script. There are 2 patterns for the HTML form using Google Apps Script. One is that an HTML form is put into the same Google Apps Script project. Another is that an HTML form is put to a different server from a Google Apps Script project. In this report, the methods for easily implementing both patterns are introduced using the sample scripts.</description>
    </item>
    
    <item>
      <title>Updated: GAS Library - HtmlFormApp</title>
      <link>https://tanaikech.github.io/2023/05/29/updated-gas-library-htmlformapp/</link>
      <pubDate>Mon, 29 May 2023 10:23:42 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/05/29/updated-gas-library-htmlformapp/</guid>
      <description>HtmlFormApp was updated to v1.0.1.   v1.0.1 (May 29, 2023)
 When multiple files are uploaded, each URL was set as the hyperlink.    You can see the detail information here https://github.com/tanaikech/HtmlFormApp</description>
    </item>
    
    <item>
      <title>Converting Google Spreadsheet to HTML Table using Google Apps Script</title>
      <link>https://tanaikech.github.io/2023/05/21/converting-google-spreadsheet-to-html-table-using-google-apps-script/</link>
      <pubDate>Sun, 21 May 2023 14:44:47 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/05/21/converting-google-spreadsheet-to-html-table-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for converting Google Spreadsheet to an HTML table using Google Apps Script.
There is the case that it is required to convert a sheet in a Google Spreadsheet to an HTML table. For example, there might be a situation that a sheet in a Google Spreadsheet is sent as an email including an HTML table. And, there might be a situation in which a sheet in a Google Spreadsheet is published to an HTML page including the converted HTML table.</description>
    </item>
    
    <item>
      <title>Unpivot on Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2023/05/11/unpivot-on-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Thu, 11 May 2023 11:36:32 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/05/11/unpivot-on-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for converting the values on Google Spreadsheet as unpivot (reverse pivot) using Google Apps Script.
Sample script 1: const SAMPLE1 = ([[, ...header], ...values]) =&amp;gt;  header.flatMap((h, i) =&amp;gt; values.map((t) =&amp;gt; [h, t[0], t[i + 1]]));  In the sample, the source data is &amp;ldquo;A1:D8&amp;rdquo;. And, a custom function of =SAMPLE1(A1:D8) is put into &amp;ldquo;F1&amp;rdquo;. When this script is used, the result showing the above image (most left table to middle table) is obtained.</description>
    </item>
    
    <item>
      <title>Best Practices for Discontinuous Cells on Google Spreadsheet by Google Apps Script</title>
      <link>https://tanaikech.github.io/2023/05/01/best-practices-for-discontinuous-cells-on-google-spreadsheet-by-google-apps-script/</link>
      <pubDate>Mon, 01 May 2023 09:18:33 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/05/01/best-practices-for-discontinuous-cells-on-google-spreadsheet-by-google-apps-script/</guid>
      <description>Gists
Abstract It has already been known that Google Apps Script is a strong tool for managing Google Spreadsheets. When the values are retrieved and/or put for Google Spreadsheet, there is a case that the discontinuous cells are required to be used. This report suggests the Best Practices for processing the discontinuous cells on Google Spreadsheet. From the results of process costs, it could understand the usefulness of using the discontinuous cells with low cost using Sheets API and Class RangeList of Spreadsheet service with Google Apps Script.</description>
    </item>
    
    <item>
      <title>Putting Image into Cell of Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2023/04/17/putting-image-into-cell-of-spreadsheet-using-google-apps-script/</link>
      <pubDate>Mon, 17 Apr 2023 09:41:03 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/04/17/putting-image-into-cell-of-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
These are sample scripts for putting an image into a cell of a Spreadsheet using Google Apps Script.
Sample 1 In this sample, the image is put into a cell using thumbnailLink retrieved by Drive API. So, when you test this, please enable Drive API at Advanced Google services. The image is put into cell &amp;ldquo;A1&amp;rdquo;.
function sample1() {  const fileId = &amp;#34;###&amp;#34;; // Please set the file ID of the PNG image file on Google Drive.</description>
    </item>
    
    <item>
      <title>Workaround: Automatically Installing OnEdit Trigger to Copied Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2023/04/10/workaround-automatically-installing-onedit-trigger-to-copied-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Mon, 10 Apr 2023 11:16:02 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/04/10/workaround-automatically-installing-onedit-trigger-to-copied-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a workaround for automatically installing the OnEdit trigger to the copied Google Spreadsheet using Google Apps Script.
The sample situation for this workaround is as follows.
 You have a Google Spreadsheet. Your Spreadsheet is shared with a user as the writer. Your Spreadsheet has a button for executing a script for copying the active Spreadsheet. Your Spreadsheet has a function installedOnEdit for executing by the installable OnEdit trigger.</description>
    </item>
    
    <item>
      <title>Putting TOTP into Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2023/04/04/putting-totp-into-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Tue, 04 Apr 2023 13:44:17 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/04/04/putting-totp-into-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
In this post, I would like to introduce a sample script for putting Time-based One-time Password (TOTP) value into Google Spreadsheet using Google Apps Script.
In this sample script, I used a Javascript library of https://github.com/hectorm/otpauth . In the current stage, Google Apps Script can run with V8 runtime. By this, it seems that this library can be used with Google Apps Script.
Sample script function myFunction() {  const secret = &amp;#34;ABCDEFGHIJKLMN23&amp;#34;; // Please set your secret here.</description>
    </item>
    
    <item>
      <title>Enriched Management of Rich Text on Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2023/04/02/enriched-management-of-rich-text-on-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Sun, 02 Apr 2023 12:36:13 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/04/02/enriched-management-of-rich-text-on-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
In the current stage, Google Spreadsheet can use rich texts in cells. The rich texts can be also managed by Google Apps Script. But, I thought that creating a script for editing the existing rich text in the cell might be a bit complicated. Because, for example, in the current stage, when the text of the rich text of a cell is changed using a script, all text styles are cleared.</description>
    </item>
    
    <item>
      <title>GAS Library - RichTextAssistant</title>
      <link>https://tanaikech.github.io/2023/04/02/gas-library-richtextassistant/</link>
      <pubDate>Sun, 02 Apr 2023 12:20:47 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/04/02/gas-library-richtextassistant/</guid>
      <description>Overview This is a GAS library for supporting editing RichText in Google Spreadsheet using Google Apps Script.
Description There is RichTextApp in my published libraries. RichTextApp can be used mainly for converting RichText to Google Documents and vice versa. This library RichTextAssistant will support editing the rich text in Google Spreadsheets using Google Apps Script. Google Spreadsheet can use rich text as the cell value using Google Apps Script. But, I thought that when I created a script for editing the existing rich text in the cell, it might be a bit complicated.</description>
    </item>
    
    <item>
      <title>Folder Picker using jsTree with Google Apps Script and Javascript</title>
      <link>https://tanaikech.github.io/2023/03/23/folder-picker-using-jstree-with-google-apps-script-and-javascript/</link>
      <pubDate>Thu, 23 Mar 2023 09:48:05 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/03/23/folder-picker-using-jstree-with-google-apps-script-and-javascript/</guid>
      <description>Gists
This is a sample script for the folder picker using jsTree with Google Apps Script and Javascript.
I have already published &amp;ldquo;File Picker using Google Apps Script and Javascript without 3rd party&amp;rdquo;. In this post, jsTree is used.
Usage 1. Install Google Apps Script library. In this script, &amp;ldquo;FilesApp&amp;rdquo; of my Google Apps Script library is used. So, please install it. You can see how to install it at here.</description>
    </item>
    
    <item>
      <title>Importing Microsoft Excel to Google Spreadsheet using Custom Function with Google Apps Script</title>
      <link>https://tanaikech.github.io/2023/03/13/importing-microsoft-excel-to-google-spreadsheet-using-custom-function-with-google-apps-script/</link>
      <pubDate>Mon, 13 Mar 2023 14:31:50 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/03/13/importing-microsoft-excel-to-google-spreadsheet-using-custom-function-with-google-apps-script/</guid>
      <description>Gists
This is a sample script for importing Microsoft Excel (XLSX) data to Google Spreadsheet using a custom function with Google Apps Script.
Usage 1. Install SheetJS library. Please copy the script of the SheetJS library from https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js, and paste the script to the script editor of Google Spreadsheet, and save the script.
In this case, I would like to recommend the following flow.
 Add a new script to the script editor.</description>
    </item>
    
    <item>
      <title>Removing Quote Prefix of Cell value using Google Apps Script (Single Quote)</title>
      <link>https://tanaikech.github.io/2023/03/11/removing-quote-prefix-of-cell-value-using-google-apps-script-single-quote/</link>
      <pubDate>Sat, 11 Mar 2023 14:27:47 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/03/11/removing-quote-prefix-of-cell-value-using-google-apps-script-single-quote/</guid>
      <description>Gists
In Google Spreadsheet, when a single quote is added to the top letter of the cell value, the cell is used as the text value. About detecting this, I have already reported in this post in my blog. In this post, I would like to introduce a sample script for removing the single quote at the top character of the cell value.
Sample script: function sample() {  const sheetName = &amp;#34;Sheet1&amp;#34;; // Please set your sheet name.</description>
    </item>
    
    <item>
      <title>Retrieving Start and End Row Numbers of Same Values in a Column on Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2023/02/23/retrieving-start-and-end-row-numbers-of-same-values-in-a-column-on-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Thu, 23 Feb 2023 17:19:48 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/02/23/retrieving-start-and-end-row-numbers-of-same-values-in-a-column-on-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for retrieving the start and end row numbers of the same values in a column on Google Spreadsheet using Google Apps Script.
There is a case in that I want to retrieve the rows of the same values in a column on Google Spreadsheet using Google Apps Script. In this post, I would like to introduce a simple sample script for achieving this.
Sample script function myFunction() {  const sheet = SpreadsheetApp.</description>
    </item>
    
    <item>
      <title>Putting Values of All Spreadsheets in Folder to Master Spreadsheet with Low Process cost using Google Apps Script</title>
      <link>https://tanaikech.github.io/2023/02/03/putting-values-of-all-spreadsheets-in-folder-to-master-spreadsheet-with-low-process-cost-using-google-apps-script/</link>
      <pubDate>Fri, 03 Feb 2023 14:20:11 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/02/03/putting-values-of-all-spreadsheets-in-folder-to-master-spreadsheet-with-low-process-cost-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for putting the values of all Spreadsheets in a folder to the master Spreadsheet with a low process cost using Google Apps Script.
There is a case in that I want to collect the values from multiple Spreadsheets and put the values into the master Spreadsheet. When this situation is achieved by Google Apps Script, as the general method, the values are required to be retrieved from each Spreadsheet in a loop.</description>
    </item>
    
    <item>
      <title>Workaround: Retrieving Hyperlink from Cell of Number Value using Google Apps Script</title>
      <link>https://tanaikech.github.io/2023/01/31/workaround-retrieving-hyperlink-from-cell-of-number-value-using-google-apps-script/</link>
      <pubDate>Tue, 31 Jan 2023 16:15:47 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/01/31/workaround-retrieving-hyperlink-from-cell-of-number-value-using-google-apps-script/</guid>
      <description>Gists
This is a workaround for retrieving the hyperlink from the cell of a number value using Google Apps Script.
As a sample situation, it supposes that a cell &amp;ldquo;A1&amp;rdquo; has a number value like 123, and a hyperlink of https://tanaikech.github.io is set to the cell. In order to retrieve the hyperlink from the cell, it is required to use the methods of getRichTextValue() and getRichTextValues(). But, in the current stage, when the cell value is a number value, when the RichText is retrieved by getRichTextValue(), null is returned.</description>
    </item>
    
    <item>
      <title>Using OnEdit trigger on Google Spreadsheet Created by Service Account</title>
      <link>https://tanaikech.github.io/2023/01/25/using-onedit-trigger-on-google-spreadsheet-created-by-service-account/</link>
      <pubDate>Wed, 25 Jan 2023 12:01:49 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/01/25/using-onedit-trigger-on-google-spreadsheet-created-by-service-account/</guid>
      <description>Gists
In the current stage, by the current specification, Google Apps Script cannot be directly run on Google Spreadsheet created by Service Account. But, there is a case in that we want to use the OnEdit trigger on the Spreadsheet that the service account is the owner. In this post, I would like to introduce the method for achieving this.
Recently, I published &amp;ldquo;Using OnEdit Trigger to Google Spreadsheet by Hiding Google Apps Script from Other Users&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Using OnEdit Trigger to Google Spreadsheet  by Hiding Google Apps Script from Other Users</title>
      <link>https://tanaikech.github.io/2023/01/25/using-onedit-trigger-to-google-spreadsheet-by-hiding-google-apps-script-from-other-users/</link>
      <pubDate>Wed, 25 Jan 2023 09:42:30 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/01/25/using-onedit-trigger-to-google-spreadsheet-by-hiding-google-apps-script-from-other-users/</guid>
      <description>Gists
This is a method for using OnEdit Trigger to Google Spreadsheet by hiding Google Apps Script from other users.
A sample flow for achieving this is as follows.
Flow 1. Create a new Google Spreadsheet. Please create a new Google Spreadsheet. In this flow, this Google Spreadsheet is used for testing the script. And, please copy the Spreadsheet ID. This spreadsheet ID is used.
In this case, even when Spreadsheet has no container-bound script, this goal can be achieved.</description>
    </item>
    
    <item>
      <title>Rearranging Columns on Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/12/21/rearranging-columns-on-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Wed, 21 Dec 2022 10:12:06 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/12/21/rearranging-columns-on-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for rearranging columns on Google Spreadsheet using Google Apps Script.
Sample script In this sample script, the initial columns of &amp;ldquo;header1&amp;rdquo;, &amp;ldquo;header2&amp;rdquo;, &amp;ldquo;header3&amp;rdquo;, &amp;ldquo;header4&amp;rdquo; and &amp;ldquo;header5&amp;rdquo; are rearranged to &amp;ldquo;header2&amp;rdquo;, &amp;ldquo;header5&amp;rdquo;, &amp;ldquo;header1&amp;rdquo;, &amp;ldquo;header4&amp;rdquo;, &amp;ldquo;header3&amp;rdquo;. This result can be seen at the above image.
As an important point, in this script, the header titles in the 1st row are used. Please be careful about this.</description>
    </item>
    
    <item>
      <title>Retrieving Values from Publicly Shared Google Spreadsheet using API key with Javascript</title>
      <link>https://tanaikech.github.io/2022/12/16/retrieving-values-from-publicly-shared-google-spreadsheet-using-api-key-with-javascript/</link>
      <pubDate>Fri, 16 Dec 2022 10:33:33 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/12/16/retrieving-values-from-publicly-shared-google-spreadsheet-using-api-key-with-javascript/</guid>
      <description>Gsits
This is a sample script for retrieving the values from a publicly shared Google Spreadsheet using an API key with Javascript.
Sample script In this sample script, googleapis for Javascript is used.
&amp;lt;script async defer src=&amp;#34;https://apis.google.com/js/api.js&amp;#34; onload=&amp;#34;handleClientLoad()&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; function handleClientLoad() {  const apiKey = &amp;#34;###&amp;#34;; // Please set your API key.  const spreadsheetId = &amp;#34;###&amp;#34;; // Please set your Spreadsheet ID.   gapi.load(&amp;#39;client&amp;#39;, async () =&amp;gt; {  await gapi.</description>
    </item>
    
    <item>
      <title>Copying and Deleting Dimension Groups in Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/12/14/copying-and-deleting-dimension-groups-in-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Wed, 14 Dec 2022 10:16:45 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/12/14/copying-and-deleting-dimension-groups-in-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
In this post, I would like to introduce 2 sample scripts for copying and deleting the dimension groups in Google Spreadsheet using Google Apps Script.
Unfortunately, in the current stage, all dimension groups cannot be copied by one action, and also, all dimension groups cannot be deleted by one action. In this post, these can be achieved using Google Apps Script.
These sample scripts use Sheets API. So, please enable Sheets API at Advanced Google services.</description>
    </item>
    
    <item>
      <title>Workaround: Detecting to Edit Google Spreadsheet using Sheets API with Service Account</title>
      <link>https://tanaikech.github.io/2022/11/10/workaround-detecting-to-edit-google-spreadsheet-using-sheets-api-with-service-account/</link>
      <pubDate>Thu, 10 Nov 2022 14:41:22 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/11/10/workaround-detecting-to-edit-google-spreadsheet-using-sheets-api-with-service-account/</guid>
      <description>Gists
This is a workaround for detecting to edit Google Spreadsheet using Sheets API with the service account.
It has already been found that when Google Spreadsheet is edited using Sheets API, this can be detected by the installed OnChange trigger. For example, when a Spreadsheet is edited using Sheets API with the access token retrieved from your Google account, the event object of the installable OnChange trigger includes your email address and nickname.</description>
    </item>
    
    <item>
      <title>Putting Multiple Hyperlinks to a Cell using Sheets API with Google Apps Script and Node.js</title>
      <link>https://tanaikech.github.io/2022/10/27/putting-multiple-hyperlinks-to-a-cell-using-sheets-api-with-google-apps-script-and-node.js/</link>
      <pubDate>Thu, 27 Oct 2022 09:51:38 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/10/27/putting-multiple-hyperlinks-to-a-cell-using-sheets-api-with-google-apps-script-and-node.js/</guid>
      <description>Gists
I have submitted a report of &amp;ldquo;Workaround: Putting Multiple Hyperlinks to a Cell using Sheets API&amp;rdquo; before. At that time, there are no direct methods for setting multiple hyperlinks to the part of text in a cell. But, recently, textFormatRuns was added to Sheets API. By this, multiple hyperlinks got to be able to be set to the part of text in a cell. In this report, I would like to introduce a sample script for this.</description>
    </item>
    
    <item>
      <title>Updating Array1 with Array2 using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/10/04/updating-array1-with-array2-using-google-apps-script/</link>
      <pubDate>Tue, 04 Oct 2022 10:00:39 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/10/04/updating-array1-with-array2-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for updating Array1 with Array2 using Google Apps Script.
As a sample situation, there are 2 arrays (Array1 and Array2) of the 2-dimensional array. The sample situation can be seen in the above sample Spreadsheet.
 Conditions  When the values of column &amp;ldquo;A&amp;rdquo; of Array2 are existing in column &amp;ldquo;A&amp;rdquo; of Array1, the rows of Array1 are updated by that of Array2. When the values of column &amp;ldquo;A&amp;rdquo; of Array2 are not existing in column &amp;ldquo;A&amp;rdquo; of Array1, the rows of Array2 are appended to Array1.</description>
    </item>
    
    <item>
      <title>Updated: GAS Library - DocsServiceApp</title>
      <link>https://tanaikech.github.io/2022/09/29/updated-gas-library-docsserviceapp/</link>
      <pubDate>Thu, 29 Sep 2022 10:41:07 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/09/29/updated-gas-library-docsserviceapp/</guid>
      <description>Overview This is a Google Apps Script library for supporting Document service, Docs API, Spreadsheet service, Sheets API, Slides service and Slides API. The aim of this library is to compensate the processes that they services cannot achieve.
DocsServiceApp was updated to v1.2.0   v1.2.0 (September 29, 2022)
 Added a new method of getNamedFunctions(). This method can retrieve the named functions from Google Spreadsheet.    You can see the detail information here https://github.</description>
    </item>
    
    <item>
      <title>Retrieving Named Functions from Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/09/28/retrieving-named-functions-from-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Wed, 28 Sep 2022 16:18:03 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/09/28/retrieving-named-functions-from-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for retrieving the named functions from Google Spreadsheet using Google Apps Script.
Recently, the named functions got to be able to be used in Google Spreadsheet. Ref When several named functions are added, I thought that I wanted to retrieve these functions using a script. But, unfortunately, in the current stage, it seems that there are no built-in methods (SpreadsheetApp and Sheets API) for directly retrieving the named functions.</description>
    </item>
    
    <item>
      <title>Retrieving Cell Coordinates of Cells with Quote Prefix using Google Apps Script (Single Quote)</title>
      <link>https://tanaikech.github.io/2022/09/28/retrieving-cell-coordinates-of-cells-with-quote-prefix-using-google-apps-script-single-quote/</link>
      <pubDate>Wed, 28 Sep 2022 15:40:58 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/09/28/retrieving-cell-coordinates-of-cells-with-quote-prefix-using-google-apps-script-single-quote/</guid>
      <description>Gists
This sample script retrieves the cell coordinates of cells with the quote prefix. In Google Spreadsheet, when a single quote is added to the top letter of the cell value, the cell is used as the text value. When we want to search the cells with the quote prefix in Spreadsheet, unfortunately, in the current stage, this cannot be achieved using Spreadsheet service (SpreadsheetApp) and Sheets API. In this method, such cells can be retrieved.</description>
    </item>
    
    <item>
      <title>Updated: GAS Library - DocsServiceApp</title>
      <link>https://tanaikech.github.io/2022/09/28/updated-gas-library-docsserviceapp/</link>
      <pubDate>Wed, 28 Sep 2022 15:33:53 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/09/28/updated-gas-library-docsserviceapp/</guid>
      <description>Overview This is a Google Apps Script library for supporting Document service, Docs API, Spreadsheet service, Sheets API, Slides service and Slides API. The aim of this library is to compensate the processes that they services cannot achieve.
DocsServiceApp was updated to v1.1.0   v1.1.0 (September 28, 2022)
 Added a new method of getQuotePrefixCells(). This method can detect the cells with the quote prefix cells.    You can see the detail information here https://github.</description>
    </item>
    
    <item>
      <title>Showing Specific Rows and Columns in Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/09/27/showing-specific-rows-and-columns-in-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Tue, 27 Sep 2022 10:41:17 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/09/27/showing-specific-rows-and-columns-in-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for showing the specific rows and columns in Google Spreadsheet using Google Apps Script.
When you export a Google Spreadsheet as a PDF file, you might have a case where you want to export the specific rows and columns in a sheet. In this post, I would like to introduce the sample script for achieving this.
Script Please copy and paste the following scripts to the script editor of Google Spreadsheet.</description>
    </item>
    
    <item>
      <title>Detecting Cells with Quote Prefix in Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/09/06/detecting-cells-with-quote-prefix-in-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Tue, 06 Sep 2022 14:05:17 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/09/06/detecting-cells-with-quote-prefix-in-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for detecting cells with the quote prefix in Google Spreadsheet using Google Apps Script.
For example, when a value is put to a cell by adding a single quote &#39; as the top character, the cell value is used as the string value. This is the current specification. Under this condition, when the cells with the value of the quote prefix are tried to be detected, unfortunately, in the current stage, it seems that there is no method for directly achieving this in the methods of Spreadsheet service (SpreadsheetApp).</description>
    </item>
    
    <item>
      <title>Report: Process Cost of Google Apps Script During Large Calculations by Formulas on Google Spreadsheet</title>
      <link>https://tanaikech.github.io/2022/08/31/report-process-cost-of-google-apps-script-during-large-calculations-by-formulas-on-google-spreadsheet/</link>
      <pubDate>Wed, 31 Aug 2022 15:04:22 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/08/31/report-process-cost-of-google-apps-script-during-large-calculations-by-formulas-on-google-spreadsheet/</guid>
      <description>Gists
Today, I found a question ( https://stackoverflow.com/q/73540735 ) in Stackoverflow by Max Makhrov. When I saw this question, I thought that this is a good raising question. In this question, it has reported that when the Spreadsheet includes the formulas of the large calculation, when a Google Apps Script is run during the calculation of the formulas is running, the processing time of the script becomes long.
I have also experienced this before.</description>
    </item>
    
    <item>
      <title>Benchmark: High-Efficiency Finding and Replacing Many Values in Google Spreadsheet with Low Process Cost using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/08/19/benchmark-high-efficiency-finding-and-replacing-many-values-in-google-spreadsheet-with-low-process-cost-using-google-apps-script/</link>
      <pubDate>Fri, 19 Aug 2022 15:11:09 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/08/19/benchmark-high-efficiency-finding-and-replacing-many-values-in-google-spreadsheet-with-low-process-cost-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for high-efficiency finding and replacing many values in Google Spreadsheet with the low process cost using Google Apps Script.
When the various values are replaced in Google Spreadsheet using Google Apps Script, I&amp;rsquo;m worried about the process cost. So, in this report, I would like to introduce a sample script for high-efficiency achieving this.
As the result, using a sample situation, when the process cost of the sample script using Sheets API is compared with that of the sample script using Spreadsheet services (SpreadsheetApp), it was found that the above script using Sheets API could reduce the process cost by about 70 % from the script using Spreadsheet service.</description>
    </item>
    
    <item>
      <title>Updating Destination Sheet by Source Sheet in Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/08/18/updating-destination-sheet-by-source-sheet-in-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Thu, 18 Aug 2022 14:50:51 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/08/18/updating-destination-sheet-by-source-sheet-in-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for updating the destination sheet by the source sheet in Google Spreadsheet using Google Apps Script.
The sample situation is as follows.
Sample script function myFunction() {  const sheetNames = [&amp;#34;Sheet1&amp;#34;, &amp;#34;Sheet2&amp;#34;];   // Retrieve values from source and destination sheets.  const ss = SpreadsheetApp.getActiveSpreadsheet();  const [srcSheet, dstSheet] = sheetNames.map((s) =&amp;gt; ss.getSheetByName(s));  const [srcValues, dstValues] = [srcSheet, dstSheet].map((s) =&amp;gt;  s.</description>
    </item>
    
    <item>
      <title>Moving Cell Detection on Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/08/17/moving-cell-detection-on-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Wed, 17 Aug 2022 11:05:11 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/08/17/moving-cell-detection-on-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for detecting whether the specific cells on Google Spreadsheet are manually moved using Google Apps Script.
In this case, the named range, OnChange trigger, and PropertiesService are used.
Usage: 1. Create a named range. As a sample, please create a named range to the cells &amp;ldquo;A2:B2&amp;rdquo; as &amp;ldquo;sampleNamedRange1&amp;rdquo;. Ref
2. Prepare sample script. Please copy and paste the following script to the script editor of Spreadsheet.</description>
    </item>
    
    <item>
      <title>Using RichTextValues with Custom Function on Google Spreadsheet</title>
      <link>https://tanaikech.github.io/2022/08/17/using-richtextvalues-with-custom-function-on-google-spreadsheet/</link>
      <pubDate>Wed, 17 Aug 2022 09:11:41 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/08/17/using-richtextvalues-with-custom-function-on-google-spreadsheet/</guid>
      <description>Gists
In this post, I would like to introduce the method for using RichTextValue with a custom function of Google Apps Script.
This sample is for this thread in Stackoverflow.
In this thread, the OP&amp;rsquo;s goal is as follows.
 Put a text to a cell. In this case, use a hyperlink in a part of the text. This is required to be achieved using a custom function.  In the current stage, in order to reflect the hyperlink in a part of the text, it is required to use setRichTextValue of Google Apps Script.</description>
    </item>
    
    <item>
      <title>Report: Challenging Exporting Selected Cells on Spreadsheet as Image using Google Apps Script and Javascript</title>
      <link>https://tanaikech.github.io/2022/08/10/report-challenging-exporting-selected-cells-on-spreadsheet-as-image-using-google-apps-script-and-javascript/</link>
      <pubDate>Wed, 10 Aug 2022 10:57:36 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/08/10/report-challenging-exporting-selected-cells-on-spreadsheet-as-image-using-google-apps-script-and-javascript/</guid>
      <description>Gists
Updated on January 25, 2024 Overview: This is a report for challenging exporting the selected cells on Spreadsheet as an image using Google Apps Script and Javascript.
Description: This report is based on this question by Max Makhrov. When I saw this question, I remembered that there are many questions for asking this in Stackoverflow. And, I thought that when this is achieved, it will be useful for the owner of this question and a lot of users.</description>
    </item>
    
    <item>
      <title>Clearing Discrete Cell Values on Multiple Sheets using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/08/08/clearing-discrete-cell-values-on-multiple-sheets-using-google-apps-script/</link>
      <pubDate>Mon, 08 Aug 2022 08:57:42 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/08/08/clearing-discrete-cell-values-on-multiple-sheets-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for clearing the discrete cell values on multiple sheets using Google Apps Script.
There might be a case where you want to clear the values of the discrete cells in the multiple sheets using Google Apps Script. In this post, I would like to introduce the efficient script for achieving this.
Sample script 1 Please copy and paste the following script to the script editor of the Google Spreadsheet you want to use.</description>
    </item>
    
    <item>
      <title>Creating User&#39;s Dashboard by Inputting Name and Password using Web Apps with Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/08/01/creating-users-dashboard-by-inputting-name-and-password-using-web-apps-with-google-apps-script/</link>
      <pubDate>Mon, 01 Aug 2022 15:17:10 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/08/01/creating-users-dashboard-by-inputting-name-and-password-using-web-apps-with-google-apps-script/</guid>
      <description>Gists
This is a sample script for creating the user&amp;rsquo;s dashboard by inputting the user name and password using Web Apps with Google Apps Script. In this case, Google Spreadsheet is used as a database of the dashboard.
Usage 1. Create a Google Apps Script project. In order to use Web Apps, please create a new Google Apps Script project. In this case, please create a new Spreadsheet and open the script editor of Spreadsheet.</description>
    </item>
    
    <item>
      <title>Checking Exchange Rate using GOOGLEFINANCE with Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/07/28/checking-exchange-rate-using-googlefinance-with-google-apps-script/</link>
      <pubDate>Thu, 28 Jul 2022 16:29:14 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/07/28/checking-exchange-rate-using-googlefinance-with-google-apps-script/</guid>
      <description>Gists
This is a sample script for checking the exchange rate using GOOGLEFINANCE with Google Apps Script.
Recently, I have published a report of &amp;ldquo;Report: Obtaining Values from GOOGLEFINANCE using Google Apps Script&amp;rdquo;. Ref In this post, I would like to introduce a sample script for checking the exchange rate using Google Apps Script.
Sample script Please copy and paste the following script to the script editor of Spreadsheet.
// When this script is run, a trigger for executing &amp;#34;checkCurrency&amp;#34; function is installed.</description>
    </item>
    
    <item>
      <title>Report: Management of Images on Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/07/23/report-management-of-images-on-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Sat, 23 Jul 2022 10:45:22 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/07/23/report-management-of-images-on-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a report for management of images on Google Spreadsheet using Google Apps Script.
At October 30, 2018, Cass OverGridImage and the method of inserImage have been added to Spreadsheet Service. Ref At January 19, 2022, Class CellImageBuilder and Class CellImage have been added to Spreadsheet Service. Ref By these Classes and methods, the images got to be able to be managed on Google Spreadsheet. But, when the image is used to the various situations, there are the cases that it is required to ingenuity to manage the images.</description>
    </item>
    
    <item>
      <title>Removing Invalid Named Ranges from Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/07/06/removing-invalid-named-ranges-from-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Wed, 06 Jul 2022 10:38:52 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/07/06/removing-invalid-named-ranges-from-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for removing the invalid named range of #REF from Google Spreadsheet using Google Apps Script.
Issue and workaround For example, there are 2 sheets of &amp;ldquo;Sheet1&amp;rdquo; and &amp;ldquo;Sheet2&amp;rdquo; in a Google Spreadsheet. A new named range of sample is created for the range of Sheet1!A1, and remove the sheet of &amp;ldquo;Sheet1&amp;rdquo;. By this flow, when the named range list is checked by UI on Spreadsheet, sample has #REF.</description>
    </item>
    
    <item>
      <title>Converting A1Notation to GridRange and vice versa using Google Apps Script without any Scopes</title>
      <link>https://tanaikech.github.io/2022/07/04/converting-a1notation-to-gridrange-and-vice-versa-using-google-apps-script-without-any-scopes/</link>
      <pubDate>Mon, 04 Jul 2022 11:39:16 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/07/04/converting-a1notation-to-gridrange-and-vice-versa-using-google-apps-script-without-any-scopes/</guid>
      <description>Gists
This is a sample script for converting A1Notation to GridRange and vice versa using Google Apps Script without any scopes.
A1Notation and GridRange are often used with Sheets API. I have posted a sample script for converting A1Notation to GridRange before. Ref But, in that case, I used the method of Spreadsheet service (SpreadsheetApp). By this, in order to use the script, it is required to authorize the scopes. In this sample script, A1Notation can be converted to GridRange and vice versa with no scopes.</description>
    </item>
    
    <item>
      <title>Protecting Cells of Spreadsheet by Clicking Checkbox using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/06/16/protecting-cells-of-spreadsheet-by-clicking-checkbox-using-google-apps-script/</link>
      <pubDate>Thu, 16 Jun 2022 11:13:16 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/06/16/protecting-cells-of-spreadsheet-by-clicking-checkbox-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for protecting the cells of a Spreadsheet by clicking a checkbox using Google Apps Script.
You might have a situation where you want to protect the cells when a user checks a checkbox. This sample script is for achieving this situation. The demonstration of this sample script is as follows.
  This demonstration is for a user. You can see that when the checkbox is checked, the checkbox and the right side of the checkbox are protected.</description>
    </item>
    
    <item>
      <title>Parsing XML Data in Google Apps Script using IMPORTXML</title>
      <link>https://tanaikech.github.io/2022/06/15/parsing-xml-data-in-google-apps-script-using-importxml/</link>
      <pubDate>Wed, 15 Jun 2022 11:59:11 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/06/15/parsing-xml-data-in-google-apps-script-using-importxml/</guid>
      <description>Gists
This is a sample flow for parsing XML data in Google Apps Script using IMPORTXML. Recently, it seems that ContentService.MimeType.XML has been removed by the Google side. By this, in the current stage, the XML data cannot be directly loaded by the Web Apps URL with IMPORTXML. From this current situation, I would like to introduce a workaround. In this workaround, the XML data in Google Apps Script is parsed by IMPORTXML of the built-in function of Google Spreadsheet.</description>
    </item>
    
    <item>
      <title>Report: Publishing Various Google Docs with Same URL using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/06/03/report-publishing-various-google-docs-with-same-url-using-google-apps-script/</link>
      <pubDate>Fri, 03 Jun 2022 11:26:51 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/06/03/report-publishing-various-google-docs-with-same-url-using-google-apps-script/</guid>
      <description>Gists
This is a sample method for publishing various Google Docs files with the same URL using Google Apps Script.
By updating on May 25, 2022, the content got to be able to be embedded as a full page in the new Google site. Ref In this method, this is used.
Usage 1. Create a Google Docs. First, as a simple sample, please create a new Google Spreadsheet. And please copy the URL like https://docs.</description>
    </item>
    
    <item>
      <title>Replacing Values in Cells on Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/05/30/replacing-values-in-cells-on-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Mon, 30 May 2022 11:15:16 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/05/30/replacing-values-in-cells-on-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for replacing values in the cells on Google Spreadsheet using Google Apps Script.
Sample situation The sample situation is as follows.
Sample script This sample script used Sheets API. So, please enable Sheets API at Advanced Google services.
function myFunction() {  const obj = {  sample1: &amp;#34;ab&amp;#34;,  sample2: &amp;#34;cd&amp;#34;,  sample3: &amp;#34;ef&amp;#34;,  sample4: &amp;#34;gh&amp;#34;,  sample5: &amp;#34;ij&amp;#34;,  sample6: &amp;#34;kl&amp;#34;,  sample7: &amp;#34;mn&amp;#34;,  sample8: &amp;#34;op&amp;#34;,  sample9: &amp;#34;qr&amp;#34;,  };  const ss = SpreadsheetApp.</description>
    </item>
    
    <item>
      <title>Parsing JSON Data Array by Expanding Header Row using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/05/25/parsing-json-data-array-by-expanding-header-row-using-google-apps-script/</link>
      <pubDate>Wed, 25 May 2022 17:10:43 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/05/25/parsing-json-data-array-by-expanding-header-row-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for parsing JSON data array by expanding the header row using Google Apps Script.
Sample script function myFunction() {  const obj = [  { key1: &amp;#34;value1&amp;#34;, key2: &amp;#34;value2&amp;#34;, key3: &amp;#34;value3&amp;#34; },  { key4: &amp;#34;value1&amp;#34;, key5: &amp;#34;value2&amp;#34;, key6: &amp;#34;value3&amp;#34; },  { key7: &amp;#34;value1&amp;#34;, key8: &amp;#34;value2&amp;#34;, key9: &amp;#34;value3&amp;#34; },  ];   const headers = Object.keys(  obj.reduce((o, e) =&amp;gt; (Object.keys(e).forEach((k) =&amp;gt; (o[k] = true)), o), [])  );  const values = [headers, .</description>
    </item>
    
    <item>
      <title>Updated: GAS Library - RichTextApp</title>
      <link>https://tanaikech.github.io/2022/05/25/updated-gas-library-richtextapp/</link>
      <pubDate>Wed, 25 May 2022 12:03:49 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/05/25/updated-gas-library-richtextapp/</guid>
      <description>RichTextApp was updated to v1.4.0   v1.4.0 (May 25, 2022)
 Added a new method of ReplaceTextToRichText. In this method, the text in a cell is converted to the richtext.    You can see the detail information here https://github.com/tanaikech/RichTextApp</description>
    </item>
    
    <item>
      <title>Retrieving Text Positions in Text Data using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/05/23/retrieving-text-positions-in-text-data-using-google-apps-script/</link>
      <pubDate>Mon, 23 May 2022 13:55:56 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/05/23/retrieving-text-positions-in-text-data-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for retrieving the text positions in the text data using Google Apps Script.
For example, in order to set the rich text style the part of text from the text data, this sample script will be useful.
Sample situation 1 The sample situation is as follows.
sample1, sample2, sample3, sample4, sample5sample1, sample2, sample3, sample4, sample5sample1, sample2, sample3, sample4, sample5 In this sample, the text positions of sample2 and sample5 are retrieved from this sample text data.</description>
    </item>
    
    <item>
      <title>Retrieving and Parsing XML data from Google Workspace Update Blog and Putting it to Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/05/21/retrieving-and-parsing-xml-data-from-google-workspace-update-blog-and-putting-it-to-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Sat, 21 May 2022 14:44:36 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/05/21/retrieving-and-parsing-xml-data-from-google-workspace-update-blog-and-putting-it-to-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for retrieving and parsing the XML data from Google Workspace Update Blog and putting it to Google Spreadsheet using Google Apps Script.
At Google Workspace Update Blog, the XML data is provided. By this, the retrieved XML data is parsed with XmlService, and the data is put to Google Spreadsheet. Recently, I got a request for this. So I created this sample script. When this was useful for your situation, I&amp;rsquo;m glad.</description>
    </item>
    
    <item>
      <title>Report: Obtaining Values from GOOGLEFINANCE using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/05/18/report-obtaining-values-from-googlefinance-using-google-apps-script/</link>
      <pubDate>Wed, 18 May 2022 11:43:37 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/05/18/report-obtaining-values-from-googlefinance-using-google-apps-script/</guid>
      <description>Gists
This is a report for obtaining the values from GOOGLEFINANCE using Google Apps Script. When I tested to retrieve the values from GOOGLEFINANCE function on Google Spreadsheet using Google Apps Script, I noticed that the values can be retrieved.
When I had tested this before, I had got the value of #N/A. About retrieving the values from GOOGLEFINANCE function on Google Spreadsheet, I had known &amp;ldquo;Historical GOOGLEFINANCE data no longer accessible outside of Google Sheets&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Expanding Rows in Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/05/11/expanding-rows-in-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Wed, 11 May 2022 11:43:38 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/05/11/expanding-rows-in-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for expanding the rows in Google Spreadsheet using Google Apps Script. The sample situation is as follows.
Sample situation Input Output Sample script function myFunction() {  const expandedColumns = [2, 3, 4, 5]; // Please set the expanded columns you expect.  const delimiter = &amp;#34;\n&amp;#34;; // Please set the delimiter.  const srcSheetName = &amp;#34;Sheet1&amp;#34;; // Please set the source sheet name.  const dstSheetName = &amp;#34;Sheet2&amp;#34;; // Please set the destination sheet name.</description>
    </item>
    
    <item>
      <title>Number of Requests for Sheets API using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/05/04/number-of-requests-for-sheets-api-using-google-apps-script/</link>
      <pubDate>Wed, 04 May 2022 15:51:24 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/05/04/number-of-requests-for-sheets-api-using-google-apps-script/</guid>
      <description>Gists
This is a report for checking the number of requests for Sheets API. I had contact about the quota for Sheets API. So, in order to explain this, I used the following simple sample scripts.
Sample 1 This sample puts a value of &amp;ldquo;sample&amp;rdquo; to a cell &amp;ldquo;A1&amp;rdquo; using the batchUpdate method. This request body includes one request. When this script is run, one API quota is used.
function sample1() {  const spreadsheetId = &amp;#34;###&amp;#34;;  const sheetId = 0;   const requests = [{  &amp;#34;updateCells&amp;#34;: {  &amp;#34;rows&amp;#34;: [  {  &amp;#34;values&amp;#34;: [  {  &amp;#34;userEnteredValue&amp;#34;: {  &amp;#34;stringValue&amp;#34;: &amp;#34;sample&amp;#34;  }  }  ]  }  ],  &amp;#34;range&amp;#34;: {  &amp;#34;sheetId&amp;#34;,  &amp;#34;startRowIndex&amp;#34;: 0,  &amp;#34;endRowIndex&amp;#34;: 1,  &amp;#34;startColumnIndex&amp;#34;: 0,  &amp;#34;endColumnIndex&amp;#34;: 1  },  &amp;#34;fields&amp;#34;: &amp;#34;userEnteredValue.</description>
    </item>
    
    <item>
      <title>Increasing Column Letter by One using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/05/01/increasing-column-letter-by-one-using-google-apps-script/</link>
      <pubDate>Sun, 01 May 2022 09:49:39 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/05/01/increasing-column-letter-by-one-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for increasing the column letter by one using Google Apps Script.
Sample script const increase = (ar) =&amp;gt;  ar.map((e) =&amp;gt; {  const idx = [...e].reduce(  (c, e, i, a) =&amp;gt;  (c += (e.charCodeAt(0) - 64) * Math.pow(26, a.length - i - 1)),  -1  );   // Ref: https://stackoverflow.com/a/53678158  columnIndexToLetter = (n) =&amp;gt;  (a = Math.floor(n / 26)) &amp;gt;= 0  ?</description>
    </item>
    
    <item>
      <title>Analyzing Responses from Grid Items of Google Form using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/04/28/analyzing-responses-from-grid-items-of-google-form-using-google-apps-script/</link>
      <pubDate>Thu, 28 Apr 2022 13:55:11 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/04/28/analyzing-responses-from-grid-items-of-google-form-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for analyzing the responses from Grid Items of Google Form using Google Apps Script.
In this sample situation, all responses are retrieved from Grid Items of Google Form, and the average values of each row of each question are calculated. And, the result is put on the Spreadsheet.
Sample situation Input: Sample Google Form The sample Google Form is as follows.
Output: Sample Spreadsheet The sample output is as follows.</description>
    </item>
    
    <item>
      <title>Report: Handling 10,000,000 cells in Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/04/25/report-handling-10000000-cells-in-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Mon, 25 Apr 2022 15:06:49 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/04/25/report-handling-10000000-cells-in-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
Introduction On March 14, 2022, it reported about &amp;ldquo;Google Sheets doubles cell limit&amp;rdquo;. Ref By this update, now, the users can use 10,000,000 cells in a Google Spreadsheet. This is great news for us. When I tried to handle 10,000,000 cells in a Google Spreadsheet using Google Apps Script, it was found that there were various important points. In this report, I would like to introduce the important points for handling 10,000,000 cells in Google Spreadsheet using Google Apps Script.</description>
    </item>
    
    <item>
      <title>Merging Rows with Same Header Title in Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/04/20/merging-rows-with-same-header-title-in-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Wed, 20 Apr 2022 10:30:41 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/04/20/merging-rows-with-same-header-title-in-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a sample Google Apps Script for processing the values in Google Spreadsheet. In this sample situation, each row is merged using the same header title.
In this sample script, the sample input and output situations are as follows.
Sample situation Input: Output: Sample script In this sample script, this sample can be used as the custom function.
function SAMPLE(values) {  const headers = [  ...new Set(  values  .</description>
    </item>
    
    <item>
      <title>Merging Columns with Same Header Title in Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/04/01/merging-columns-with-same-header-title-in-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Fri, 01 Apr 2022 10:28:15 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/04/01/merging-columns-with-same-header-title-in-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a sample Google Apps Script for processing the values in Google Spreadsheet. In this sample situation, each column are merged using the same header title.
In this sample script, the sample input and output situations are as follows.
Sample situation Input: &amp;ldquo;Sheet1&amp;rdquo; Output: &amp;ldquo;Sheet2&amp;rdquo; Sample script function myFunction() {  const srcSheetName = &amp;#34;Sheet1&amp;#34;; // This sheet is &amp;#34;Input&amp;#34; situation.  const dstSheetName = &amp;#34;Sheet2&amp;#34;; // This sheet is &amp;#34;Output&amp;#34; situation.</description>
    </item>
    
    <item>
      <title>Applicating Spread Syntax and Destructuring assignment to Google Spreadsheet with Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/03/30/applicating-spread-syntax-and-destructuring-assignment-to-google-spreadsheet-with-google-apps-script/</link>
      <pubDate>Wed, 30 Mar 2022 16:59:40 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/03/30/applicating-spread-syntax-and-destructuring-assignment-to-google-spreadsheet-with-google-apps-script/</guid>
      <description>Gists
Introduction In this report, I would like to introduce to apply the spread syntax and the destructuring assignment to Google Spreadsheet with Google Apps Script. The destructuring assignment can be used without V8 runtime. But, the spread syntax is required to be used with V8 runtime. Recently, I often saw the script using them at Stackoverflow. And also, I have sometimes gotten the questions related to the spread syntax and the destructuring assignment.</description>
    </item>
    
    <item>
      <title>Counter in Cell of Google Spreadsheet using Infinite Loop with Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/02/15/counter-in-cell-of-google-spreadsheet-using-infinite-loop-with-google-apps-script/</link>
      <pubDate>Tue, 15 Feb 2022 09:18:24 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/02/15/counter-in-cell-of-google-spreadsheet-using-infinite-loop-with-google-apps-script/</guid>
      <description>Gists
This is a sample script of a counter in a cell of Google Spreadsheet using the infinite loop with Google Apps Script. Recently, I have reported about the infinite loop on Google Spreadsheet. Ref This sample script achieves a counter in a cell using the infinite loop.
Sample script This sample script is a test script for counting the number using the infinite loop. Please be careful this. Please copy and paste the following script to the script editor of Google Spreadsheet and save it.</description>
    </item>
    
    <item>
      <title>Report: Occurring and Resolving Infinite Loop on Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/02/14/report-occurring-and-resolving-infinite-loop-on-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Mon, 14 Feb 2022 09:58:23 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/02/14/report-occurring-and-resolving-infinite-loop-on-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
Here, I would like to introduce a report for occurring and resolving the infinite loop on Google Spreadsheet using Google Apps Script. I have reported this to Google issue tracker. Ref
Sample script: Occurring infinite loop This sample script is a test script for confirming the infinite loop. Please be careful this. Please copy and paste the following script to the script editor of Google Spreadsheet and save it. And, please install OnChange trigger to the function onChange().</description>
    </item>
    
    <item>
      <title>Updated: GAS Library - RichTextApp</title>
      <link>https://tanaikech.github.io/2022/02/08/updated-gas-library-richtextapp/</link>
      <pubDate>Tue, 08 Feb 2022 14:48:00 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/02/08/updated-gas-library-richtextapp/</guid>
      <description>RichTextApp was updated to v1.3.1   v1.3.1 (February 8, 2022)
 Modified the method of DocumentToSpreadsheet. Before this update, the paragraphs with only line breaks have been ignored. From this version, such paragraphs are included in the result value of the cell.    You can see the detail information here https://github.com/tanaikech/RichTextApp</description>
    </item>
    
    <item>
      <title>GAS Library - HtmlFormApp</title>
      <link>https://tanaikech.github.io/2022/02/01/gas-library-htmlformapp/</link>
      <pubDate>Tue, 01 Feb 2022 13:35:21 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/02/01/gas-library-htmlformapp/</guid>
      <description>Overview This is a Google Apps Script library for parsing the form object from HTML form and appending the submitted values to the Spreadsheet.
Description There is Google Form in the Google service. Google Form can parse the submitted data and put it in the Spreadsheet. But when we want to use the custom form, it is required to use the HTML form on Web Apps, dialog, and sidebar. In this case, it is required to prepare Javascript and Google Apps Script for parsing the form object from the HTML form and appending the parsed values to Spreadsheet.</description>
    </item>
    
    <item>
      <title>On January 19, 2022, 2 Classes of &#39;CellImageBuilder&#39; and &#39;CellImage&#39; have been added to Spreadsheet Service</title>
      <link>https://tanaikech.github.io/2022/01/22/on-january-19-2022-2-classes-of-cellimagebuilder-and-cellimage-have-been-added-to-spreadsheet-service/</link>
      <pubDate>Sat, 22 Jan 2022 10:57:47 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/01/22/on-january-19-2022-2-classes-of-cellimagebuilder-and-cellimage-have-been-added-to-spreadsheet-service/</guid>
      <description>On January 19, 2022, 2 classes of CellImageBuilder and CellImage have been added to the Spreadsheet Service.
 CellImageBuilder: https://developers.google.com/apps-script/reference/spreadsheet/cell-image-builder CellImage: https://developers.google.com/apps-script/reference/spreadsheet/cell-image  Unfortunately, in the current stage, it seems that the image manually put to a cell without using the URL cannot still be retrieved.
 When an image is manually put from URL and Google Drive to a cell, this image cannot be retrieved. When an image is put using setSourceUrl method with a script, this image and URL cannot be retrieved.</description>
    </item>
    
    <item>
      <title>Workaround for Inserting Non-public image of Google Drive using IMAGE Function in a Cell on Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/01/13/workaround-for-inserting-non-public-image-of-google-drive-using-image-function-in-a-cell-on-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Thu, 13 Jan 2022 11:52:23 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/01/13/workaround-for-inserting-non-public-image-of-google-drive-using-image-function-in-a-cell-on-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a workaround for inserting the non-public image of Google Drive using IMAGE function in a cell on Google Spreadsheet using Google Apps Script.
When an image on Google Drive is inserted to a cell of Spreadsheet using =IMAGE(URL) function, the image of URL is required to be publicly shared. But, there is the case that the image cannot be publicly shared. This workaround might be able to be used for this situation.</description>
    </item>
    
    <item>
      <title>Importing CSV Data by Keeping Number Formats of Cells on Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/01/07/importing-csv-data-by-keeping-number-formats-of-cells-on-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Fri, 07 Jan 2022 16:00:28 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/01/07/importing-csv-data-by-keeping-number-formats-of-cells-on-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for importing a CSV data by keeping the number formats of cells on Google Spreadsheet using Google Apps Script.
When a CSV data is manually put using the default UI using the browser, it seems that the number formats of all cells cannot be kept. In order to import the CSV data to the cells with keeping the number formats, it is required to use a script as a workaround.</description>
    </item>
    
    <item>
      <title>Detecting Operations to Google Spreadsheet by Owner, Specific Users, and Anonymous Users using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/01/04/detecting-operations-to-google-spreadsheet-by-owner-specific-users-and-anonymous-users-using-google-apps-script/</link>
      <pubDate>Tue, 04 Jan 2022 12:34:54 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/01/04/detecting-operations-to-google-spreadsheet-by-owner-specific-users-and-anonymous-users-using-google-apps-script/</guid>
      <description>Gists
This is a report for detecting the operations to Google Spreadsheet by the owner, the specific users, and the anonymous users using Google Apps Script. When the Spreadsheet is shared with the specific users and/or the anonymous users, when these users can be identified, it will be useful. In this report, I would like to introduce the method for identifying the users who are the owner, the specific users, and the anonymous users.</description>
    </item>
    
    <item>
      <title>Inverting Selected Ranges on Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2021/12/24/inverting-selected-ranges-on-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Fri, 24 Dec 2021 16:47:14 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2021/12/24/inverting-selected-ranges-on-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for inverting the selected ranges on Google Spreadsheet using Google Apps Script.
I have the case that I want to invert the selected ranges on Google Spreadsheet. This sample script can be achieved this goal using Google Apps Script.
Sample script Please copy and paste the following script to the script editor of Google Spreadsheet, and save the script. And, please select the cells and run the function main().</description>
    </item>
    
    <item>
      <title>Checking whether Cells on Google Spreadsheet have Checkboxes using Google Apps Script</title>
      <link>https://tanaikech.github.io/2021/12/23/checking-whether-cells-on-google-spreadsheet-have-checkboxes-using-google-apps-script/</link>
      <pubDate>Thu, 23 Dec 2021 14:46:22 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2021/12/23/checking-whether-cells-on-google-spreadsheet-have-checkboxes-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for checking whether the cells on Google Spreadsheet have checkboxes using Google Apps Script.
When the checkboxes are used in Google Spreadsheet, there is the case that it is required to know whether the cells have the checkboxes. This sample script can be used for such the situation.
Sample script 1 This sample script can check whether all cells in &amp;ldquo;A1:B10&amp;rdquo; have the checkboxes. When all cells in &amp;ldquo;A1:B10&amp;rdquo; have the checkboxes, res is true.</description>
    </item>
    
    <item>
      <title>Pseudo OnEdit Trigger for Google Spreadsheet without Simple and Installable Triggers using Google Apps Script</title>
      <link>https://tanaikech.github.io/2021/12/16/pseudo-onedit-trigger-for-google-spreadsheet-without-simple-and-installable-triggers-using-google-apps-script/</link>
      <pubDate>Thu, 16 Dec 2021 17:46:35 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2021/12/16/pseudo-onedit-trigger-for-google-spreadsheet-without-simple-and-installable-triggers-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for achieving the pseudo OnEdit trigger for Google Spreadsheet without the simple and the installable triggers using Google Apps Script.
Today, I saw a question at Stackoverflow. The goal of this question is as follows.
 There is a Google Spreadsheet created by a service account. Goal is to use OnEdit trigger on this Spreadsheet.  I thought a workaround for achieving this goal.</description>
    </item>
    
    <item>
      <title>Retrieving Data from Content-Type of &#39;text/event-stream&#39; using Javascript and Google Apps Script</title>
      <link>https://tanaikech.github.io/2021/12/07/retrieving-data-from-content-type-of-text/event-stream-using-javascript-and-google-apps-script/</link>
      <pubDate>Tue, 07 Dec 2021 11:09:13 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2021/12/07/retrieving-data-from-content-type-of-text/event-stream-using-javascript-and-google-apps-script/</guid>
      <description>Gists
This is a sample script for retrieving the data from Content-Type of &amp;rsquo;text/event-stream&amp;rsquo; using Javascript and Google Apps Script.
In the current stage, UrlFetchApp of Google Apps Script cannot be retrieved the data from Content-Type of &amp;rsquo;text/event-stream&amp;rsquo;. This sample script can be used for achieving this as a workaround.
This sample script uses EventSource. So this script uses a dialog on Google Docs files (This sample uses Google Spreadsheet.).</description>
    </item>
    
    <item>
      <title>Converting Range ID to Range Object on Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2021/11/26/converting-range-id-to-range-object-on-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Fri, 26 Nov 2021 11:48:59 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2021/11/26/converting-range-id-to-range-object-on-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a workaround for converting the range ID to the range object on Google Spreadsheet using Google Apps Script.
When the named range is put to a cell as the hyperlink as follows,
the hyperlink is like #rangeid=123456789. When this link is clicked, it moves to the cells of the named range. So it is considered that this value of #rangeid=123456789 includes the information about the range of the named range.</description>
    </item>
    
    <item>
      <title>Letting Users Running Google Apps Script on Google Spreadsheet without both Authorizing Scopes and Showing Script</title>
      <link>https://tanaikech.github.io/2021/11/15/letting-users-running-google-apps-script-on-google-spreadsheet-without-both-authorizing-scopes-and-showing-script/</link>
      <pubDate>Mon, 15 Nov 2021 09:36:17 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2021/11/15/letting-users-running-google-apps-script-on-google-spreadsheet-without-both-authorizing-scopes-and-showing-script/</guid>
      <description>Gists
This is a sample workaround for letting users running Google Apps Script on Google Spreadsheet without both authorizing the scopes and showing the script.
The flow of this workaround is as follows.
 Create Web Apps created by Google Apps Script and deploy it as Web Apps. As the returned value, the XML data is returned.  Your script can be included in this script.   User put a formula of =IMPORTML(&amp;quot;WebApps URL&amp;quot;, &amp;quot;xpath&amp;quot;) to a cell.</description>
    </item>
    
    <item>
      <title>Updating Values of Sheet A with Values of Sheet B using Google Apps Script</title>
      <link>https://tanaikech.github.io/2021/11/02/updating-values-of-sheet-a-with-values-of-sheet-b-using-google-apps-script/</link>
      <pubDate>Tue, 02 Nov 2021 13:44:14 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2021/11/02/updating-values-of-sheet-a-with-values-of-sheet-b-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for updating the values of &amp;ldquo;Sheet A&amp;rdquo; with the values of &amp;ldquo;Sheet B&amp;rdquo; using Google Apps Script. I often see this situation at Stackoverflow and other sites. So, in this post, I would like to introduce the sample script using Google Apps Script.
Sample script function myFunction() {  const ss = SpreadsheetApp.getActiveSpreadsheet();  const [src, dst] = [&amp;#34;Sheet1&amp;#34;, &amp;#34;Sheet2&amp;#34;].map((e) =&amp;gt; ss.getSheetByName(e));  const obj = src  .</description>
    </item>
    
    <item>
      <title>Report: Images put with IMAGE function on Google Spreadsheet</title>
      <link>https://tanaikech.github.io/2021/10/29/report-images-put-with-image-function-on-google-spreadsheet/</link>
      <pubDate>Fri, 29 Oct 2021 10:28:49 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2021/10/29/report-images-put-with-image-function-on-google-spreadsheet/</guid>
      <description>Gists
This is a report about images put with &amp;ldquo;=IMAGE(IMAGE_URL)&amp;rdquo; function on Google Spreadsheet.
Experiment When &amp;ldquo;=IMAGE(IMAGE_URL)&amp;rdquo; is put to a cell &amp;ldquo;A1&amp;rdquo; on Spreadsheet, the image is shown in the cell as shown in the following image.
For this situation, when the following script is run,
const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(&amp;#34;Sheet1&amp;#34;); const range = sheet.getRange(&amp;#34;A1&amp;#34;); range.copyTo(range, { contentsOnly: true }); The following result is obtained. In this case, the formula is removed and an image can be seen as shown in the following image.</description>
    </item>
    
    <item>
      <title>File Picker using Google Apps Script and Javascript without 3rd party</title>
      <link>https://tanaikech.github.io/2021/10/25/file-picker-using-google-apps-script-and-javascript-without-3rd-party/</link>
      <pubDate>Mon, 25 Oct 2021 14:50:17 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2021/10/25/file-picker-using-google-apps-script-and-javascript-without-3rd-party/</guid>
      <description>GitHub
This is a sample script for the file picker using Google Apps Script and Javascript without 3rd party. I had created the same sample script before. Ref But, in the case of that script, jQuery is used. And, only Google Drive of own account could be used. In this sample script, 3rd party of jQuery is not used, and also, not only Google Drive of your own account, but also Google Drive of the service account can be used.</description>
    </item>
    
    <item>
      <title>Converting Values of Google Spreadsheet to Object using Google Apps Script</title>
      <link>https://tanaikech.github.io/2021/10/24/converting-values-of-google-spreadsheet-to-object-using-google-apps-script/</link>
      <pubDate>Sun, 24 Oct 2021 14:17:18 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2021/10/24/converting-values-of-google-spreadsheet-to-object-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for converting the values of Google Spreadsheet to an object using Google Apps Script.
Sample script function myFunction() {  const sheetName = &amp;#34;Sheet1&amp;#34;;  const [headers, ...rows] = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName).getDataRange().getValues();  const res = rows.map((r) =&amp;gt; headers.reduce((o, h, j) =&amp;gt; Object.assign(o, { [h]: r[j] }), {}));  console.log(res); }   When this script is run, the above sample image can be retrieved.
  In this sample script, the 1st row of the sheet is used as the header row.</description>
    </item>
    
    <item>
      <title>Updated: GAS Library - RichTextApp</title>
      <link>https://tanaikech.github.io/2021/10/20/updated-gas-library-richtextapp/</link>
      <pubDate>Wed, 20 Oct 2021 17:19:15 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2021/10/20/updated-gas-library-richtextapp/</guid>
      <description>RichTextApp was updated to v1.3.0   v1.3.0 (October 20, 2021)
 Added a new method of RangeToHTMLTableForSpreadsheet. In this method, the range on Google Spreadsheet is converted to a HTML table. Using this method, for example, you can send the specific range in the Spreadsheet as an email by including a HTML table.     You can see the sample HTML table at https://jsfiddle.net/oq9x458e/. I used this method for this thread of Stackoverflow.</description>
    </item>
    
    <item>
      <title>Taking Advantage of TextFinder for Google Spreadsheet</title>
      <link>https://tanaikech.github.io/2021/10/17/taking-advantage-of-textfinder-for-google-spreadsheet/</link>
      <pubDate>Sun, 17 Oct 2021 16:29:46 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2021/10/17/taking-advantage-of-textfinder-for-google-spreadsheet/</guid>
      <description>Gists
There is Class TextFinder in Spreadsheet service for Google Apps Script. Ref The TextFinder can search and replace the texts in the Spreadsheet using Google Apps Script. There is the method for createTextFinder in Class Spreadsheet, Class Sheet and Class Range. When these methods are used, you can search and replace the texts for all sheets in a Spreadsheet, the specific sheet, and the specific range in the specific sheet.</description>
    </item>
    
    <item>
      <title>Putting All Response Values from Google Form to Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2021/10/15/putting-all-response-values-from-google-form-to-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Fri, 15 Oct 2021 13:54:20 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2021/10/15/putting-all-response-values-from-google-form-to-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for putting all response values from Google Form to Google Spreadsheet using Google Apps Script.
Sample script Please copy and paste the following script to the script editor of Google Spreadsheet and set the variables of formId and sheetName.
function myFunction() {  const formId = &amp;#34;###&amp;#34;; // Please set the Google Form ID.  const sheetName = &amp;#34;Sheet1&amp;#34;; // Please set the sheet name of sheet you want to put the values.</description>
    </item>
    
    <item>
      <title>Large Decimal Numbers and Exponential Notation for Google Spreadsheet</title>
      <link>https://tanaikech.github.io/2021/10/15/large-decimal-numbers-and-exponential-notation-for-google-spreadsheet/</link>
      <pubDate>Fri, 15 Oct 2021 09:14:51 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2021/10/15/large-decimal-numbers-and-exponential-notation-for-google-spreadsheet/</guid>
      <description>Gists
In this report, it has investigated the large decimal numbers and the exponential notation for Google Spreadsheet. When the large decimal numbers are put to the Spreadsheet, the Spreadsheet automatically sets the display value using the exponential notation. In this report, the result when the values are retrieved by Spreadsheet service and Sheets API is shown.
Sample script At first, please create new Spreadsheet and open the script editor. And please copy and paste the following script.</description>
    </item>
    
    <item>
      <title>Compiling Continuous Numbers using Google Apps Script</title>
      <link>https://tanaikech.github.io/2021/10/08/compiling-continuous-numbers-using-google-apps-script/</link>
      <pubDate>Fri, 08 Oct 2021 21:01:15 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2021/10/08/compiling-continuous-numbers-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for compiling the continuous numbers using Google Apps Script. For example, the values of [4, 5, 9, 3, 10, 5, 11, 7, 7, 13, 1] are converted to [&amp;quot;1&amp;quot;,&amp;quot;3-5&amp;quot;,&amp;quot;7&amp;quot;,&amp;quot;9-11&amp;quot;,&amp;quot;13&amp;quot;].
Sample script const compilingNumbers = (ar) =&amp;gt; {  const { values } = [...new Set(ar.sort((a, b) =&amp;gt; a - b))].reduce(  (o, e, i, a) =&amp;gt; {  if (  o.temp.length == 0 ||  (o.</description>
    </item>
    
    <item>
      <title>Retrieving List of All Emails of Microsoft Account using Google Apps Script</title>
      <link>https://tanaikech.github.io/2021/10/04/retrieving-list-of-all-emails-of-microsoft-account-using-google-apps-script/</link>
      <pubDate>Mon, 04 Oct 2021 16:21:07 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2021/10/04/retrieving-list-of-all-emails-of-microsoft-account-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for retrieving the list of all emails of Microsoft account and putting them to Google Spreadsheet using Google Apps Script.
I updated OnedriveApp to v1.2.0 by adding 1 method for retrieving the access token and 7 methods for managing emails of Microsoft account. By this, the emails got to be able to be gotten and sent using Microsoft account using OnedriveApp with Google Apps Script.</description>
    </item>
    
    <item>
      <title>Benchmark: Concurrent Writing to Google Spreadsheet using Form</title>
      <link>https://tanaikech.github.io/2021/09/15/benchmark-concurrent-writing-to-google-spreadsheet-using-form/</link>
      <pubDate>Wed, 15 Sep 2021 14:42:25 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2021/09/15/benchmark-concurrent-writing-to-google-spreadsheet-using-form/</guid>
      <description>Gists
  Published: September 15, 2021
  Updated: September 17, 2021
 From the discussions, added data by changing the wait time of LockService for Web Apps.    Kanshi Tanaike
Introduction When the users try to write to a Spreadsheet using a form, the developers have to consider the concurrent submission from the form. For example, when multiple users submit the data with the form simultaneously, all data are possibly not to be saved to the Spreadsheet.</description>
    </item>
    
    <item>
      <title>Retrieving Hidden Rows and Showing Rows by Filter View on Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2021/05/21/retrieving-hidden-rows-and-showing-rows-by-filter-view-on-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Fri, 21 May 2021 11:56:36 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2021/05/21/retrieving-hidden-rows-and-showing-rows-by-filter-view-on-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for retrieving the hidden rows and showing rows by the filter view on Google Spreadsheet using Google Apps Script. In the current stage, there are no methods for directly retrieving the hidden rows and showing rows by the filter view in Spreadsheet service (SpreadsheetApp). And, isRowHiddenByFilter of Class Sheet cannot be used for the filter view. But, fortunately, when Sheets API is used, the filter view can be retrieved and created.</description>
    </item>
    
    <item>
      <title>Benchmark: Process Costs for Retrieving 1st Empty Cell and 1st Non Empty Cell of Specific Column in Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2021/05/19/benchmark-process-costs-for-retrieving-1st-empty-cell-and-1st-non-empty-cell-of-specific-column-in-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Wed, 19 May 2021 13:47:29 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2021/05/19/benchmark-process-costs-for-retrieving-1st-empty-cell-and-1st-non-empty-cell-of-specific-column-in-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
Introduction Here, I would like to report the process costs for retrieving the 1st empty cell or 1st non empty cell of the specific column of Google Spreadsheet using Google Apps Script (GAS). For this situations, the following 2 patterns can be considered.
  Retrieving 1st empty cell of specific column by searching from TOP of sheet
  Retrieving 1st NON empty cell of specific column by searching from BOTTOM of sheet</description>
    </item>
    
    <item>
      <title>Creating Colorful Buttons on Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2021/04/19/creating-colorful-buttons-on-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Mon, 19 Apr 2021 15:56:30 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2021/04/19/creating-colorful-buttons-on-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for creating the colorful buttons on Google Spreadsheet on Google Apps Script.
In order to achieve this, I have been looking for the method for creating the PNG image with the alpha channel using Google Apps Script. Recently, finally, I could find it. By this, the goal of this report got to be able to be achieved by the report of &amp;ldquo;Creating PNG Image with Alpha Channel using Google Apps Script&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Copying Protections for Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2021/03/26/copying-protections-for-spreadsheet-using-google-apps-script/</link>
      <pubDate>Fri, 26 Mar 2021 10:43:03 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2021/03/26/copying-protections-for-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for copying the protections for Spreadsheet using Google Apps Script. When several protections of the sheet protection and the range protection are set to a Google Spreadsheet and the Spreadsheet is copied using the script and the manual copy with the browser, unfortunately, the protections of ranges are not copied. And also, the protections of sheets can be copied. But, the editor emails are not included.</description>
    </item>
    
    <item>
      <title>Downloading Active Sheet in Google Spreadsheet as CSV and PDF file by Clicking Button</title>
      <link>https://tanaikech.github.io/2020/11/23/downloading-active-sheet-in-google-spreadsheet-as-csv-and-pdf-file-by-clicking-button/</link>
      <pubDate>Mon, 23 Nov 2020 14:10:37 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/11/23/downloading-active-sheet-in-google-spreadsheet-as-csv-and-pdf-file-by-clicking-button/</guid>
      <description>Gists
This is a sample script for downloading the active sheet in Google Spreadsheet to the local PC as a CSV file and a PDF file when a button on the side bar and the dialog is clicked. This is created with Google Apps Script and HTML&amp;amp;Javascript. In this post, the script of the previous post was modified.
Sample script Please create new Google Spreadsheet and copy and paste the following scripts to the script editor.</description>
    </item>
    
    <item>
      <title>Replacing Multiple Values in Google Spreadsheet with Low Process Cost using Google Apps Script</title>
      <link>https://tanaikech.github.io/2020/11/13/replacing-multiple-values-in-google-spreadsheet-with-low-process-cost-using-google-apps-script/</link>
      <pubDate>Fri, 13 Nov 2020 08:06:30 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/11/13/replacing-multiple-values-in-google-spreadsheet-with-low-process-cost-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for replacing the multiple values with various values in Google Spreadsheet with the low process cost using Google Apps Script. In this script, the batchUpdate method of Sheets API is used. So the request can be done by one API call. When Spreadsheet services is used for this situation, the values are retrieved from the sheet and replaced the retrieved values, and then, the updated values are put to the sheet.</description>
    </item>
    
    <item>
      <title>Benchmark: Measuring Process Costs for Formulas in Cells on Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2020/11/11/benchmark-measuring-process-costs-for-formulas-in-cells-on-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Wed, 11 Nov 2020 14:20:27 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/11/11/benchmark-measuring-process-costs-for-formulas-in-cells-on-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
Description When Google Spreadsheet is used, there is the case that the built-in functions and the custom functions in the cells are used. For the functions of Google Apps Script, there is the method for measuring the process cost. Ref But for the built-in functions, it is required to create the script for it. In this report, the script for measuring a function put in a cell has been proposed, and the process cost of the built-in functions has been measured.</description>
    </item>
    
    <item>
      <title>Downloading Google Spreadsheet as XLSX and PDF file by Clicking Button</title>
      <link>https://tanaikech.github.io/2020/11/10/downloading-google-spreadsheet-as-xlsx-and-pdf-file-by-clicking-button/</link>
      <pubDate>Tue, 10 Nov 2020 14:47:43 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/11/10/downloading-google-spreadsheet-as-xlsx-and-pdf-file-by-clicking-button/</guid>
      <description>Gists
This is a sample script for downloading Google Spreadsheet to the local PC as a XLSX file and a PDF file when a button on the side bar and the dialog is clicked. This is created with Google Apps Script and HTML&amp;amp;Javascript.
Sample script Please create new Google Spreadsheet and copy and paste the following scripts to the script editor. And please run openSidebar(). By this, the side bar is opened to the Spreadsheet.</description>
    </item>
    
    <item>
      <title>User Runs Script for Range Protected by Owner using Google Apps Script</title>
      <link>https://tanaikech.github.io/2020/11/05/user-runs-script-for-range-protected-by-owner-using-google-apps-script/</link>
      <pubDate>Thu, 05 Nov 2020 11:57:27 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/11/05/user-runs-script-for-range-protected-by-owner-using-google-apps-script/</guid>
      <description>Gists
There is a situation that it wants to make users run a script for the range protected by the owner using Google Apps Script. This is a sample script that an user runs a script for the range protected by the owner using Google Apps Script.
Demo This demonstration shows the following situations.
  Spreadsheet is shared with an user.
  The cell &amp;ldquo;A1&amp;rdquo; is protected by the owner.</description>
    </item>
    
    <item>
      <title>Creating Multiple Buttons on Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2020/10/21/creating-multiple-buttons-on-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Wed, 21 Oct 2020 11:37:42 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/10/21/creating-multiple-buttons-on-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for creating the multiple buttons on Google Spreadsheet using Google Apps Script.
Recently, I have got several contacts about this. I thought that when this is published, it might be useful for other users. So I published this sample script.
Sample script Please copy and paste the following script to the script editor of the container-bound script of Google Spreadsheet. And, please set the variables and run the function createButtons.</description>
    </item>
    
    <item>
      <title>Retrieving All Values from All Sheets from URL of 2PACX- of Web Published Google Spreadsheet using Python</title>
      <link>https://tanaikech.github.io/2020/10/13/retrieving-all-values-from-all-sheets-from-url-of-2pacx-of-web-published-google-spreadsheet-using-python/</link>
      <pubDate>Tue, 13 Oct 2020 14:59:48 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/10/13/retrieving-all-values-from-all-sheets-from-url-of-2pacx-of-web-published-google-spreadsheet-using-python/</guid>
      <description>Gists
This is a sample script for retrieving all values from all sheets from URL of 2PACX- of Web Published Google Spreadsheet using Python.
In this post, it supposes that the Google Spreadsheet has already been published for Web. Ref
Flow The flow of this method is as follows.
 Retrieve XLSX data from the URL of web published Google Spreadsheet as BytesIO data.  The URL is like https://docs.google.com/spreadsheets/d/e/2PACX-###/pubhtml.   XLSX data is parsed with openpyxl.</description>
    </item>
    
    <item>
      <title>Retrieving All Values from All Sheets from URL of 2PACX- of Web Published Google Spreadsheet using Node.js</title>
      <link>https://tanaikech.github.io/2020/10/12/retrieving-all-values-from-all-sheets-from-url-of-2pacx-of-web-published-google-spreadsheet-using-node.js/</link>
      <pubDate>Mon, 12 Oct 2020 14:23:43 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/10/12/retrieving-all-values-from-all-sheets-from-url-of-2pacx-of-web-published-google-spreadsheet-using-node.js/</guid>
      <description>Gists
This is a sample script for retrieving all values from all sheets from URL of 2PACX- of Web Published Google Spreadsheet using Node.js.
In this post, it supposes that the Google Spreadsheet has already been published for Web. Ref
Before you use this sample script, please install SheetJS js-xlsx.
Flow The flow of this method is as follows.
 Retrieve XLSX data from the URL of web published Google Spreadsheet as the buffer data.</description>
    </item>
    
    <item>
      <title>Retrieving All Values from All Sheets from URL of 2PACX- of Web Published Google Spreadsheet using Google Apps Script and Javascript</title>
      <link>https://tanaikech.github.io/2020/10/12/retrieving-all-values-from-all-sheets-from-url-of-2pacx-of-web-published-google-spreadsheet-using-google-apps-script-and-javascript/</link>
      <pubDate>Mon, 12 Oct 2020 13:42:39 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/10/12/retrieving-all-values-from-all-sheets-from-url-of-2pacx-of-web-published-google-spreadsheet-using-google-apps-script-and-javascript/</guid>
      <description>Gists
This is a sample script for retrieving all values from all sheets from URL of 2PACX- of Web Published Google Spreadsheet using Google Apps Script and Javascript.
In this post, it supposes that the Google Spreadsheet has already been published for Web. Ref
Flow The flow of this method is as follows.
 From the client side, send the URL of web published Google Spreadsheet to the Web Apps created by Google Apps Script.</description>
    </item>
    
    <item>
      <title>Sorting Cells on Google Spreadsheet with Background colors using Google Apps Script</title>
      <link>https://tanaikech.github.io/2020/10/09/sorting-cells-on-google-spreadsheet-with-background-colors-using-google-apps-script/</link>
      <pubDate>Fri, 09 Oct 2020 12:46:07 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/10/09/sorting-cells-on-google-spreadsheet-with-background-colors-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for sorting the cells on Google Spreadsheet with the background colors using Google Apps Script.
Unfortunately, in the current stage, it seems that sort(sortSpecObj) of Class Range cannot directly sort by the background colors of cells. But when Sheets API is used, this goal can be achieved. Here, &amp;ldquo;SortRangeRequest&amp;rdquo; of the method of &amp;ldquo;spreadsheets.batchUpdate&amp;rdquo; in Sheets API is used.
Flow The flow of this sample script is as follows.</description>
    </item>
    
    <item>
      <title>Setting Alternate Background Colors for Rows in Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2020/10/06/setting-alternate-background-colors-for-rows-in-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Tue, 06 Oct 2020 13:39:47 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/10/06/setting-alternate-background-colors-for-rows-in-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for setting alternate background colors for rows in Google Spreadsheet using Google Apps Script.
It has already been known when the conditional formatting rule and custom function are used, this can be simply achieved. Ref In this report, I would like to introduce the method for using Google Apps Script.
Sample script In this sample script, the values of column &amp;ldquo;A&amp;rdquo; are checked.
function myFunction() {  const colors = { color1: &amp;#34;#f4cccc&amp;#34;, color2: &amp;#34;#d9ead3&amp;#34; };   const sheet = SpreadsheetApp.</description>
    </item>
    
    <item>
      <title>Running Specific Function When Specific Sheet is Edited on Google Spreadsheet</title>
      <link>https://tanaikech.github.io/2020/10/04/running-specific-function-when-specific-sheet-is-edited-on-google-spreadsheet/</link>
      <pubDate>Sun, 04 Oct 2020 09:23:13 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/10/04/running-specific-function-when-specific-sheet-is-edited-on-google-spreadsheet/</guid>
      <description>Gists
This is a sample Google Apps Script for running the specific function when the specific sheet is edited.
Sample script Please copy and paste the following script to the container-bound script of Spreadsheet and set sheets object.
// When the cells are edited, this function is run by the fire of event trigger. function onEdit(e) {  // Please set the sheet name and function as follows.  const sheets = {  Sheet1: functionForSheet1, // Sheet1 is the sheet name.</description>
    </item>
    
    <item>
      <title>Creating Spreadsheet with Custom Header and Footer using Google Apps Script</title>
      <link>https://tanaikech.github.io/2020/09/25/creating-spreadsheet-with-custom-header-and-footer-using-google-apps-script/</link>
      <pubDate>Fri, 25 Sep 2020 09:52:41 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/09/25/creating-spreadsheet-with-custom-header-and-footer-using-google-apps-script/</guid>
      <description>Gists
In order to print and export as PDF file, this is a sample script for converting Spreadsheet to Spreadsheet which has the custom header and footer.
In this sample script, DocsServiceApp, which is Google Apps Script library, is used. And, in this case, the Spreadsheet with the custom header and footer is created as new Spreadsheet.
Before you use this script, please install DocsServiceApp and enable Drive API at Advanced Google services.</description>
    </item>
    
    <item>
      <title>GAS Library - DocsServiceApp</title>
      <link>https://tanaikech.github.io/2020/09/24/gas-library-docsserviceapp/</link>
      <pubDate>Thu, 24 Sep 2020 14:39:57 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/09/24/gas-library-docsserviceapp/</guid>
      <description>Overview This is a Google Apps Script library for supporting Document service, Docs API, Spreadsheet service, Sheets API, Slides service and Slides API. The aim of this library is to compensate the processes that they services cannot achieve.
Description The Google services, which are Document service, Docs API, Spreadsheet service, Sheets API, Slides service and Slides API, are growing now. But, unfortunately, there are still the processes that they cannot done.</description>
    </item>
    
    <item>
      <title>Converting Range in Google Spreadsheet as Image using Google Apps Script</title>
      <link>https://tanaikech.github.io/2020/08/19/converting-range-in-google-spreadsheet-as-image-using-google-apps-script/</link>
      <pubDate>Wed, 19 Aug 2020 14:25:38 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/08/19/converting-range-in-google-spreadsheet-as-image-using-google-apps-script/</guid>
      <description>Another approach 10 Aug 2022: Report: Challenging Exporting Selected Cells on Spreadsheet as Image using Google Apps Script and Javascript
Old approach Gists
This is a sample script for converting a range in Google Spreadsheet as an image data using Google Apps Script. Unfortunately, there are no methods for directly converting the range in Google Spreadsheet as an image data in the built-in functions. So in this case, as a workaround, Charts Service is used.</description>
    </item>
    
    <item>
      <title>Switching Buttons for Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2020/07/27/switching-buttons-for-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Mon, 27 Jul 2020 08:55:33 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/07/27/switching-buttons-for-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
These are the sample scripts for achieving the switching buttons for Google Spreadsheet using Google Apps Script. The management of images using Spreadsheet service is growing now. But, in the current stage, in order to achieve the switching buttons, it needs a little ingenuity. In this report, I would like to introduce 4 kinds of the switching buttons.
Pattern 1 In this pattern, the drawing is used as the button.</description>
    </item>
    
    <item>
      <title>Using Request Body of String JSON for Google APIs with googleapis of golang</title>
      <link>https://tanaikech.github.io/2020/07/20/using-request-body-of-string-json-for-google-apis-with-googleapis-of-golang/</link>
      <pubDate>Mon, 20 Jul 2020 16:34:16 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/07/20/using-request-body-of-string-json-for-google-apis-with-googleapis-of-golang/</guid>
      <description>Gists
This is a sample script for directly using the request body of the string JSON for Google APIs with googleapis of golang.
At googleapis for golang, when Google API is used, it is required to create the request body like this sample script. I have several contacts for creating about such request body. I thought that such script might be a bit difficult for users. I thought that when the string JSON object is directly used for this, it might be useful.</description>
    </item>
    
    <item>
      <title>Setting Number Format of Cells on Google Spreadsheet using batchUpdate in Sheets API with golang</title>
      <link>https://tanaikech.github.io/2020/07/19/setting-number-format-of-cells-on-google-spreadsheet-using-batchupdate-in-sheets-api-with-golang/</link>
      <pubDate>Sun, 19 Jul 2020 16:11:07 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/07/19/setting-number-format-of-cells-on-google-spreadsheet-using-batchupdate-in-sheets-api-with-golang/</guid>
      <description>Gists
This is a sample script for setting the number format of cells on Google Spreadsheet using batchUpdate in Sheets API with golang. In this case, googleapis for golang is used. The script of the authorization can be seen at the official document.
Sample script In this script, the number format of the column &amp;ldquo;A&amp;rdquo; is changed to yyyy-mm-dd hh:mm:ss. And, please include https://www.googleapis.com/auth/spreadsheets to the scopes.
sheetId := 12345678 // Please set the sheet ID which is not Spreadsheet ID.</description>
    </item>
    
    <item>
      <title>Updated: GAS Library - RichTextApp</title>
      <link>https://tanaikech.github.io/2020/07/03/updated-gas-library-richtextapp/</link>
      <pubDate>Fri, 03 Jul 2020 14:46:06 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/07/03/updated-gas-library-richtextapp/</guid>
      <description>RichTextApp was updated to v1.2.0   v1.2.0 (July 3, 2020)
 Added the method of AutoResizeFontForSpreadsheet. This method can automatically adjust the text length to fit in the cell width by changing the font size.    You can see the detail information here https://github.com/tanaikech/RichTextApp</description>
    </item>
    
    <item>
      <title>Adjusting Text Length to Fit in Cell Width on Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2020/07/03/adjusting-text-length-to-fit-in-cell-width-on-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Fri, 03 Jul 2020 14:31:24 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/07/03/adjusting-text-length-to-fit-in-cell-width-on-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for adjusting the text length to fit in the cell width on Google Spreadsheet using Google Apps Script. In this case, in order to fit to the cell width, the font size is changed.
Issue and workaround: Unfortunately, in the current stage, there are no methods for automatically resize the font size for fitting in the cell width in the Spreadsheet service. So in this case, it is required to think of the workaround.</description>
    </item>
    
    <item>
      <title>Search Dialog Sample using TextFinder with Google Apps Script</title>
      <link>https://tanaikech.github.io/2020/06/26/search-dialog-sample-using-textfinder-with-google-apps-script/</link>
      <pubDate>Fri, 26 Jun 2020 16:06:38 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/06/26/search-dialog-sample-using-textfinder-with-google-apps-script/</guid>
      <description>Gists
This is a sample script for the search dialog using TextFinder with Google Apps Script. If this sample script could help to indicate the possibility of TextFinder, I&amp;rsquo;m glad.
Demo In this demonstration, the value of test is searched. When &amp;quot;NEXT&amp;quot; is clicked, the next searched value is activated. When &amp;quot;PREVIOUS&amp;quot; is clicked, the previous searched value is activated. The search can be done for all sheets in the Google Spreadsheet.</description>
    </item>
    
    <item>
      <title>Workaround: Putting Multiple Hyperlinks to a Cell using Sheets API</title>
      <link>https://tanaikech.github.io/2020/06/26/workaround-putting-multiple-hyperlinks-to-a-cell-using-sheets-api/</link>
      <pubDate>Fri, 26 Jun 2020 08:09:54 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/06/26/workaround-putting-multiple-hyperlinks-to-a-cell-using-sheets-api/</guid>
      <description>Gists
This is a current workaround for putting the multiple hyperlinks to a cell using Sheets API.
Description Recently, at Spreadsheet service, the multiple hyperlinks got to be able to be put to a cell. Ref In this case, it can be achieved using RichTextValue. On the other hand, at Sheets API, in the current stage, there are no methods for directly putting the multiple hyperlinks to a cell. And also, such methods have not been added.</description>
    </item>
    
    <item>
      <title>Workaround: Correctly Exporting Charts on Google Spreadsheet as Images using Google Apps Script</title>
      <link>https://tanaikech.github.io/2020/06/23/workaround-correctly-exporting-charts-on-google-spreadsheet-as-images-using-google-apps-script/</link>
      <pubDate>Tue, 23 Jun 2020 13:22:32 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/06/23/workaround-correctly-exporting-charts-on-google-spreadsheet-as-images-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for correctly exporting the charts on Google Spreadsheet as the images using Google Apps Script. In the current stage, using Google Apps Script, when the charts on Google Spreadsheet are exported as the images, it seems that the exported images are not the same with the original one on Google Spreadsheet. About this, today, I could notice that I had answered for 2 questions. Q1, Q2 And also, I had already been reported this at the issue tracker.</description>
    </item>
    
    <item>
      <title>Updated: GAS Library - RichTextApp</title>
      <link>https://tanaikech.github.io/2020/06/17/updated-gas-library-richtextapp/</link>
      <pubDate>Wed, 17 Jun 2020 20:48:03 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/06/17/updated-gas-library-richtextapp/</guid>
      <description>RichTextApp was updated to v1.1.3   v1.1.3 (June 17, 2020)
 The variable name for the error processing was not correct. The bug was removed. Added a sample script for using this library.    You can see the detail information here https://github.com/tanaikech/RichTextApp</description>
    </item>
    
    <item>
      <title>Updated: GAS Library - RichTextApp</title>
      <link>https://tanaikech.github.io/2020/06/16/updated-gas-library-richtextapp/</link>
      <pubDate>Tue, 16 Jun 2020 15:11:58 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/06/16/updated-gas-library-richtextapp/</guid>
      <description>RichTextApp was updated to v1.1.2   v1.1.0 (June 16, 2020)
 Add new method of RichTextToHTMLForSpreadsheet. The method of RichTextToHTMLForSpreadsheet can convert the rich texts in the cells to the HTML format.    v1.1.1 (June 16, 2020)
 About the method of RichTextToHTMLForSpreadsheet, I forgot to convert hyperlinks to HTML. This was modified.    v1.1.2 (June 16, 2020)
 When one row and several columns are used as the range, only 1st column is returned.</description>
    </item>
    
    <item>
      <title>Highlighting Row and Column of Selected Cell using Google Apps Script</title>
      <link>https://tanaikech.github.io/2020/06/11/highlighting-row-and-column-of-selected-cell-using-google-apps-script/</link>
      <pubDate>Thu, 11 Jun 2020 20:55:18 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/06/11/highlighting-row-and-column-of-selected-cell-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for highlighting the row and column of the selected cell using Google Apps Script. For this, the OnSelectionChange event trigger is used.
Demo Sample script Please copy and paste the following script to the script editor of Spreadsheet. And, please select a cell. By this, the script is run by the OnSelectionChange event trigger.
function onSelectionChange(e) {  const range = e.range;  const sheet = range.</description>
    </item>
    
    <item>
      <title>Disabling Buttons Put on Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2020/06/11/disabling-buttons-put-on-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Thu, 11 Jun 2020 10:58:04 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/06/11/disabling-buttons-put-on-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
Description This is a sample script for disabling the buttons put on Google Spreadsheet using Google Apps Script.
When a script is run by clicking a button on Google Spreadsheet, there is the case that you don&amp;rsquo;t want to make users run the script in duplicate. This sample script achieves this situation.
Demo In this demonstration, 2 types of buttons are used. Those are the drawing and image, respectively. When the button is clicked, the worker of 10 seconds is run.</description>
    </item>
    
    <item>
      <title>Enhanced Custom Function for Google Spreadsheet using Web Apps as Wrapper</title>
      <link>https://tanaikech.github.io/2020/06/08/enhanced-custom-function-for-google-spreadsheet-using-web-apps-as-wrapper/</link>
      <pubDate>Mon, 08 Jun 2020 14:48:17 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/06/08/enhanced-custom-function-for-google-spreadsheet-using-web-apps-as-wrapper/</guid>
      <description>Overview This is a proposal of the enhanced custom function for Google Spreadsheet using Web Apps as the wrapper.
Demo Description When the custom function is used, in the current specification, the most methods except several methods (for example, one of them is UrlFetchApp.) that the authorization is required cannot be used. So for example, when the filenames in the folder are retrieved from the folder name, unfortunately, this cannot be directly achieved.</description>
    </item>
    
    <item>
      <title>Detecting Quickly Checked Checkboxes on Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2020/05/27/detecting-quickly-checked-checkboxes-on-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Wed, 27 May 2020 13:44:12 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/05/27/detecting-quickly-checked-checkboxes-on-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
Abstract This is a report for detecting quickly checked checkboxes on Google Spreadsheet using Google Apps Script. It supposes that when the checkbox is checked, a function of Google Apps Script is run by the event trigger. In this case, when the multiple checkboxes on Google Spreadsheet are checked quickly, the script cannot be run for all checked checkboxes, because of the response speed of the event trigger. It is considered that to understand the response of event trigger is useful for creating the application for Spreadsheet.</description>
    </item>
    
    <item>
      <title>Characteristics of Response for onSelectionChange</title>
      <link>https://tanaikech.github.io/2020/05/19/characteristics-of-response-for-onselectionchange/</link>
      <pubDate>Tue, 19 May 2020 14:19:51 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/05/19/characteristics-of-response-for-onselectionchange/</guid>
      <description>Gists
Abstract I have already reported about &amp;ldquo;Change Tab Detection on Google Spreadsheet using onSelectionChange Event Trigger with Google Apps Script&amp;rdquo;. Ref It is considered that when the situation which uses the event trigger of onSelectionChange is thought, the response speed is important. So, here, I investigated the characteristics of response for the event trigger of onSelectionChange.
Demo Experiment Sample script In order to investigate the response speed, I used the following sample script.</description>
    </item>
    
    <item>
      <title>Change Tab Detection on Google Spreadsheet using onSelectionChange Event Trigger with Google Apps Script</title>
      <link>https://tanaikech.github.io/2020/05/18/change-tab-detection-on-google-spreadsheet-using-onselectionchange-event-trigger-with-google-apps-script/</link>
      <pubDate>Mon, 18 May 2020 15:50:16 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/05/18/change-tab-detection-on-google-spreadsheet-using-onselectionchange-event-trigger-with-google-apps-script/</guid>
      <description>Gists
onSelectionChange has been released at April 22, 2020. But this couldn&amp;rsquo;t be used at the released day. But now, I could confirm that this got to be able to be used. So in order to test this event trigger, I prepared a simple sample script. This is a sample script for detecting the change tab on Google Spreadsheet using onSelectionChange Event Trigger with Google Apps Script.
Demo Usage  Please copy and paste the following script to the container-bound script of Google Spreadsheet, and save the script.</description>
    </item>
    
    <item>
      <title>Updated Specification of Google Spreadsheet: Multiple Hyperlinks to a Cell</title>
      <link>https://tanaikech.github.io/2020/05/15/updated-specification-of-google-spreadsheet-multiple-hyperlinks-to-a-cell/</link>
      <pubDate>Fri, 15 May 2020 13:24:36 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/05/15/updated-specification-of-google-spreadsheet-multiple-hyperlinks-to-a-cell/</guid>
      <description>Gists
Recently, it seems that the specification of Google Spreadsheet was updated. Before this, when a cell has only one hyperlink. In this case, the hyperlink was given to a cell using =HYPERLINK(&amp;quot;http://www.google.com/&amp;quot;, &amp;quot;Google&amp;quot;) as following figure.
But by the recent update, a cell got to be able to have multiple hyperlinks as following figure. In this case, the hyperlinks are set by the RichTextValue object.
In this report, I would like to introduce the method for setting and retrieving the multiple URLs for a cell.</description>
    </item>
    
    <item>
      <title>Hiding and Deleting Rows and Columns on Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2020/05/11/hiding-and-deleting-rows-and-columns-on-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Mon, 11 May 2020 16:18:42 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/05/11/hiding-and-deleting-rows-and-columns-on-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
These are the sample scripts for hiding and deleting rows and columns on Google Spreadsheet using Google Apps Script. I sometimes see the questions for hiding and deleting rows and columns on Spreadsheet at Stackoverflow. So here, I would like to introduce the sample scripts for this.
In this case, when the process costs of the scripts created by using Spreadsheet service and Sheets API are compared, the cost of script created by Sheets API is much lower than that of script created by Spreadsheet service.</description>
    </item>
    
    <item>
      <title>Workaround for Retrieving Direct Links of All Sheets from URL of 2PACX- of Web Published Google Spreadsheet</title>
      <link>https://tanaikech.github.io/2020/04/27/workaround-for-retrieving-direct-links-of-all-sheets-from-url-of-2pacx-of-web-published-google-spreadsheet/</link>
      <pubDate>Mon, 27 Apr 2020 08:51:54 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/04/27/workaround-for-retrieving-direct-links-of-all-sheets-from-url-of-2pacx-of-web-published-google-spreadsheet/</guid>
      <description>Gists
This is a sample script for retrieving the direct links of all sheets from the URL like https://docs.google.com/spreadsheets/d/e/2PACX-###/pubhtml of the web published Google Spreadsheet. This sample script can be used for the following situation.
 The Spreadsheet is published to Web and the URL like https://docs.google.com/spreadsheets/d/e/2PACX-###/pubhtml is known You are not the owner of Google Spreadsheet. You don&amp;rsquo;t know the Spreadsheet ID and Sheet IDs.  Under above situation, unfortunately, the direct links of each sheet cannot be directly retrieved.</description>
    </item>
    
    <item>
      <title>Updated: Expanding A1Notations using Google Apps Script</title>
      <link>https://tanaikech.github.io/2020/04/04/updated-expanding-a1notations-using-google-apps-script/</link>
      <pubDate>Sat, 04 Apr 2020 15:07:11 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/04/04/updated-expanding-a1notations-using-google-apps-script/</guid>
      <description>Gists
This sample script is for expanding a1Notations using Google Apps Script. This was updated from this sample script.
Sample script function expandA1Notations_(a1Notations, maxRow, maxColumn) {  maxRow = maxRow || &amp;#34;1000&amp;#34;;  maxColumn = maxColumn || &amp;#34;Z&amp;#34;;   // Ref: https://stackoverflow.com/a/21231012/7108653  const columnToLetter = column =&amp;gt; {  let temp,  letter = &amp;#34;&amp;#34;;  while (column &amp;gt; 0) {  temp = (column - 1) % 26;  letter = String.</description>
    </item>
    
    <item>
      <title>Drawing objects on Spreadsheet got to be able to be managed</title>
      <link>https://tanaikech.github.io/2020/04/03/drawing-objects-on-spreadsheet-got-to-be-able-to-be-managed/</link>
      <pubDate>Fri, 03 Apr 2020 14:22:53 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/04/03/drawing-objects-on-spreadsheet-got-to-be-able-to-be-managed/</guid>
      <description>The drawing objects on Google Spreadsheet got to be able to be managed by the update at April 2, 2020. Ref
By this update, we can assign the function to the drawing objects and remove the drawing objects. The following sample is for removing the drawing objects on the active sheet. Ref
SpreadsheetApp.getActiveSheet()  .getDrawings()  .forEach(e =&amp;gt; e.remove()); </description>
    </item>
    
    <item>
      <title>Retrieving Overwrapped Cells Between 2 Ranges on Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2020/04/03/retrieving-overwrapped-cells-between-2-ranges-on-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Fri, 03 Apr 2020 14:11:12 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/04/03/retrieving-overwrapped-cells-between-2-ranges-on-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for retrieving the overwrapped cells between 2 ranges on Google Spreadsheet using Google Apps Script. Please use this with enabling V8.
const getOverwrappedRanges_ = (rangeList1, rangeList2) =&amp;gt; {  if (  rangeList1.toString() != &amp;#34;RangeList&amp;#34; ||  rangeList2.toString() != &amp;#34;RangeList&amp;#34;  ) {  throw new Error(&amp;#34;Input RangeList object.&amp;#34;);  }   // Ref: https://stackoverflow.com/a/21231012/7108653  const columnToLetter = column =&amp;gt; {  let temp,  letter = &amp;#34;&amp;#34;;  while (column &amp;gt; 0) {  temp = (column - 1) % 26;  letter = String.</description>
    </item>
    
    <item>
      <title>GAS Library - RichTextApp</title>
      <link>https://tanaikech.github.io/2020/02/19/gas-library-richtextapp/</link>
      <pubDate>Wed, 19 Feb 2020 14:28:54 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/02/19/gas-library-richtextapp/</guid>
      <description>Overview This is a GAS library for copying the rich text with the text styles from Google Document to Google Spreadsheet or from Google Spreadsheet to Google Document using Google Apps Script (GAS).
Description Google Spreadsheet can use the rich text as the cell value. But I thought that it is difficult for me to directly edit the rich text in a cell. So I wanted to copy the rich text, that I edited at the Google Document, to the cell of Google Spreadsheet.</description>
    </item>
    
    <item>
      <title>Rearranging Columns on Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2020/02/10/rearranging-columns-on-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Mon, 10 Feb 2020 15:14:31 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/02/10/rearranging-columns-on-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for rearranging the columns on Google Spreadsheet using Google Apps Script.
Sample script In this sample script, the columns are rearranged with an array including the rearranged column indexes.
function rearrangeColumns(sheet, ar) {  var obj = ar.reduce(function(ar, e, i) {  return ar.concat({ from: e + 1, to: i + 1 });  }, []);  obj.sort(function(a, b) {  return a.to &amp;lt; b.</description>
    </item>
    
    <item>
      <title>GAS Library - DateFinder</title>
      <link>https://tanaikech.github.io/2020/01/30/gas-library-datefinder/</link>
      <pubDate>Thu, 30 Jan 2020 13:37:59 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/01/30/gas-library-datefinder/</guid>
      <description>Overview DateFinder is a GAS library for searching the date objects from the cell range on the sheet in the Spreadsheet and retrieving the searched range as the RangeList object using Google Apps Script (GAS).
Description There is the Class TextFinder for searching the text from cells of the Spreadsheet using the Google Apps Script. But in this case, the date object in the cell is used as the string. Namely, the values for searching are used as the same with the values retrieved by getDisplayValues().</description>
    </item>
    
    <item>
      <title>Dynamically Updating Custom Menu of Google Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2019/12/20/dynamically-updating-custom-menu-of-google-spreadsheet-using-google-apps-script/</link>
      <pubDate>Fri, 20 Dec 2019 07:48:41 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/12/20/dynamically-updating-custom-menu-of-google-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for dynamically updating the custom menu of Google Spreadsheet using Google Apps Script.
Demo In this demonstration, when the Spreadsheet is opened, 5 functions added to the custom menu. You can see that when a column is added and deleted, the custom menu is updated.
Issue and workaround for this goal Unfortunately, in the current stage, when a function is added to the custom menu with addItem method, the argument cannot been able to be used.</description>
    </item>
    
    <item>
      <title>Retrieving Values from Sheet Filtered by Slicer in Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2019/11/08/retrieving-values-from-sheet-filtered-by-slicer-in-spreadsheet-using-google-apps-script/</link>
      <pubDate>Fri, 08 Nov 2019 16:13:20 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/11/08/retrieving-values-from-sheet-filtered-by-slicer-in-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
Overview This is a sample script for retrieving values from a sheet filtered by Slicer in Spreadsheet using Google Apps Script.
Description By the update of Google side at November 6, 2019, Class Slicer was added. And also, for Sheets API, AddSlicerRequest and UpdateSlicerSpecRequest were added. By this, Slicer of Spreadsheet got to be able to be managed with Google Apps Script and other languages.
Here, I would like to introduce the method for retrieving values from a sheet filtered by Slicer in Spreadsheet using Google Apps Script.</description>
    </item>
    
    <item>
      <title>Automatic Recalculation of Custom Function on Spreadsheet Part 2</title>
      <link>https://tanaikech.github.io/2019/10/28/automatic-recalculation-of-custom-function-on-spreadsheet-part-2/</link>
      <pubDate>Mon, 28 Oct 2019 08:09:42 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/10/28/automatic-recalculation-of-custom-function-on-spreadsheet-part-2/</guid>
      <description>Gists
Description I have already reported about &amp;ldquo;Automatic Recalculation of Custom Function on Spreadsheet Part 1&amp;rdquo; at here. Here, I would like to introduce other workaround for forcibly recalculating the custom functions and built-in functions using Class TextFinder. Class TextFinder has added at April 5, 2019. By this, this workaround can be proposed.
Sample scripts Pattern 1 If you want to refresh all functions of all sheets in a Spreadsheet, you can use the following script.</description>
    </item>
    
    <item>
      <title>Updated: GAS Library - GetEditType</title>
      <link>https://tanaikech.github.io/2019/10/25/updated-gas-library-getedittype/</link>
      <pubDate>Fri, 25 Oct 2019 10:27:01 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/10/25/updated-gas-library-getedittype/</guid>
      <description>GetEditType was updated to v1.0.1.   v1.0.1 (October 25, 2019)
 Updated: This answer was reflected.    You can see the detail information here https://github.com/tanaikech/GetEditType</description>
    </item>
    
    <item>
      <title>Benchmark: Importing CSV Data to Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2019/08/28/benchmark-importing-csv-data-to-spreadsheet-using-google-apps-script/</link>
      <pubDate>Wed, 28 Aug 2019 12:01:20 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/08/28/benchmark-importing-csv-data-to-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
Kanshi Tanaike
Introduction Please be careful! This result can be only used for Google Apps Script.
There are a limit executing time for Google Apps Script (GAS). That is 6 minutes for Consumer and Google Apps free edition, and 30 minutes for G Suite and Early Access. 1 So many users always have to pay attention to reducing the process cost of scripts. So it is very important to know the process cost of various situations.</description>
    </item>
    
    <item>
      <title>Retrieving Values from Filtered Sheet in Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2019/07/28/retrieving-values-from-filtered-sheet-in-spreadsheet-using-google-apps-script/</link>
      <pubDate>Sun, 28 Jul 2019 17:05:28 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/07/28/retrieving-values-from-filtered-sheet-in-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for retrieving values from filtered Sheet in Spreadsheet using Google Apps Script. When the values are retrieved the filtered sheet by the basic filter, if setValues() and setDisplayValues() are used, all values without the filter are retrieved. In this script, I would like to introduce the method for retrieving the values from the filtered sheet using Google Apps Script.
In order to retrieve the values from the filtered sheet, one method has already been proposed.</description>
    </item>
    
    <item>
      <title>Creating a Table to Google Document by Retrieving Values from Google Spreadsheet for Python</title>
      <link>https://tanaikech.github.io/2019/07/21/creating-a-table-to-google-document-by-retrieving-values-from-google-spreadsheet-for-python/</link>
      <pubDate>Sun, 21 Jul 2019 14:27:28 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/07/21/creating-a-table-to-google-document-by-retrieving-values-from-google-spreadsheet-for-python/</guid>
      <description>Gists
This is a sample script for creating a table to Google Document by retrieving values from Google Spreadsheet for Python.
Before you use this script, please install python library of gdoctableapppy.
$ pip install gdoctableapppy Sample script: This sample script uses Service Account.
In this sample script, the values are retrieved from Sheet1!A1:C5 of Spreadsheet, and new table is created to the Document using the values.
from google.oauth2 import service_account from gdoctableapppy import gdoctableapp from googleapiclient.</description>
    </item>
    
    <item>
      <title>Creating a Table to Google Document by Retrieving Values from Google Spreadsheet for Node.js</title>
      <link>https://tanaikech.github.io/2019/07/21/creating-a-table-to-google-document-by-retrieving-values-from-google-spreadsheet-for-node.js/</link>
      <pubDate>Sun, 21 Jul 2019 11:25:19 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/07/21/creating-a-table-to-google-document-by-retrieving-values-from-google-spreadsheet-for-node.js/</guid>
      <description>Gists
This is a sample script for creating a table to Google Document by retrieving values from Google Spreadsheet for Node.js.
Before you use this script, please install Node.js module of node-gdoctableapp.
$ npm install --save-dev gdoctableapp or
$ npm install --global gdoctableapp Sample script: This sample script uses Service Account.
In this sample script, the values are retrieved from Sheet1!A1:C5 of Spreadsheet, and new table is created to the Document using the values.</description>
    </item>
    
    <item>
      <title>Creating a Table to Google Document by Retrieving Values from Google Spreadsheet for Golang</title>
      <link>https://tanaikech.github.io/2019/07/18/creating-a-table-to-google-document-by-retrieving-values-from-google-spreadsheet-for-golang/</link>
      <pubDate>Thu, 18 Jul 2019 13:49:54 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/07/18/creating-a-table-to-google-document-by-retrieving-values-from-google-spreadsheet-for-golang/</guid>
      <description>Gists
This is a sample script for creating a table to Google Document by retrieving values from Google Spreadsheet for Golang.
Before you use this script, please install go library of go-gdoctableapp.
$ go get -v -u github.com/tanaikech/go-gdoctableapp Sample script: This sample script uses Service Account.
In this sample script, the values are retrieved from Sheet1!A1:C5 of Spreadsheet, and new table is created to the Document using the values.
package mainimport (&amp;#34;encoding/json&amp;#34;&amp;#34;fmt&amp;#34;&amp;#34;io/ioutil&amp;#34;&amp;#34;log&amp;#34;&amp;#34;net/http&amp;#34;&amp;#34;os&amp;#34;gdoctableapp &amp;#34;github.</description>
    </item>
    
    <item>
      <title>Protecting Cells of Spreadsheet that Users Copied from Your Google Drive to User&#39;s Google Drive using Google Apps Script</title>
      <link>https://tanaikech.github.io/2019/07/17/protecting-cells-of-spreadsheet-that-users-copied-from-your-google-drive-to-users-google-drive-using-google-apps-script/</link>
      <pubDate>Wed, 17 Jul 2019 08:20:29 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/07/17/protecting-cells-of-spreadsheet-that-users-copied-from-your-google-drive-to-users-google-drive-using-google-apps-script/</guid>
      <description>Gists
This is the method for protecting cells of Spreadsheet that users copied from your Google Drive to user&amp;rsquo;s Google Drive using Google Apps Script.
Situation: This method supposes the following situation.
 You want to make users copy a Spreadsheet on your Google Drive to user&amp;rsquo;s Google Drive. - Your Spreadsheet has several protected ranges. - Your Spreadsheet is shared with the user. - User doesn&amp;rsquo;t have own folder shared with you.</description>
    </item>
    
    <item>
      <title>GAS Library - GetEditType</title>
      <link>https://tanaikech.github.io/2019/06/10/gas-library-getedittype/</link>
      <pubDate>Mon, 10 Jun 2019 16:19:50 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/06/10/gas-library-getedittype/</guid>
      <description>Overview GetEditType is a GAS library for retrieving the edit types of the OnEdit event trigger of Spreadsheet using Google Apps Script (GAS).
Description In the case that the OnEdit event trigger (simple and installable triggers) is used at Spreadsheet, when users manually edited the cell of Spreadsheet, the trigger is fired. At this time, there is the case that I want to know the edit type. For example, I would like to know about the following edit types.</description>
    </item>
    
    <item>
      <title>Possibility of Real Time Processes In a Cell on Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2019/05/22/possibility-of-real-time-processes-in-a-cell-on-spreadsheet-using-google-apps-script/</link>
      <pubDate>Wed, 22 May 2019 10:12:54 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/05/22/possibility-of-real-time-processes-in-a-cell-on-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for investigating the possibility of the real time processes in a cell on Google Spreadsheet using Google Apps Script. As a sample situation, it tried the real time clock in a cell on Google Spreadsheet using Google Apps Script.
Demo: Usage: When you use this script, please do the following flow.
 Copy and paste the following script to the script editor (the container-bound script of Spreadsheet).</description>
    </item>
    
    <item>
      <title>Limitations for Inserting Images to Google Docs</title>
      <link>https://tanaikech.github.io/2019/04/05/limitations-for-inserting-images-to-google-docs/</link>
      <pubDate>Fri, 05 Apr 2019 11:49:48 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/04/05/limitations-for-inserting-images-to-google-docs/</guid>
      <description>Gists
When an image is inserted to Google Docs (Spreadsheet, Document and Slides) using the method of insertImage using Google Apps Script, there is the case that the error occurs. The error messages are &amp;ldquo;server error&amp;rdquo; and &amp;ldquo;invalid image data&amp;rdquo;. Here, I would like to introduce the limitations for inserting images to Google Docs. As the result, it was found that the limitation is due to both the mimeTypes and the area of image rather than the file size.</description>
    </item>
    
    <item>
      <title>Adding Title of vAxis to Embedded Chart on Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2019/03/04/adding-title-of-vaxis-to-embedded-chart-on-spreadsheet-using-google-apps-script/</link>
      <pubDate>Mon, 04 Mar 2019 13:48:04 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/03/04/adding-title-of-vaxis-to-embedded-chart-on-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
When a chart is created by using EmbeddedChartBuilder of Spreadsheet service, the title of vAxis which is put by setOption(&amp;quot;vAxis&amp;quot;, {title: &amp;quot;y axis&amp;quot;}) doesn&amp;rsquo;t work. It is considered that this is a bug. Because I have confirmed that this had worked fine. Ref But this specification had been changed. So I would like to introduce the method for adding the title of vAxis when a chart is created using Google Apps Script.</description>
    </item>
    
    <item>
      <title>Creating One-time Writing Cells using Google Apps Script</title>
      <link>https://tanaikech.github.io/2019/01/24/creating-one-time-writing-cells-using-google-apps-script/</link>
      <pubDate>Thu, 24 Jan 2019 11:37:52 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/01/24/creating-one-time-writing-cells-using-google-apps-script/</guid>
      <description>Gists
This sample script is for creating one-time writing cells using Google Apps Script. At first, it supposes the following situation.
 A Spreadsheet is shared with users. The owner of Spreadsheet is you. After users put a value to a cell, you don&amp;rsquo;t want to make users edit the cell again.  Namely, you want to protect the cell.    This sample script achieves above situation.
Preparation Before you use this script, please do the following flow.</description>
    </item>
    
    <item>
      <title>Benchmark: Reading and Writing Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2018/10/12/benchmark-reading-and-writing-spreadsheet-using-google-apps-script/</link>
      <pubDate>Fri, 12 Oct 2018 10:42:45 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/10/12/benchmark-reading-and-writing-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
Benchmark: Reading and Writing Spreadsheet using Google Apps Script October 18, 2018 Updated. In order to compare with Advanced Google Service, a result of Sheets API by UrlFetchApp was added to Appendix.
Kanshi Tanaike
Introduction Please be careful! This result can be only used for Google Apps Script.
There are a limit executing time for Google Apps Script (GAS). That is 6 minutes for Consumer and Google Apps free edition, and 30 minutes for G Suite and Early Access.</description>
    </item>
    
    <item>
      <title>Expanding A1Notations using Google Apps Script</title>
      <link>https://tanaikech.github.io/2018/09/08/expanding-a1notations-using-google-apps-script/</link>
      <pubDate>Sat, 08 Sep 2018 10:57:43 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/09/08/expanding-a1notations-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for expanding a1Notations using Google Apps Script (GAS). In this script, for example, &amp;ldquo;A1:E3&amp;rdquo; is expanded to &amp;ldquo;A1, B1, C1, D1, E1, A2, B2, C2, D2, E2, A3, B3, C3, D3, E3&amp;rdquo;. When each cell in &amp;ldquo;A1:E3&amp;rdquo; is checked, this script might be able to be used. If this was useful for your situation, I&amp;rsquo;m glad.
Script: function expandA1Notation(a1Notations) {  var columnToLetter = function(column) {  var temp, letter = &amp;#39;&amp;#39;;  while (column &amp;gt; 0) {  temp = (column - 1) % 26;  letter = String.</description>
    </item>
    
    <item>
      <title>GAS Library - RangeListApp</title>
      <link>https://tanaikech.github.io/2018/07/27/gas-library-rangelistapp/</link>
      <pubDate>Fri, 27 Jul 2018 13:52:27 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/07/27/gas-library-rangelistapp/</guid>
      <description>Overview RangeListApp is a GAS library for retrieving, putting and replacing values for Spreadsheet by a range list with a1Notation using Google Apps Script (GAS).
Description There is Class RangeList as one of classes for Spreadsheet. There is setValue(value) in Class RangeList as a method. setValue(value) puts value to the cells of range list. Recently, when I used this method, I noticed that the following situations what I want cannot be achieved.</description>
    </item>
    
    <item>
      <title>Retrieve Last of Specific Row and Column</title>
      <link>https://tanaikech.github.io/2018/07/16/retrieve-last-of-specific-row-and-column/</link>
      <pubDate>Mon, 16 Jul 2018 12:59:01 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/07/16/retrieve-last-of-specific-row-and-column/</guid>
      <description>Gists
This is a sample script for retrieving the last coordinate of the specific row and column. When the methods of getLastRow() and getLastColumn() of Class Range for Spreadsheet are used, the last coordinates of the vertical and horizontal data range can be retrieved. When users want to retrieve the last coordinates of each row and column, there are no methods. So I created this script. I think that there are several scripts for this situation.</description>
    </item>
    
    <item>
      <title>Limitation of Images for Inserting to Spreadsheet using Google Apps Script</title>
      <link>https://tanaikech.github.io/2018/07/10/limitation-of-images-for-inserting-to-spreadsheet-using-google-apps-script/</link>
      <pubDate>Tue, 10 Jul 2018 08:51:44 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/07/10/limitation-of-images-for-inserting-to-spreadsheet-using-google-apps-script/</guid>
      <description>Gists
Introduction Here I would like to introduce about the limitation of images for inserting to Spreadsheet using Google Apps Script (GAS). When you want to insert the images to Spreadsheet using GAS, insertImage() of class Sheet is usually used for this situation. At this time, an error sometimes occurs. This indicates that there is the limitation for inserting images to Spreadsheet. So I investigated the limitation.
As a result, it was found that the limitation depends on the image area (pixels^2) rather than the file size of it.</description>
    </item>
    
    <item>
      <title>Retrieves All Named Ranges in Spreadsheet as a1Notation</title>
      <link>https://tanaikech.github.io/2018/04/25/retrieves-all-named-ranges-in-spreadsheet-as-a1notation/</link>
      <pubDate>Wed, 25 Apr 2018 11:34:28 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/04/25/retrieves-all-named-ranges-in-spreadsheet-as-a1notation/</guid>
      <description>Gists
This is a sample script for Google Apps Script (GAS). This script retrieves all named ranges in Spreadsheet. The names and range of the retrieved named ranges are output as the keys and the values of JSON object, respectively. The sample output is {&amp;quot;name1&amp;quot;: &amp;quot;Sheet1!A1:B2&amp;quot;, &amp;quot;name2&amp;quot;: &amp;quot;Sheet2!B1:C2&amp;quot;,,,}. The name of named range has to be only one in the spreadsheet. This was used.
Sheets.Spreadsheets.get() of Sheets API can retrieve all named ranges.</description>
    </item>
    
    <item>
      <title>Append Values by Inserting Rows using Google Sheets API</title>
      <link>https://tanaikech.github.io/2018/02/27/append-values-by-inserting-rows-using-google-sheets-api/</link>
      <pubDate>Tue, 27 Feb 2018 09:51:55 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/02/27/append-values-by-inserting-rows-using-google-sheets-api/</guid>
      <description>Gists
In the case appending values to cell by inserting rows, when sheets.spreadsheets.values.append is used, the values are appended to the next empty row of the last row. If you want to append values to between cells with values by inserting row, you can achieve it using sheets.spreadsheets.batchUpdate.
When you use this, please use your access token.
Endpoint : POST https://sheets.googleapis.com/v4/spreadsheets/### spreadsheet ID ###:batchUpdate Request body : In this request body, it appends the data of &amp;ldquo;sample1, sample2, sample3&amp;rdquo; to &amp;ldquo;A1:A3&amp;rdquo; of the sheetId of &amp;ldquo;1234567890&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Automatic Recalculation of Custom Function on Spreadsheet Part 1</title>
      <link>https://tanaikech.github.io/2017/12/23/automatic-recalculation-of-custom-function-on-spreadsheet-part-1/</link>
      <pubDate>Sat, 23 Dec 2017 09:59:13 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/12/23/automatic-recalculation-of-custom-function-on-spreadsheet-part-1/</guid>
      <description>Gists
In this report, I would like to introduce a workaround for automatically recalculating custom functions on Spreadsheet.
1. Situation The sample situation is below. This is a sample situation for this document.
 There are 3 sheets with &amp;ldquo;sheet1&amp;rdquo;, &amp;ldquo;sheet2&amp;rdquo; and &amp;ldquo;sheet3&amp;rdquo; of sheet name in a Spreadsheet. Calculate the summation of values of &amp;ldquo;A1&amp;rdquo; of each sheet using a custom function. Sample script of the custom function is as follows.</description>
    </item>
    
    <item>
      <title>Measuring Execution Time of Built-In Functions for Google Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/10/27/measuring-execution-time-of-built-in-functions-for-google-spreadsheet/</link>
      <pubDate>Fri, 27 Oct 2017 10:06:19 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/10/27/measuring-execution-time-of-built-in-functions-for-google-spreadsheet/</guid>
      <description>Gists
This sample script is for measuring the execution time of built-in functions for Google Spreadsheet. Unfortunately, there are not measurement tools for retrieving the execution time of built-in functions. So I thought of about a workaround.
Flow :  Import a value to a cell. The value is anything good, because this is used as a trigger. Please do this by yourself.  Custom functions cannot use setValue(). So I used onEdit().</description>
    </item>
    
    <item>
      <title>Straightening Elements in 2 Dimensional Array using Google Apps Script</title>
      <link>https://tanaikech.github.io/2017/10/26/straightening-elements-in-2-dimensional-array-using-google-apps-script/</link>
      <pubDate>Thu, 26 Oct 2017 16:51:30 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/10/26/straightening-elements-in-2-dimensional-array-using-google-apps-script/</guid>
      <description>Gists
This sample script is for straightening elements in 2 dimensional array using Google Apps Script (GAS). When applications using Spreadsheet are developed by GAS, it usually uses 2 dimensional array by setValues(). And the lengths of each element are required to be the same. On the other hand, data used for the applications might not be the same length for each element in 2 dimensional array. This sample script can be used under such situation.</description>
    </item>
    
    <item>
      <title>Enhanced onEdit(e) using Google Apps Script</title>
      <link>https://tanaikech.github.io/2017/10/11/enhanced-onedite-using-google-apps-script/</link>
      <pubDate>Wed, 11 Oct 2017 09:43:22 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/10/11/enhanced-onedite-using-google-apps-script/</guid>
      <description>Gists
onEdit(e) which is used for the Edit event on Spreadsheet has the old value as e.oldValue. The specifications for this are as follows.
 When an user edited a single &amp;ldquo;A1&amp;rdquo; cell, e of onEdit(e) shows hoge for e.oldValue and fuga for e.value. When an user edited the &amp;ldquo;A1:A2&amp;rdquo; multiple cells, e.oldValue and e.value of onEdit(e) are not shown anything. When an user copied and pasted from other cell, e.</description>
    </item>
    
    <item>
      <title>spreadsheets.values.batchUpdate using Golang</title>
      <link>https://tanaikech.github.io/2017/09/15/spreadsheets.values.batchupdate-using-golang/</link>
      <pubDate>Fri, 15 Sep 2017 14:14:50 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/09/15/spreadsheets.values.batchupdate-using-golang/</guid>
      <description>Gists
Flow : In my sample script, the script was made using the Quickstart. The flow to use this sample script is as follows.
 For Go Quickstart, please do Step 1 and Step 2. Please put client_secret.json to the same directory with my sample script. Copy and paste my sample script, and create it as new script file. Run the script. When Go to the following link in your browser then type the authorization code: is shown on your terminal, please copy the URL and paste to your browser.</description>
    </item>
    
    <item>
      <title>Enhanced copyTo() using Google Apps Script</title>
      <link>https://tanaikech.github.io/2017/09/03/enhanced-copyto-using-google-apps-script/</link>
      <pubDate>Sun, 03 Sep 2017 10:35:34 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/09/03/enhanced-copyto-using-google-apps-script/</guid>
      <description>Here, it introduces an application of Retrieving Spreadsheet ID from Range using Google Apps Script.
Please check this. https://github.com/tanaikech/getSpreadsheetByRange</description>
    </item>
    
    <item>
      <title>Retrieving Spreadsheet ID from Range using Google Apps Script</title>
      <link>https://tanaikech.github.io/2017/08/31/retrieving-spreadsheet-id-from-range-using-google-apps-script/</link>
      <pubDate>Thu, 31 Aug 2017 13:50:07 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/08/31/retrieving-spreadsheet-id-from-range-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for retrieving spreadsheet ID from a range using Google Apps Script. I sometimes want to retrieve spreadsheet ID from ranges. In such case, I always use this.
 Range -&amp;gt; Retrieve Sheet using getSheet() -&amp;gt; Retrieve Spreadsheet using getParent() -&amp;gt; Retrieve spreadsheet ID  var id = &amp;#34;123456789abcdefg&amp;#34;; var sheet = &amp;#34;Sheet&amp;#34;; var cells = &amp;#34;a1:b10&amp;#34;; var range = SpreadsheetApp.openById(id).getSheetByName(sheet).getRange(cells);  var id = range.</description>
    </item>
    
    <item>
      <title>Retrieving Values By Header Title for Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/08/27/retrieving-values-by-header-title-for-spreadsheet/</link>
      <pubDate>Sun, 27 Aug 2017 14:05:11 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/08/27/retrieving-values-by-header-title-for-spreadsheet/</guid>
      <description>Gists
This is a sample script for retrieving values by header title for Spreadsheet. This is created by Google Apps Script. The main script is as follows.
Main script : When the instance is retrieved, all data of the sheet is analyzed. So when the each value is retrieved, the speed is fast.
function GetValueByKey(sheetname) {  return new getValueByKey(sheetname); };  (function(r) {  var getValueByKey;  getValueByKey = (function() {  getValueByKey.</description>
    </item>
    
    <item>
      <title>Converting a1Notation to GridRange for Google Sheets API</title>
      <link>https://tanaikech.github.io/2017/07/31/converting-a1notation-to-gridrange-for-google-sheets-api/</link>
      <pubDate>Mon, 31 Jul 2017 14:38:28 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/07/31/converting-a1notation-to-gridrange-for-google-sheets-api/</guid>
      <description>Gists
When it uses Google Sheets API v4, GridRange is used for it as the range property. These sample scripts are for converting from a1Notation to GridRange. You can chose from following 2 scripts. Both scripts can retrieve the same result.
Script 1 : This is from me.
function a1notation2gridrange1(sheetid, a1notation) {  var data = a1notation.match(/(^.+)!(.+):(.+$)/);  var ss = SpreadsheetApp.openById(sheetid).getSheetByName(data[1]);  var range = ss.getRange(data[2] + &amp;#34;:&amp;#34; + data[3]);  var gridRange = {  sheetId: ss.</description>
    </item>
    
    <item>
      <title>Pseudo Browser with Google Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/07/05/pseudo-browser-with-google-spreadsheet/</link>
      <pubDate>Wed, 05 Jul 2017 16:45:01 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/07/05/pseudo-browser-with-google-spreadsheet/</guid>
      <description>Gist
Overview This is a sample script for creating the pseudo browser using Google Spreadsheet.
Description I unexpectedly noticed this. I think that this is for off-line browsing using HTML data. So there are many limitations. At first, please confirm them.
 Limitations  It cannot move from opened site to other outside site. If the outer site is opened as a new wind, your own browser is opened and move there.</description>
    </item>
    
    <item>
      <title>Search Route and Embedding Map using Custom Function on Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/06/14/search-route-and-embedding-map-using-custom-function-on-spreadsheet/</link>
      <pubDate>Wed, 14 Jun 2017 17:35:47 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/14/search-route-and-embedding-map-using-custom-function-on-spreadsheet/</guid>
      <description>This sample script is for searching route between place A and B and embedding a map by custom function on Spreadsheet.
I think that this method is one of various ideas.
Problem When the map is embedded to a cell on spreadsheet as an image, the function =IMAGE() is suitable for this situation. However, Class Maps, setFormula() for importing =IMAGE() and DriveApp.createFile() for creating images from maps also cannot be used for custom functions.</description>
    </item>
    
    <item>
      <title>Giving and Retrieving Parameters for Chart at GAS</title>
      <link>https://tanaikech.github.io/2017/06/12/giving-and-retrieving-parameters-for-chart-at-gas/</link>
      <pubDate>Mon, 12 Jun 2017 11:11:06 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/12/giving-and-retrieving-parameters-for-chart-at-gas/</guid>
      <description>This sample script is for retrieving parameters from a chart. The chart created by both Google Apps Script and manually operation can be used.
Creates Chart When a chart is created, it supposes following parameters.
var parameters = {  &amp;#34;title&amp;#34;: &amp;#34;x axis&amp;#34;,  &amp;#34;fontName&amp;#34;: &amp;#34;Arial&amp;#34;,  &amp;#34;minValue&amp;#34;: 0,  &amp;#34;maxValue&amp;#34;: 100,  &amp;#34;titleTextStyle&amp;#34;: {  &amp;#34;color&amp;#34;: &amp;#34;#c0c0c0&amp;#34;,  &amp;#34;fontSize&amp;#34;: 10,  &amp;#34;fontName&amp;#34;: &amp;#34;Roboto&amp;#34;,  &amp;#34;italic&amp;#34;: true,  &amp;#34;bold&amp;#34;: false  } };  .</description>
    </item>
    
    <item>
      <title>Embedding Animation GIF in A Cell on Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/06/06/embedding-animation-gif-in-a-cell-on-spreadsheet/</link>
      <pubDate>Tue, 06 Jun 2017 16:47:41 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/06/embedding-animation-gif-in-a-cell-on-spreadsheet/</guid>
      <description>This sample script is for embedding animation GIF in a cell using custom function on Spreadsheet.
I think that this method is one of various ideas.
Problem There are some limitations.
 Images of jpeg and png can be embedded in a cell using =IMAGE(). But when animation GIF is embedded using it, GIF is not played. insertImage() can insert the animation GIF to sheet. But it is not imported to one cell.</description>
    </item>
    
    <item>
      <title>OCR using Custom Function on Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/06/06/ocr-using-custom-function-on-spreadsheet/</link>
      <pubDate>Tue, 06 Jun 2017 07:53:57 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/06/ocr-using-custom-function-on-spreadsheet/</guid>
      <description>This sample script performs OCR and imports resultant text to a cell using custom function on Spreadsheet.
Drive API has a function to do OCR. It was used for this sample.
I think that this method is one of various ideas.
Problem When OCR is performed and imported the result to a cell on spreadsheet, there are some limitations. DriveApp, UrlFetchApp, setFormula() cannot be used for custom functions.
Solution In order to avoid these limitations, I used Web Apps.</description>
    </item>
    
    <item>
      <title>Embedding a Map to a Cell using Custom Function on Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/06/04/embedding-a-map-to-a-cell-using-custom-function-on-spreadsheet/</link>
      <pubDate>Sun, 04 Jun 2017 12:02:28 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/04/embedding-a-map-to-a-cell-using-custom-function-on-spreadsheet/</guid>
      <description>This sample script embeds a map to a cell using custom function on Spreadsheet.
I think that this method is one of various ideas.
Problem When the map is embeded to a cell on spreadsheet as an image, the function =IMAGE() is suitable for this situation. However, setFormula() for importing =IMAGE() and DriveApp.createFile() for creating images from maps also cannot be used for custom functions.
Solution In order to avoid these limitations, I used Web Apps.</description>
    </item>
    
    <item>
      <title>Embedding a Chart to a Cell using Custom Function on Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/05/26/embedding-a-chart-to-a-cell-using-custom-function-on-spreadsheet/</link>
      <pubDate>Fri, 26 May 2017 11:59:06 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/26/embedding-a-chart-to-a-cell-using-custom-function-on-spreadsheet/</guid>
      <description>This sample script embeds a chart to a cell using custom function on Spreadsheet.
I think that this method is one of various ideas.
Problem When you want to create a chart and embed it to a cell using custom functions, you notice that insertChart() cannot be used. There are some limitations for using custom functions. But insertChart() creates floating charts. So in order to embed a chart to a cell, the function =IMAGE() is suitable for this situation.</description>
    </item>
    
    <item>
      <title>Changing Line to Bars for Combo Chart using GAS</title>
      <link>https://tanaikech.github.io/2017/05/16/changing-line-to-bars-for-combo-chart-using-gas/</link>
      <pubDate>Tue, 16 May 2017 11:42:56 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/16/changing-line-to-bars-for-combo-chart-using-gas/</guid>
      <description>Sample data This is a sample data for this sample script. The column B was created by the normal distribution formula, and the column C was created by multiplying random number for column B.
A, B, C 1.0, 0.0001, 0.0000 1.5, 0.0009, 0.0006 2.0, 0.0044, 0.0037 2.5, 0.0175, 0.0133 3.0, 0.0540, 0.0236 3.5, 0.1296, 0.0533 4.0, 0.2420, 0.0073 4.5, 0.3522, 0.2468 5.0, 0.3990, 0.0843 5.5, 0.3522, 0.3352 6.0, 0.2420, 0.2201 6.</description>
    </item>
    
    <item>
      <title>Sending E-mail When Spreadsheet was Edited from Outside by Sheet API</title>
      <link>https://tanaikech.github.io/2017/05/14/sending-e-mail-when-spreadsheet-was-edited-from-outside-by-sheet-api/</link>
      <pubDate>Sun, 14 May 2017 17:43:52 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/14/sending-e-mail-when-spreadsheet-was-edited-from-outside-by-sheet-api/</guid>
      <description>This sample script sends an e-mail, when spreadsheet was edited from outside by Sheet API v4. When you use this sample, please create a container bound script with spreadsheet which is edited by Sheet API. And please input your e-mail and run firstly a method of createTrigger(). By this, a trigger is installed as onChange(). After this, edit spreadsheet from outside by Sheet API v4.
When when spreadsheet was edited from outside by Sheet API v4, I used sendEmail() as a sample, because script editor is closed.</description>
    </item>
    
    <item>
      <title>Retrieving User Information with Shared Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/04/27/retrieving-user-information-with-shared-spreadsheet/</link>
      <pubDate>Thu, 27 Apr 2017 14:34:22 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/04/27/retrieving-user-information-with-shared-spreadsheet/</guid>
      <description>This sample script retrieves the user information which is editing the shared spreadsheet.
It was found as follows.
 User information retrieving by Class Session is the owner and users which installed triggers by themselves. When each user installs a trigger, user information retrieving by Class Session losts the accuracy. So user information has to be retrieved using a temporally installed trigger. Using onOpen(), it cannot directly install triggers and authorize.</description>
    </item>
    
    <item>
      <title>Send E-mail with Excel file converted from Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/02/16/send-e-mail-with-excel-file-converted-from-spreadsheet/</link>
      <pubDate>Thu, 16 Feb 2017 11:53:50 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/16/send-e-mail-with-excel-file-converted-from-spreadsheet/</guid>
      <description>This sample script sends an e-mail with an Excel file exported from Spreadsheet as an attachment file.
function excelSender() { var sheetID = [Sheet ID]; var xlsxName = [Excel file name]; var params = { &amp;#34;headers&amp;#34; : {Authorization: &amp;#34;Bearer [Retrieved AccessToken]&amp;#34;}, &amp;#34;muteHttpExceptions&amp;#34; : true }; var dUrl = &amp;#34;https://www.googleapis.com/drive/v3/files/&amp;#34; + sheetID + &amp;#34;/export?mimeType=application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&amp;#34; var xlsxlFile = UrlFetchApp.fetch(dUrl, params).getBlob().setName(xlsxName); MailApp.sendEmail({ to: [Mail address], subject: &amp;#34;sample subject&amp;#34;, body: &amp;#34;sample body&amp;#34;, attachments: [xlsxlFile] }); } Is ScriptApp.</description>
    </item>
    
    <item>
      <title>Download a CSV File from Spreadsheet Using Google HTML Service</title>
      <link>https://tanaikech.github.io/2017/02/16/download-a-csv-file-from-spreadsheet-using-google-html-service/</link>
      <pubDate>Thu, 16 Feb 2017 10:31:37 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/16/download-a-csv-file-from-spreadsheet-using-google-html-service/</guid>
      <description>Here, I introduce how to download a CSV file from spreadsheet using Google HTML Service.
 Using &amp;ldquo;onOpen()&amp;rdquo;, it addes menu for launching a dialog.   After launching the dialog, &amp;ldquo;getFileUrl()&amp;rdquo; is launched by pushing a button. &amp;ldquo;getFileUrl()&amp;rdquo; exports a CSV file and outputs download URL.
  The CSV file is downloaded by &amp;ldquo;executeDownload()&amp;rdquo;.
  Please put both HTML and GAS to a GAS project.HTML : download.html &amp;lt;!</description>
    </item>
    
    <item>
      <title>Making charts at spreadsheet</title>
      <link>https://tanaikech.github.io/2017/02/13/making-charts-at-spreadsheet/</link>
      <pubDate>Mon, 13 Feb 2017 08:57:58 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/13/making-charts-at-spreadsheet/</guid>
      <description>var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet(); var chart = sheet.newChart() .setChartType(Charts.ChartType.LINE) .asLineChart() .addRange(sheet.getRange(&amp;#39;a1:a21&amp;#39;)) .addRange(sheet.getRange(&amp;#39;b1:b21&amp;#39;)) .addRange(sheet.getRange(&amp;#39;c1:c21&amp;#39;)) .setColors([&amp;#34;green&amp;#34;, &amp;#34;red&amp;#34;]) .setBackgroundColor(&amp;#34;black&amp;#34;) .setPosition(5, 5, 0, 0) .setPointStyle(Charts.PointStyle.MEDIUM) .setOption(&amp;#39;useFirstColumnAsDomain&amp;#39;, true) .setOption(&amp;#39;height&amp;#39;, 280) .setOption(&amp;#39;width&amp;#39;, 480) .setOption(&amp;#39;title&amp;#39;, &amp;#39;Sample chart&amp;#39;) .setOption(&amp;#39;hAxis&amp;#39;, { title: &amp;#39;x axis&amp;#39;, minValue: 0, maxValue: 20, titleTextStyle: { color: &amp;#39;#c0c0c0&amp;#39;, fontSize: 20, italic: false, bold: false }, textStyle: { color: &amp;#39;#c0c0c0&amp;#39;, fontSize: 12, bold: false, italic: false }, baselineColor: &amp;#39;#c0c0c0&amp;#39;, gridlines: { color: &amp;#39;#c0c0c0&amp;#39;, count: 4 } }) .</description>
    </item>
    
    <item>
      <title>Sample Array Script for Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/02/08/sample-array-script-for-spreadsheet/</link>
      <pubDate>Wed, 08 Feb 2017 08:50:38 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/08/sample-array-script-for-spreadsheet/</guid>
      <description>This is a Sample Array Script for Spreadsheet. It makes an 2D array filled by strings and number. The strings and number are column strings and row number, respectively.
However, because this is a sample, the maximum column number is 26.
function sa(row, col){ if (col &amp;gt; 26) return; var ar = new Array(row); for(var i = 0; i &amp;lt; row; i++) ar[i] = new Array(col); for (var i = 0; i &amp;lt; row; i++){ for (var j = 0; j &amp;lt; col; j++){ ar[i][j] = String.</description>
    </item>
    
    <item>
      <title>Event of onEdit() for Google spreadsheet</title>
      <link>https://tanaikech.github.io/2017/02/07/event-of-onedit-for-google-spreadsheet/</link>
      <pubDate>Tue, 07 Feb 2017 11:03:56 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/07/event-of-onedit-for-google-spreadsheet/</guid>
      <description>About Event Objects For example, it thinks the situation of input text of &amp;rsquo;test&amp;rsquo; to &amp;lsquo;A1&amp;rsquo; on a sheet.
When you use only &amp;lsquo;onEdit(e)&amp;rsquo; without an installing trigger, &amp;rsquo;e&amp;rsquo; has following parameters.
{authMode=LIMITED, range=Range, source=Spreadsheet, user=, value=test}  In this case, the event cannot send an e-mail because of &amp;lsquo;authMode=LIMITED&amp;rsquo;.
When you use &amp;ldquo;onEdit(e)&amp;rdquo; with an installing trigger of &amp;ldquo;Edit&amp;rdquo;, &amp;rsquo;e&amp;rsquo; has following parameters.
{authMode=FULL, range=Range, source=Spreadsheet, value=test, triggerUid=#####}  In this case, the event can send an e-mail because of &amp;lsquo;authMode=FULL&amp;rsquo;.</description>
    </item>
    
  </channel>
</rss>
