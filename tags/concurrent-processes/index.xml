<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>concurrent-processes on tanaike</title>
    <link>https://tanaikech.github.io/tags/concurrent-processes/</link>
    <description>Recent content in concurrent-processes on tanaike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Sun, 31 May 2020 16:13:43 +0900</lastBuildDate>
    
	<atom:link href="https://tanaikech.github.io/tags/concurrent-processes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Updated: GAS Library - RunAll</title>
      <link>https://tanaikech.github.io/2020/05/31/updated-gas-library-runall/</link>
      <pubDate>Sun, 31 May 2020 16:13:43 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/05/31/updated-gas-library-runall/</guid>
      <description>RunAll was updated to v1.1.2.   v1.1.2 (May 31, 2020)
 When the access token and project ID are not included in the object, getOAuthToken() and getScriptId(). By this, an error is removed.    You can see the detail information here https://github.com/tanaikech/RunAll</description>
    </item>
    
    <item>
      <title>Updated: GAS Library - RunAll</title>
      <link>https://tanaikech.github.io/2019/09/20/updated-gas-library-runall/</link>
      <pubDate>Fri, 20 Sep 2019 10:43:10 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/09/20/updated-gas-library-runall/</guid>
      <description>RunAll was updated to v1.1.1.   v1.1.1 (September 20, 2019)
 When the number of 0 was used as the argument, null was returned. This bug was removed. Coffeescript as the source was updated.    You can see the detail information here https://github.com/tanaikech/RunAll</description>
    </item>
    
    <item>
      <title>Updated: GAS Library - RunAll</title>
      <link>https://tanaikech.github.io/2019/08/26/updated-gas-library-runall/</link>
      <pubDate>Mon, 26 Aug 2019 17:40:23 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/08/26/updated-gas-library-runall/</guid>
      <description>RunAll was updated to v1.1.0.   v1.1.0 (August 26, 2019)
 New method for achieving the parallel processing with Web Apps was added.    You can see the detail information here https://github.com/tanaikech/RunAll</description>
    </item>
    
    <item>
      <title>GAS Library - BatchRequest</title>
      <link>https://tanaikech.github.io/2018/05/02/gas-library-batchrequest/</link>
      <pubDate>Wed, 02 May 2018 15:55:37 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/05/02/gas-library-batchrequest/</guid>
      <description>Overview This is a library for running Batch Requests using Google Apps Script (GAS).
Description When users use Google&#39;s APIs, one quota is used for one API call. When the batch request is used, several APIs can be called by one quota, although there are some limitations in the batch request. For example, in GAS, Drive API can be used be DriveApp. In this case, the quota is not used for using Drive API.</description>
    </item>
    
    <item>
      <title>GAS Library - RunAll</title>
      <link>https://tanaikech.github.io/2018/04/24/gas-library-runall/</link>
      <pubDate>Tue, 24 Apr 2018 08:45:08 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/04/24/gas-library-runall/</guid>
      <description>Overview This is a library for running the concurrent processing using only native Google Apps Script (GAS).
Description Have you ever thought about the concurrent processing using only native Google Apps Script (GAS)? So far, I had run the concurrent processing using golang, javascript and python. But the script cannot be used by the trigger event, because these are not native GAS. Recently, it was found that the fetchAll method added by the Google&#39;s update at January 19, 2018 is worked by the asynchronous processing.</description>
    </item>
    
  </channel>
</rss>