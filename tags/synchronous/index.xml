<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Synchronous on tanaike</title>
    <link>https://tanaikech.github.io/tags/synchronous/</link>
    <description>Recent content in Synchronous on tanaike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Fri, 13 Sep 2019 14:54:08 +0900</lastBuildDate><atom:link href="https://tanaikech.github.io/tags/synchronous/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Javascript library - syncGoogleScriptRun</title>
      <link>https://tanaikech.github.io/2019/09/13/javascript-library-syncgooglescriptrun/</link>
      <pubDate>Fri, 13 Sep 2019 14:54:08 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/09/13/javascript-library-syncgooglescriptrun/</guid>
      <description>Overview This is a Javascript library to use &amp;ldquo;google.script.run&amp;rdquo; with the synchronous process.
Description When I create Web Apps, add-on using a side bar and dialog, there is the case that I want to use google.script.run with the synchronous process. As you know, google.script.run works with the asynchronous process. So in order to use it as the synchronous process, the script is required to be prepared. I also saw several issues for such situation at Stackoverflow and other sites.</description>
    </item>
    
    <item>
      <title>Sample Script for Executing with Synchronous Process using Node.js</title>
      <link>https://tanaikech.github.io/2019/02/12/sample-script-for-executing-with-synchronous-process-using-node.js/</link>
      <pubDate>Tue, 12 Feb 2019 09:02:16 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/02/12/sample-script-for-executing-with-synchronous-process-using-node.js/</guid>
      <description>Gists
This is a sample script for executing with the synchronous process using Node.js.
Sample script function work(e) { return new Promise((resolve, reject) =&amp;gt; { setTimeout(() =&amp;gt; { console.log(e); resolve(&amp;#34;ok&amp;#34; + e); }, 1000); }); } async function main() { var ar = [1, 2, 3, 4, 5]; for (var i = 0; i &amp;lt; ar.length; i++) { console.log(&amp;#39;start&amp;#39; + ar[i]); await work(ar[i]).then((res) =&amp;gt; console.log(res)); console.log(&amp;#39;end&amp;#39; + ar[i]); } } main(); // Run main().</description>
    </item>
    
  </channel>
</rss>
