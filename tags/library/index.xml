<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Library on tanaike</title>
    <link>https://tanaikech.github.io/tags/library/</link>
    <description>Recent content in Library on tanaike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Wed, 10 Oct 2018 09:11:09 +0900</lastBuildDate>
    
	<atom:link href="https://tanaikech.github.io/tags/library/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GAS Library - ArrangeStackingOrder</title>
      <link>https://tanaikech.github.io/2018/10/10/gas-library---arrangestackingorder/</link>
      <pubDate>Wed, 10 Oct 2018 09:11:09 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/10/10/gas-library---arrangestackingorder/</guid>
      <description>Overview ArrangeStackingOrder is a GAS library for arranging the stacking order of page elements on Google Slides using Google Apps Script (GAS).
Demo This is a demonstration of this library when this is used as a Google Slides Addon.
Description Do you have situations that you want to arrange the stacking order of page elements on Google Slides using GAS? I had it before. At that time, I could achieve it by creating a simple script.</description>
    </item>
    
    <item>
      <title>Updated: GAS Library - RangeListApp</title>
      <link>https://tanaikech.github.io/2018/09/13/updated-gas-library---rangelistapp/</link>
      <pubDate>Thu, 13 Sep 2018 13:53:59 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/09/13/updated-gas-library---rangelistapp/</guid>
      <description>RangeListApp was updated to v1.0.1.
 v1.0.1 (September 13, 2018)
 New method of &amp;ldquo;expandA1Notations&amp;rdquo; was added. This method can expand the a1Notations. For example, A1:C2 is expanded to &amp;quot;A1&amp;quot;,&amp;quot;B1&amp;quot;,&amp;quot;C1&amp;quot;,&amp;quot;A2&amp;quot;,&amp;quot;B2&amp;quot;,&amp;quot;C2&amp;quot;.   You can check this at https://github.com/tanaikech/RangeListApp.</description>
    </item>
    
    <item>
      <title>Updated: GAS Library - FilesApp</title>
      <link>https://tanaikech.github.io/2018/09/03/updated-gas-library---filesapp/</link>
      <pubDate>Mon, 03 Sep 2018 09:12:58 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/09/03/updated-gas-library---filesapp/</guid>
      <description>FilesApp was updated to v1.0.1.
 Removed a bug.  When there are files and folders without the parents, an error occurred. In this version, this issue was removed.   GitHub of FilesApp</description>
    </item>
    
    <item>
      <title>GAS Library - DownloadLargeFilesByUrl</title>
      <link>https://tanaikech.github.io/2018/09/02/gas-library---downloadlargefilesbyurl/</link>
      <pubDate>Sun, 02 Sep 2018 10:54:07 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/09/02/gas-library---downloadlargefilesbyurl/</guid>
      <description>Overview DownloadLargeFilesByUrl is a GAS library for downloading large files from URL to Google Drive using Google Apps Script (GAS).
Description I had been thinking of about whether a large file from an URL can be downloaded to Google Drive using GAS. When I have tried to download such large files, I noticed the following limitations. These limitations are due to the specification of GAS.
 When users download a file from URL using GAS, at the most users, it retrieves the blob using UrlFetchApp.</description>
    </item>
    
    <item>
      <title>Updated: GAS Library - OnedriveApp</title>
      <link>https://tanaikech.github.io/2018/07/28/updated-gas-library---onedriveapp/</link>
      <pubDate>Sat, 28 Jul 2018 16:27:59 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/07/28/updated-gas-library---onedriveapp/</guid>
      <description>OnedriveApp was updated to v1.1.1.
I have to apologize you and all users.
I had forgot that it added setProp(). I could notice about this by reporting at here.
I would like to report because I could remove this bug.
GitHub of OnedriveApp</description>
    </item>
    
    <item>
      <title>GAS Library - RangeListApp</title>
      <link>https://tanaikech.github.io/2018/07/27/gas-library---rangelistapp/</link>
      <pubDate>Fri, 27 Jul 2018 13:52:27 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/07/27/gas-library---rangelistapp/</guid>
      <description>Overview RangeListApp is a GAS library for retrieving, putting and replacing values for Spreadsheet by a range list with a1Notation using Google Apps Script (GAS).
Description There is Class RangeList as one of classes for Spreadsheet. There is setValue(value) in Class RangeList as a method. setValue(value) puts value to the cells of range list. Recently, when I used this method, I noticed that the following situations what I want cannot be achieved.</description>
    </item>
    
    <item>
      <title>Updated: GAS Library - ManifestsApp</title>
      <link>https://tanaikech.github.io/2018/07/11/updated-gas-library---manifestsapp/</link>
      <pubDate>Wed, 11 Jul 2018 11:03:27 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/07/11/updated-gas-library---manifestsapp/</guid>
      <description>ManifestsApp was updated to v1.0.3.
 v1.0.3 (July 11, 2018)
 By Google&amp;rsquo;s update, &amp;ldquo;sheets&amp;rdquo; was added to manifests for installing the configuration of Macro. By this, this library was updated.  You can see the added methods (getSheets(), setSheets()) at Usage. If you set &amp;ldquo;sheets&amp;rdquo;, please put the value of &amp;ldquo;sheets&amp;rdquo; as the resource like below sample.  {&amp;quot;macros&amp;quot;: [{&amp;quot;menuName&amp;quot;: &amp;quot;QuickRowSum&amp;quot;, &amp;quot;functionName&amp;quot;: &amp;quot;calculateRowSum&amp;quot;}]} Don&amp;rsquo;t put {&amp;quot;sheets&amp;quot;: {&amp;quot;macros&amp;quot;: [{&amp;quot;menuName&amp;quot;: &amp;quot;QuickRowSum&amp;quot;, &amp;quot;functionName&amp;quot;: &amp;quot;calculateRowSum&amp;quot;}]}}     You can check this at https://github.</description>
    </item>
    
    <item>
      <title>GAS Library - FilesApp</title>
      <link>https://tanaikech.github.io/2018/06/15/gas-library---filesapp/</link>
      <pubDate>Fri, 15 Jun 2018 10:32:46 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/06/15/gas-library---filesapp/</guid>
      <description>Overview FilesApp is a GAS library for retrieving file and folder list in Google Drive using Google Apps Script (GAS). Also this can create a tree from all files and folders in Google Drive.
Description When I create some applications using Google Drive, there are often the case which is required to retrieve the file list and folder list. I had prepared the script each time for each case so far.</description>
    </item>
    
    <item>
      <title>GAS Library - BatchRequest</title>
      <link>https://tanaikech.github.io/2018/05/02/gas-library---batchrequest/</link>
      <pubDate>Wed, 02 May 2018 15:55:37 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/05/02/gas-library---batchrequest/</guid>
      <description>Overview This is a library for running Batch Requests using Google Apps Script (GAS).
Description When users use Google&amp;rsquo;s APIs, one quota is used for one API call. When the batch request is used, several APIs can be called by one quota, although there are some limitations in the batch request. For example, in GAS, Drive API can be used be DriveApp. In this case, the quota is not used for using Drive API.</description>
    </item>
    
    <item>
      <title>GAS Library - RunAll</title>
      <link>https://tanaikech.github.io/2018/04/24/gas-library---runall/</link>
      <pubDate>Tue, 24 Apr 2018 08:45:08 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/04/24/gas-library---runall/</guid>
      <description>Overview This is a library for running the concurrent processing using only native Google Apps Script (GAS).
Description Have you ever thought about the concurrent processing using only native Google Apps Script (GAS)? So far, I had run the concurrent processing using golang, javascript and python. But the script cannot be used by the trigger event, because these are not native GAS. Recently, it was found that the fetchAll method added by the Google&amp;rsquo;s update at January 19, 2018 is worked by the asynchronous processing.</description>
    </item>
    
    <item>
      <title>Updated: GAS Library - ManifestsApp</title>
      <link>https://tanaikech.github.io/2018/01/29/updated-gas-library---manifestsapp/</link>
      <pubDate>Mon, 29 Jan 2018 13:05:00 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/01/29/updated-gas-library---manifestsapp/</guid>
      <description>ManifestsApp was updated to v1.0.2.
 v1.0.2 (January 29, 2018)
 ProjectApp2 is published, and got to be able to use both standalone script type and container-bound script type.  By this, this library also got to be able to be used for the both projects.  For this update, please enable Apps Script API.  Please check &amp;ldquo;How to install&amp;rdquo;.    You can check this at https://github.com/tanaikech/ManifestsApp.</description>
    </item>
    
    <item>
      <title>GAS Library - ProjectApp2</title>
      <link>https://tanaikech.github.io/2018/01/29/gas-library---projectapp2/</link>
      <pubDate>Mon, 29 Jan 2018 13:01:21 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/01/29/gas-library---projectapp2/</guid>
      <description>Overview This is a GAS project library for Google Apps Script (GAS). This library can be used for the projects of both standalone script type and container-bound script type.

Description There are Class SpreadsheetApp and Class DocumentApp for operating spreadsheet and document, respectively. But there is no Class for operating GAS project. If there is such Class ProjectApp, GAS project can be directly operated by GAS script. I thought that this will lead to new applications, and created ProjectApp.</description>
    </item>
    
    <item>
      <title>Taking Advantage of Manifests by GAS Library</title>
      <link>https://tanaikech.github.io/2017/11/23/taking-advantage-of-manifests-by-gas-library/</link>
      <pubDate>Thu, 23 Nov 2017 20:21:50 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/11/23/taking-advantage-of-manifests-by-gas-library/</guid>
      <description>Gists
Introduction By recent Google update (Google update at October 24, 2017), various new winds to GAS developers were blown. There is &amp;ldquo;Manifests&amp;rdquo; as one of the new winds. &amp;ldquo;Manifests&amp;rdquo; makes us manage the project using JSON. Especially, the special scopes which have to use OAuth2 process can be used by only setting them to the Manifests. I think that this is the largest modification. However, when scopes are added to a project using Manifests, users who use the project can use only added scopes.</description>
    </item>
    
    <item>
      <title>GAS Library - RearrangeScripts</title>
      <link>https://tanaikech.github.io/2017/11/13/gas-library---rearrangescripts/</link>
      <pubDate>Mon, 13 Nov 2017 09:30:14 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/11/13/gas-library---rearrangescripts/</guid>
      <description>Overview This is a GAS application for rearranging Google Apps Scripts (GAS) in a project which can be seen at the script editor.
Description Have you ever thought about rearranging Google Apps Scripts in a project which can be seen at the script editor? I also have thought about it. Finally, I could find the workaround to do it. And recently, I have given this function to ggsrun which is a CLI tool.</description>
    </item>
    
    <item>
      <title>GAS Library - ZipFolder</title>
      <link>https://tanaikech.github.io/2017/11/12/gas-library---zipfolder/</link>
      <pubDate>Sun, 12 Nov 2017 15:52:09 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/11/12/gas-library---zipfolder/</guid>
      <description>Overview This is a library for zipping a folder using Google Apps Scripts.
Description When users manually download a folder on Google Drive, users can download all files in the folder as a zip file using the web interface. There are zip tools in Class Utilities of Google Apps Script. However, the zip tools cannot create a zip file from a folder. And it cannot retrieve all files included any folders in a folder.</description>
    </item>
    
    <item>
      <title>GAS Library - ManifestsApp</title>
      <link>https://tanaikech.github.io/2017/11/09/gas-library---manifestsapp/</link>
      <pubDate>Thu, 09 Nov 2017 10:47:58 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/11/09/gas-library---manifestsapp/</guid>
      <description>Overview This is a Manifests library for Google Apps Scripts.
Description By recent update of Google, Manifests was added to Google Apps Script Project. At the moment I saw the detail, I thought that this Manifests will blow a new wind for a lot of GAS developers. So I created this.
This library makes users easily access Manifests using Google Apps Script. If this was useful for you, I&amp;rsquo;m glad.</description>
    </item>
    
    <item>
      <title>GAS Library - ProjectApp</title>
      <link>https://tanaikech.github.io/2017/11/08/gas-library---projectapp/</link>
      <pubDate>Wed, 08 Nov 2017 11:20:07 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/11/08/gas-library---projectapp/</guid>
      <description>Overview This is a GAS project library for Google Apps Script (GAS).

Description There are Class SpreadsheetApp and Class DocumentApp for operating spreadsheet and document, respectively. But there is no Class for operating GAS project. If there is the Class ProjectApp, GAS project can be directly operated by GAS script. I thought that this will lead to new applications, and created ProjectApp.
On the other hand, as a CLI tool for operating GAS project, there has already been ggsrun.</description>
    </item>
    
    <item>
      <title>Updated: GAS Library - OnedriveApp</title>
      <link>https://tanaikech.github.io/2017/09/24/updated-gas-library---onedriveapp/</link>
      <pubDate>Sun, 24 Sep 2017 15:36:06 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/09/24/updated-gas-library---onedriveapp/</guid>
      <description>OnedriveApp was updated to v1.1.0.
From this version, retrieving access token and refresh token became more easy.
GitHub of OnedriveApp</description>
    </item>
    
    <item>
      <title>Updated: GAS Library - OnedriveApp</title>
      <link>https://tanaikech.github.io/2017/08/21/updated-gas-library---onedriveapp/</link>
      <pubDate>Mon, 21 Aug 2017 15:02:26 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/08/21/updated-gas-library---onedriveapp/</guid>
      <description>OnedriveApp was updated to v1.0.2.
Moved the instance of PropertiesService.getScriptProperties() to outside of this library. When there is the PropertiesService.getScriptProperties() inside the library, it was found that the parameters that users set was saved to the library. So this was modified. I&amp;rsquo;m sorry that I couldn&amp;rsquo;t notice this situation.
GitHub of OnedriveApp</description>
    </item>
    
    <item>
      <title>Updated: GAS Library - OnedriveApp</title>
      <link>https://tanaikech.github.io/2017/08/21/updated-gas-library---onedriveapp/</link>
      <pubDate>Mon, 21 Aug 2017 11:22:55 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/08/21/updated-gas-library---onedriveapp/</guid>
      <description>OnedriveApp was updated to v1.0.1.
Added a method for retrieving access token and refresh token using this library.
By added this method, OneDrive APIs can be used by only this library.
GitHub of OnedriveApp</description>
    </item>
    
    <item>
      <title>Updated: GAS Library - ImgApp</title>
      <link>https://tanaikech.github.io/2017/08/20/updated-gas-library---imgapp/</link>
      <pubDate>Sun, 20 Aug 2017 15:11:32 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/08/20/updated-gas-library---imgapp/</guid>
      <description>ImgApp was updated to v1.2.0. New method was added.
3. updateThumbnail() Overview This method is for updating thumbnail of files on Google Drive using images you selected.
Description For example, zip files don&amp;rsquo;t have the thumbnail on Google Drive. An icon is shown as the thumbnail. For the most files, Google Drive can create automatically each thumbnail. But there are sometimes files which cannot be created the thumbnail. Zip file is also one of them.</description>
    </item>
    
    <item>
      <title>GAS Library - OnedriveApp</title>
      <link>https://tanaikech.github.io/2017/08/16/gas-library---onedriveapp/</link>
      <pubDate>Wed, 16 Aug 2017 10:31:19 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/08/16/gas-library---onedriveapp/</guid>
      <description>This is a library of Google Apps Script for using Microsoft OneDrive.
Feature This library can carry out following functions using OneDrive APIs.
 Retrieve file list on OneDrive. Delete files and folders on OneDrive. Create folder on OneDrive. Download files from OneDrive to Google Drive. Upload files from Google Drive to OneDrive.  Demo You can see the detail information here https://github.com/tanaikech/OnedriveApp</description>
    </item>
    
    <item>
      <title>Updated: GAS Library - ImgApp</title>
      <link>https://tanaikech.github.io/2017/06/29/updated-gas-library---imgapp/</link>
      <pubDate>Thu, 29 Jun 2017 16:09:57 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/29/updated-gas-library---imgapp/</guid>
      <description>ImgApp was updated to v1.1.0. New method was added.
2. doResize() Overview This method is for resizing images.
Description Unfortunately, there are no methods to resize images at Google Apps Script. As a workaround, there is a method that it imports the image in Google Document and resizes the image using setWidth() and setHeight(). But in this method, the resized blob cannot be retrieved. So although I had thought of other workaround, I had not been able to find it.</description>
    </item>
    
    <item>
      <title>GAS Library - ImgApp - getSize()</title>
      <link>https://tanaikech.github.io/2017/06/27/gas-library---imgapp---getsize/</link>
      <pubDate>Tue, 27 Jun 2017 16:21:52 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/27/gas-library---imgapp---getsize/</guid>
      <description>1. getSize() Overview This method is for retrieving the width and height of image as the unit of pixel.
Description Unfortunately, there are no methods to directly retrieve the image size at Google Apps Script. As a workaround, there is a method that it imports the image in Google Document and retrieves the size using getWidth() and getHeight(). But in this method, it uses much time and resources on Google.</description>
    </item>
    
    <item>
      <title>Go Library - getcode</title>
      <link>https://tanaikech.github.io/2017/06/21/go-library---getcode/</link>
      <pubDate>Wed, 21 Jun 2017 14:17:39 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/21/go-library---getcode/</guid>
      <description>Overview This is a Golang library to automatically get an authorization code for retrieving access token using OAuth2.
Description When it retrieves an access token and refresh token using OAuth2, the code for retrieving them has to be got by authorization on own browser. In order to retrieve the code, in generally, users have to click the authorization button and copy the code on the browser. This library can be automatically got the code by launching HTML server as a redirected server.</description>
    </item>
    
    <item>
      <title>Updated: GAS Library - SOUWA</title>
      <link>https://tanaikech.github.io/2017/06/19/updated-gas-library---souwa/</link>
      <pubDate>Mon, 19 Jun 2017 07:06:45 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/06/19/updated-gas-library---souwa/</guid>
      <description>SOUWA means summing in Japanese. SOUWA can sum string elements in an array at the high speed. The speed of SOUWA with the pyramid algorithm is about 380 times faster than that of the standard method. New algorithm for summing array elements was developed for SOUWA. You can see the detailed report of this library at here. If you are interested in this, I&amp;rsquo;m glad.
It was updated to v1.0.2. Please check it out.</description>
    </item>
    
    <item>
      <title>GAS Library - CreateImg</title>
      <link>https://tanaikech.github.io/2017/04/17/gas-library---createimg/</link>
      <pubDate>Mon, 17 Apr 2017 15:29:15 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/04/17/gas-library---createimg/</guid>
      <description>Recently, I had been looking for creating an image from coordinate data. Unfortunately I have never found them. So I made this. This Google Apps Script (GAS) library creates an image file from coordinate data.
You can see the detail information at https://github.com/tanaikech/CreateImg.
There is a part where I would like to improve in this library. That&amp;rsquo;s convByteSlice(). I think that there is the method to be faster about the part.</description>
    </item>
    
    <item>
      <title>Python Library - souwapy</title>
      <link>https://tanaikech.github.io/2016/10/30/python-library---souwapy/</link>
      <pubDate>Sun, 30 Oct 2016 13:38:29 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2016/10/30/python-library---souwapy/</guid>
      <description>This &amp;ldquo;souwapy&amp;rdquo; is a library for summing array elements with high speed by new algorithm (Pyramid method). The speed is faster than csv and panbdas module of python and v8 engine of node.js. The souwapy module is 2.3 and 3.1 times faster than csv and pandas module, respectively. This was really surprised me. It was found that the theory was correct.
At first, I have created this theory for Google Apps Script.</description>
    </item>
    
  </channel>
</rss>