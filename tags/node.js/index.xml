<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Node.js on tanaike</title>
    <link>https://tanaikech.github.io/tags/node.js/</link>
    <description>Recent content in Node.js on tanaike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Thu, 16 Oct 2025 13:14:39 +0900</lastBuildDate><atom:link href="https://tanaikech.github.io/tags/node.js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A Developer&#39;s Guide to Building Gemini CLI Extensions</title>
      <link>https://tanaikech.github.io/2025/10/16/a-developers-guide-to-building-gemini-cli-extensions/</link>
      <pubDate>Thu, 16 Oct 2025 13:14:39 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2025/10/16/a-developers-guide-to-building-gemini-cli-extensions/</guid>
      <description>Gists
Abstract This guide offers a comprehensive walkthrough of the essential steps and key considerations for developing Gemini CLI extensions. It covers setting up a sample project, configuring the gemini-extension.json file, local testing, and automating dependency management with GitHub Actions, providing developers with the foundational knowledge to create their own custom tools.
Introduction After the release of Gemini CLI Extensions, a growing community of users is developing a wide range of extensions to enhance their command-line workflows.</description>
    </item>
    
    <item>
      <title>Gemini CLI Extension: ToolsForMCPServer-extension</title>
      <link>https://tanaikech.github.io/2025/10/15/gemini-cli-extension-toolsformcpserver-extension/</link>
      <pubDate>Wed, 15 Oct 2025 15:26:26 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2025/10/15/gemini-cli-extension-toolsformcpserver-extension/</guid>
      <description>ToolsForMCPServer-extension This Gemini CLI Extension simplifies Google Workspace automation. It installs a local Model Context Protocol (MCP) server that communicates with a powerful, securely authorized backend built on Google Apps Script Web Apps, overcoming previous complex setup and performance bottlenecks.
You can see the details at my repository.
https://github.com/tanaikech/ToolsForMCPServer-extension</description>
    </item>
    
    <item>
      <title>Simplified Google Workspace Automation with Gemini CLI Extensions</title>
      <link>https://tanaikech.github.io/2025/10/15/simplified-google-workspace-automation-with-gemini-cli-extensions/</link>
      <pubDate>Wed, 15 Oct 2025 15:06:34 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2025/10/15/simplified-google-workspace-automation-with-gemini-cli-extensions/</guid>
      <description>Gists
Abstract This project simplifies Google Workspace automation by using a Gemini CLI Extension. It installs a local Model Context Protocol (MCP) server that communicates with a powerful, securely authorized backend built on Google Apps Script Web Apps, overcoming previous complex setup and performance bottlenecks.
Introduction In order to achieve Google Workspace Automation with seamless authorization and safety, I have published a Model Context Protocol (MCP) server built by Google Apps Script Web Apps.</description>
    </item>
    
    <item>
      <title>Dynamic Tool Creation for Google Workspace Automation with Gemini CLI</title>
      <link>https://tanaikech.github.io/2025/10/09/dynamic-tool-creation-for-google-workspace-automation-with-gemini-cli/</link>
      <pubDate>Thu, 09 Oct 2025 14:43:51 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2025/10/09/dynamic-tool-creation-for-google-workspace-automation-with-gemini-cli/</guid>
      <description>Gists
Abstract This article presents a method for optimizing Google Workspace automation by dynamically converting frequently used, AI-generated Google Apps Scripts into permanent, reusable tools. By integrating the Gemini CLI with a gas-fakes sandbox via an MCP server, we demonstrate how to securely add and manage these custom tools, reducing operational costs and improving efficiency.
Introduction When using generative AI to create scripts, ensuring the secure execution of the generated code is critical.</description>
    </item>
    
    <item>
      <title>Secure and Conversational Google Workspace Automation: Integrating Gemini CLI with a gas-fakes MCP Server</title>
      <link>https://tanaikech.github.io/2025/09/30/secure-and-conversational-google-workspace-automation-integrating-gemini-cli-with-a-gas-fakes-mcp-server/</link>
      <pubDate>Tue, 30 Sep 2025 16:15:11 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2025/09/30/secure-and-conversational-google-workspace-automation-integrating-gemini-cli-with-a-gas-fakes-mcp-server/</guid>
      <description>Gists
Abstract This article introduces a method for securely executing AI-generated Google Apps Script. By implementing a &amp;ldquo;fake-sandbox&amp;rdquo; using the gas-fakes library as an MCP server, users can empower the Gemini CLI to safely automate Google Workspace tasks with granular, file-specific permissions, avoiding significant security risks.
Introduction &amp;ldquo;Have you ever faced a task that isn&amp;rsquo;t part of your routine but is tedious to do manually, like, &amp;lsquo;I need to add a &amp;ldquo;[For Review]&amp;rdquo; prefix to the titles of all Google Docs in a specific folder this afternoon&amp;rsquo;?</description>
    </item>
    
    <item>
      <title>Accelerating Gemini CLI: A Node.js Wrapper for Google Apps Script MCP Servers</title>
      <link>https://tanaikech.github.io/2025/09/17/accelerating-gemini-cli-a-node.js-wrapper-for-google-apps-script-mcp-servers/</link>
      <pubDate>Wed, 17 Sep 2025 16:09:33 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2025/09/17/accelerating-gemini-cli-a-node.js-wrapper-for-google-apps-script-mcp-servers/</guid>
      <description>Gists
Abstract This article introduces a Node.js wrapper that dramatically reduces the startup time for the Gemini CLI when used with MCP servers built on Google Apps Script. This optimization enhances user experience by accelerating the initialization process, achieving a speed boost of approximately 15 times.
1. Introduction The Model Context Protocol (MCP) is a vital open standard enabling AI agents to connect with external tools and data sources for complex, real-world tasks.</description>
    </item>
    
    <item>
      <title>A Fake-Sandbox for Google Apps Script: A Feasibility Study on Securely Executing Code Generated by Gemini CLI</title>
      <link>https://tanaikech.github.io/2025/08/30/a-fake-sandbox-for-google-apps-script-a-feasibility-study-on-securely-executing-code-generated-by-gemini-cli/</link>
      <pubDate>Sat, 30 Aug 2025 16:31:35 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2025/08/30/a-fake-sandbox-for-google-apps-script-a-feasibility-study-on-securely-executing-code-generated-by-gemini-cli/</guid>
      <description>Gists
Abstract Generating Google Apps Script (GAS) with Gemini CLI from natural language introduces security risks due to broad permissions. This report investigates a &amp;ldquo;Fake-Sandbox&amp;rdquo; using the gas-fakes library, translating GAS calls into granularly-scoped API requests to securely execute scripts created from user prompts.
Introduction 1. Background: Generative AI and the Challenge of Secure Script Execution The emergence of Generative AI now makes it possible to generate executable scripts directly from natural language instructions, particularly through interfaces like the Gemini CLI.</description>
    </item>
    
    <item>
      <title>A Practical Analysis of the Gemini API&#39;s URL Context Tool</title>
      <link>https://tanaikech.github.io/2025/06/26/a-practical-analysis-of-the-gemini-apis-url-context-tool/</link>
      <pubDate>Thu, 26 Jun 2025 11:49:23 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2025/06/26/a-practical-analysis-of-the-gemini-apis-url-context-tool/</guid>
      <description>Gists
Introduction The Gemini API recently introduced the URL context tool, a feature designed to allow the model to directly fetch and utilize content from specified URLs to ground its responses. Ref
This report provides a practical demonstration of this tool&amp;rsquo;s capabilities. We will investigate its impact on two critical aspects of AI model interaction: the accuracy of the generated response and the total token consumption, which directly affects API costs.</description>
    </item>
    
    <item>
      <title>Gemini API with JSON schema</title>
      <link>https://tanaikech.github.io/2024/05/07/gemini-api-with-json-schema/</link>
      <pubDate>Tue, 07 May 2024 16:33:43 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2024/05/07/gemini-api-with-json-schema/</guid>
      <description>Gists
Overview These are sample scripts in Python and Node.js for controlling the output format of the Gemini API using JSON schemas.
Description In a previous report, &amp;ldquo;Taming the Wild Output: Effective Control of Gemini API Response Formats with response_mime_type,&amp;rdquo; I presented sample scripts created with Google Apps Script. Ref Following its publication, I received requests for sample scripts using Python and Node.js. This report addresses those requests by providing sample scripts in both languages.</description>
    </item>
    
    <item>
      <title>Executing Google Apps Script with Service Account</title>
      <link>https://tanaikech.github.io/2023/10/19/executing-google-apps-script-with-service-account/</link>
      <pubDate>Thu, 19 Oct 2023 14:59:31 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2023/10/19/executing-google-apps-script-with-service-account/</guid>
      <description>Gists
Abstract One day, you might have a situation where it is required to run Google Apps Script using the service account. Unfortunately, in the current stage, Google Apps Script cannot be directly run with the service account because of the current specification. So, this report introduces a workaround for executing Google Apps Script using the service account.
Introduction When you want to execute Google Apps Script from outside of Google, as the basic approach, it can be achieved by Google Apps Script API.</description>
    </item>
    
    <item>
      <title>Creating and Deleting Multiple Events in Google Calendar by Batch Requests using Calendar API with Node.js</title>
      <link>https://tanaikech.github.io/2022/10/11/creating-and-deleting-multiple-events-in-google-calendar-by-batch-requests-using-calendar-api-with-node.js/</link>
      <pubDate>Tue, 11 Oct 2022 10:21:24 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/10/11/creating-and-deleting-multiple-events-in-google-calendar-by-batch-requests-using-calendar-api-with-node.js/</guid>
      <description>Gists
These are the sample scripts for creating and deleting multiple events in Google Calendar by batch requests using Calendar API with Node.js.
In the current stage, unfortunately, googleapis for Node.js cannot request batch requests. Ref So, when multiple events are created and deleted in Google Calendar using Node.js, it is required to run the script in a loop. In this case, the process cost becomes high. Ref In this post, I would like to introduce creating and deleting multiple events in Google Calendar using batch request with Node.</description>
    </item>
    
    <item>
      <title>node module - node-gbatchrequests</title>
      <link>https://tanaikech.github.io/2022/10/08/node-module-node-gbatchrequests/</link>
      <pubDate>Sat, 08 Oct 2022 15:24:43 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/10/08/node-module-node-gbatchrequests/</guid>
      <description>Overview This is a Node.js module to run the batch requests of Google APIs.
Description In Google APIs, there are APIs where batch requests can be run. The batch requests can run multiple API calls by one API call with the asynchronous process. By this, both the process cost and the quota cost can be reduced. Ref In Node.js, the wonderful module of googleapis for Node.js is existing. But, in the current stage, unfortunately, it seems that the googleapis for Node.</description>
    </item>
    
    <item>
      <title>Updating Array1 with Array2 using Google Apps Script</title>
      <link>https://tanaikech.github.io/2022/10/04/updating-array1-with-array2-using-google-apps-script/</link>
      <pubDate>Tue, 04 Oct 2022 10:00:39 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/10/04/updating-array1-with-array2-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for updating Array1 with Array2 using Google Apps Script.
As a sample situation, there are 2 arrays (Array1 and Array2) of the 2-dimensional array. The sample situation can be seen in the above sample Spreadsheet.
 Conditions  When the values of column &amp;ldquo;A&amp;rdquo; of Array2 are existing in column &amp;ldquo;A&amp;rdquo; of Array1, the rows of Array1 are updated by that of Array2. When the values of column &amp;ldquo;A&amp;rdquo; of Array2 are not existing in column &amp;ldquo;A&amp;rdquo; of Array1, the rows of Array2 are appended to Array1.</description>
    </item>
    
    <item>
      <title>Sample Script for Resumable Upload to Google Drive using Axios with Node.js</title>
      <link>https://tanaikech.github.io/2022/08/07/sample-script-for-resumable-upload-to-google-drive-using-axios-with-node.js/</link>
      <pubDate>Sun, 07 Aug 2022 09:26:54 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/08/07/sample-script-for-resumable-upload-to-google-drive-using-axios-with-node.js/</guid>
      <description>Gists
This is a sample script for the resumable upload using Axios with Node.js.
Sample script In this sample script, as a sample situation in order to explain the resumable upload, the file data is loaded from the local PC, and the data is uploaded to Google Drive with the resumable upload.
const axios = require(&amp;#34;axios&amp;#34;); const fs = require(&amp;#34;fs&amp;#34;).promises;  async function sample() {  const filepath = &amp;#34;./###&amp;#34;; // Please set the filename and file path of the upload file.</description>
    </item>
    
    <item>
      <title>Converting A1Notation to GridRange and vice versa using Google Apps Script without any Scopes</title>
      <link>https://tanaikech.github.io/2022/07/04/converting-a1notation-to-gridrange-and-vice-versa-using-google-apps-script-without-any-scopes/</link>
      <pubDate>Mon, 04 Jul 2022 11:39:16 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2022/07/04/converting-a1notation-to-gridrange-and-vice-versa-using-google-apps-script-without-any-scopes/</guid>
      <description>Gists
This is a sample script for converting A1Notation to GridRange and vice versa using Google Apps Script without any scopes.
A1Notation and GridRange are often used with Sheets API. I have posted a sample script for converting A1Notation to GridRange before. Ref But, in that case, I used the method of Spreadsheet service (SpreadsheetApp). By this, in order to use the script, it is required to authorize the scopes. In this sample script, A1Notation can be converted to GridRange and vice versa with no scopes.</description>
    </item>
    
    <item>
      <title>Simple Script of Resumable Upload with Google Drive API for Axios</title>
      <link>https://tanaikech.github.io/2021/01/05/simple-script-of-resumable-upload-with-google-drive-api-for-axios/</link>
      <pubDate>Tue, 05 Jan 2021 21:18:28 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2021/01/05/simple-script-of-resumable-upload-with-google-drive-api-for-axios/</guid>
      <description>Gists
This is a simple sample script for achieving the resumable upload to Google Drive using Axios. In order to achieve the resumable upload, at first, it is required to retrieve the location, which is the endpoint of upload. The location is included in the response headers. After the location was retrieved, the file can be uploaded to the location URL.
In this sample, a text data is uploaded with the resumable upload using a single chunk.</description>
    </item>
    
    <item>
      <title>Downloading and Uploading File to Google Drive without Saving File with Stream and Resumable Upload using Node.js</title>
      <link>https://tanaikech.github.io/2021/01/05/downloading-and-uploading-file-to-google-drive-without-saving-file-with-stream-and-resumable-upload-using-node.js/</link>
      <pubDate>Tue, 05 Jan 2021 15:38:08 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2021/01/05/downloading-and-uploading-file-to-google-drive-without-saving-file-with-stream-and-resumable-upload-using-node.js/</guid>
      <description>Gists
This is a sample script of Node.js for downloading the data and uploading the data to Google Drive with the resumable upload without saving it as a file. The downloaded data is uploaded to Google Drive with the stream.
Sample script Before you use this, please set the variables of accessToken, url, fileSize, mimeType and filename. In this case, fileSize is required to set because the data is uploaded with the resumable upload.</description>
    </item>
    
    <item>
      <title>Sample Scripts for Creating New Event with Google Meet Link to Google Calendar using Various Languages</title>
      <link>https://tanaikech.github.io/2020/12/03/sample-scripts-for-creating-new-event-with-google-meet-link-to-google-calendar-using-various-languages/</link>
      <pubDate>Thu, 03 Dec 2020 16:04:18 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/12/03/sample-scripts-for-creating-new-event-with-google-meet-link-to-google-calendar-using-various-languages/</guid>
      <description>Gists
This is the sample scripts for creating new event with Google Meet link to Google Calendar using various languages. When I saw the official document of &amp;ldquo;Add video and phone conferences to events&amp;rdquo;, in the current stage, I can see only the sample script for Javascript. But I saw the several questions related to this for various languages. So I published the sample scripts for creating new event with Google Meet link to Google Calendar using various languages.</description>
    </item>
    
    <item>
      <title>Retrieving All Values from All Sheets from URL of 2PACX- of Web Published Google Spreadsheet using Node.js</title>
      <link>https://tanaikech.github.io/2020/10/12/retrieving-all-values-from-all-sheets-from-url-of-2pacx-of-web-published-google-spreadsheet-using-node.js/</link>
      <pubDate>Mon, 12 Oct 2020 14:23:43 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/10/12/retrieving-all-values-from-all-sheets-from-url-of-2pacx-of-web-published-google-spreadsheet-using-node.js/</guid>
      <description>Gists
This is a sample script for retrieving all values from all sheets from URL of 2PACX- of Web Published Google Spreadsheet using Node.js.
In this post, it supposes that the Google Spreadsheet has already been published for Web. Ref
Before you use this sample script, please install SheetJS js-xlsx.
Flow The flow of this method is as follows.
 Retrieve XLSX data from the URL of web published Google Spreadsheet as the buffer data.</description>
    </item>
    
    <item>
      <title>Uploading Files of multipart/form-data to Google Drive using Drive API with Node.js</title>
      <link>https://tanaikech.github.io/2020/07/30/uploading-files-of-multipart/form-data-to-google-drive-using-drive-api-with-node.js/</link>
      <pubDate>Thu, 30 Jul 2020 11:13:47 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/07/30/uploading-files-of-multipart/form-data-to-google-drive-using-drive-api-with-node.js/</guid>
      <description>Gists
These are the sample scripts for uploading files of multipart/form-data to Google Drive using Drive API with Node.js. In this case, googleapis for Node.js is not used.
In these sample script, the maximum file size is 5 MB. Please be careful this. When you want to upload the files more than 5 MB, please check this report.
Sample script 1 This sample script uploads a file using the modules of fs and request.</description>
    </item>
    
    <item>
      <title>Retrieving Difference Between 2 Arrays using Google Apps Script</title>
      <link>https://tanaikech.github.io/2020/06/19/retrieving-difference-between-2-arrays-using-google-apps-script/</link>
      <pubDate>Fri, 19 Jun 2020 16:18:53 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/06/19/retrieving-difference-between-2-arrays-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for retrieving the difference between 2 arrays, which are the old values and the new values, using Google Apps Script. In my environment, I sometimes have the situation that it is required to retrieve the difference between 2 arrays. So I prepared this as a sample script. I think that this can be also used at Javascript and Node.js. If this was also useful for your situation, I&amp;rsquo;m glad.</description>
    </item>
    
    <item>
      <title>Updated: GetFileList for golang, Javascript, Node.js and Python</title>
      <link>https://tanaikech.github.io/2020/06/01/updated-getfilelist-for-golang-javascript-node.js-and-python/</link>
      <pubDate>Mon, 01 Jun 2020 14:12:33 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/06/01/updated-getfilelist-for-golang-javascript-node.js-and-python/</guid>
      <description>Updated: GetFileList for golang, Javascript, Node.js and Python
This is the libraries to retrieve the file list with the folder tree from the specific folder of own Google Drive and shared Drives.
 Golang: https://github.com/tanaikech/go-getfilelist  Updated to v1.0.4.   Javascript: https://github.com/tanaikech/GetFileList_js  Updated to v1.0.3.   Node.js: https://github.com/tanaikech/node-getfilelist  Updated to v1.0.5.   Python: https://github.com/tanaikech/getfilelistpy  Updated to v1.0.6.    </description>
    </item>
    
    <item>
      <title>Updated: node module - google-drive-getfilelist</title>
      <link>https://tanaikech.github.io/2020/05/14/updated-node-module-google-drive-getfilelist/</link>
      <pubDate>Thu, 14 May 2020 14:38:45 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/05/14/updated-node-module-google-drive-getfilelist/</guid>
      <description>node module - google-drive-getfilelist was updated to v1.0.4   v1.0.4 (May 14, 2020)
  Shared drive got to be able to be used. The file list can be retrieved from both your Google Drive and the shared drive.
 For example, when the folder ID in the shared Drive is used id of resource, you can retrieve the file list from the folder in the shared Drive.      You can get this from https://github.</description>
    </item>
    
    <item>
      <title>Simple Script of Resumable Upload with Google Drive API for Node.js</title>
      <link>https://tanaikech.github.io/2020/03/05/simple-script-of-resumable-upload-with-google-drive-api-for-node.js/</link>
      <pubDate>Thu, 05 Mar 2020 13:48:05 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/03/05/simple-script-of-resumable-upload-with-google-drive-api-for-node.js/</guid>
      <description>Gists
This is a simple sample script for achieving the resumable upload to Google Drive using Node.js. In order to achieve the resumable upload, at first, it is required to retrieve the location, which is the endpoint of upload. The location is included in the response headers. After the location was retrieved, the file can be uploaded to the location URL.
In this sample, a PNG file is uploaded with the resumable upload using a single chunk.</description>
    </item>
    
    <item>
      <title>Libraries of gdoctableapp for golang, Node.js and python were updated to v110</title>
      <link>https://tanaikech.github.io/2020/01/22/libraries-of-gdoctableapp-for-golang-node.js-and-python-were-updated-to-v110/</link>
      <pubDate>Wed, 22 Jan 2020 15:22:54 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/01/22/libraries-of-gdoctableapp-for-golang-node.js-and-python-were-updated-to-v110/</guid>
      <description>Libraries of gdoctableapp for golang, Node.js and python were updated to v1.1.0   go-gdoctableapp
 v1.1.0 (January 22, 2020)  2 new methods were added. From this version, the texts can be replaced by images. The direct link and local file can be used as the image.      node-gdoctableapp
 v1.1.0 (January 22, 2020)  New method was added. From this version, the texts can be replaced by images.</description>
    </item>
    
    <item>
      <title>Libraries of gdoctableapp for golang, Node.js and python were updated to v105</title>
      <link>https://tanaikech.github.io/2020/01/21/libraries-of-gdoctableapp-for-golang-node.js-and-python-were-updated-to-v105/</link>
      <pubDate>Tue, 21 Jan 2020 15:00:02 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/01/21/libraries-of-gdoctableapp-for-golang-node.js-and-python-were-updated-to-v105/</guid>
      <description>Libraries of gdoctableapp for golang, Node.js and python were updated to v1.0.5  go-gdoctableapp node-gdoctableapp gdoctableapppy  Update History   v1.0.5 (January 21, 2020)
 When the inline objects and tables are put in the table. An error occurred. This bug was removed by this update.    I got the pull request at here.
  </description>
    </item>
    
    <item>
      <title>Music Streaming Player for Discord with Google Drive using Node.js</title>
      <link>https://tanaikech.github.io/2019/12/25/music-streaming-player-for-discord-with-google-drive-using-node.js/</link>
      <pubDate>Wed, 25 Dec 2019 15:18:19 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/12/25/music-streaming-player-for-discord-with-google-drive-using-node.js/</guid>
      <description>Gists
Overview This is a sample script for the music streaming player for Discord with Google Drive using Node.js.
Description This sample script can achieve to play the music when uses the voice channel on Discord. The music files are put in the specific folder of Google Drive. This script downloads all music files and plays the music files at the voice channel with the stream.
Usage 1. Register BOT to Discord At first, please register your BOT to Discord.</description>
    </item>
    
    <item>
      <title>Creating a Table to Google Document by Retrieving Values from Google Spreadsheet for Node.js</title>
      <link>https://tanaikech.github.io/2019/07/21/creating-a-table-to-google-document-by-retrieving-values-from-google-spreadsheet-for-node.js/</link>
      <pubDate>Sun, 21 Jul 2019 11:25:19 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/07/21/creating-a-table-to-google-document-by-retrieving-values-from-google-spreadsheet-for-node.js/</guid>
      <description>Gists
This is a sample script for creating a table to Google Document by retrieving values from Google Spreadsheet for Node.js.
Before you use this script, please install Node.js module of node-gdoctableapp.
$ npm install --save-dev gdoctableapp or
$ npm install --global gdoctableapp Sample script: This sample script uses Service Account.
In this sample script, the values are retrieved from Sheet1!A1:C5 of Spreadsheet, and new table is created to the Document using the values.</description>
    </item>
    
    <item>
      <title>node module - node-gdoctableapp</title>
      <link>https://tanaikech.github.io/2019/07/18/node-module-node-gdoctableapp/</link>
      <pubDate>Thu, 18 Jul 2019 11:44:08 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/07/18/node-module-node-gdoctableapp/</guid>
      <description>Overview This is a Node.js module to manage the tables on Google Document using Google Docs API.
Description Google Docs API has been released. When I used this API, I found that it is very difficult for me to manage the tables on Google Document using Google Docs API. Although I checked the official document, unfortunately, I thought that it&amp;rsquo;s very difficult for me. So in order to easily manage the tables on Google Document, I created this library.</description>
    </item>
    
    <item>
      <title>Retrieving Access Token using Service Account for Node.js without using googleapis</title>
      <link>https://tanaikech.github.io/2019/04/02/retrieving-access-token-using-service-account-for-node.js-without-using-googleapis/</link>
      <pubDate>Tue, 02 Apr 2019 16:42:33 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/04/02/retrieving-access-token-using-service-account-for-node.js-without-using-googleapis/</guid>
      <description>Gists
This is a sample Node.js script to retrieve access token from Service Account of Google without using googleapis.
const cryptor = require(&amp;#39;crypto&amp;#39;); const request = require(&amp;#39;request&amp;#39;);  const privateKey = &amp;#34;###&amp;#34;; // private_key of JSON file retrieved by creating Service Account const clientEmail = &amp;#34;###&amp;#34;; // client_email of JSON file retrieved by creating Service Account const scopes = [&amp;#34;https://www.googleapis.com/auth/drive.readonly&amp;#34;]; // Sample scope  const url = &amp;#34;https://www.googleapis.com/oauth2/v4/token&amp;#34;; const header = {  alg: &amp;#34;RS256&amp;#34;,  typ: &amp;#34;JWT&amp;#34;, }; const now = Math.</description>
    </item>
    
    <item>
      <title>Creating New Google Docs and Overwriting Existing Google Docs by Text with Node.js without using googleapis</title>
      <link>https://tanaikech.github.io/2019/04/02/creating-new-google-docs-and-overwriting-existing-google-docs-by-text-with-node.js-without-using-googleapis/</link>
      <pubDate>Tue, 02 Apr 2019 16:33:30 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/04/02/creating-new-google-docs-and-overwriting-existing-google-docs-by-text-with-node.js-without-using-googleapis/</guid>
      <description>Gists
There are 2 sample scripts.
 Create new Spreadsheet using a text value as CSV data. Overwrite the existing Google Document using a text value.  When you use these script, please enable Drive API and retrieve your access token.
Create New Spreadsheet using Text Value const request = require(&amp;#39;request&amp;#39;);  const textData = &amp;#34;a1, b1, c1, d1, e1&amp;#34;; // This is used as CSV data. const orgMimeType = &amp;#34;text/csv&amp;#34;; const orgFileName = &amp;#34;sample.</description>
    </item>
    
    <item>
      <title>Sample Script for Executing with Synchronous Process using Node.js</title>
      <link>https://tanaikech.github.io/2019/02/12/sample-script-for-executing-with-synchronous-process-using-node.js/</link>
      <pubDate>Tue, 12 Feb 2019 09:02:16 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/02/12/sample-script-for-executing-with-synchronous-process-using-node.js/</guid>
      <description>Gists
This is a sample script for executing with the synchronous process using Node.js.
Sample script function work(e) {  return new Promise((resolve, reject) =&amp;gt; {  setTimeout(() =&amp;gt; {  console.log(e);  resolve(&amp;#34;ok&amp;#34; + e);  }, 1000);  }); }  async function main() {  var ar = [1, 2, 3, 4, 5];  for (var i = 0; i &amp;lt; ar.length; i++) {  console.log(&amp;#39;start&amp;#39; + ar[i]);  await work(ar[i]).</description>
    </item>
    
    <item>
      <title>Directly Using Access Token by googleapis for Node.js</title>
      <link>https://tanaikech.github.io/2018/11/19/directly-using-access-token-by-googleapis-for-node.js/</link>
      <pubDate>Mon, 19 Nov 2018 07:35:12 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/11/19/directly-using-access-token-by-googleapis-for-node.js/</guid>
      <description>Gists
This sample script is for directly using the refreshed access token by googleapis for Node.js. When oauth2Client.refreshAccessToken((err, tokens) =&amp;gt; {}); is used to retrieve the refreshed access token, the following error occurs.
 DeprecationWarning: The refreshAccessToken method has been deprecated, and will be removed in the 3.0 release of goo gle-auth-library. Please use the getRequestHeaders method instead.
 It is required to use getRequestHeaders(). But I couldn&amp;rsquo;t find the sample script using getRequestHeaders().</description>
    </item>
    
    <item>
      <title>Updated: node module - google-drive-getfilelist</title>
      <link>https://tanaikech.github.io/2018/11/16/updated-node-module-google-drive-getfilelist/</link>
      <pubDate>Fri, 16 Nov 2018 08:54:33 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/11/16/updated-node-module-google-drive-getfilelist/</guid>
      <description>node module - google-drive-getfilelist was updated to v1.0.3   v1.0.3 (November 16, 2018)
 Modified a bug.    You can get this from https://github.com/tanaikech/node-getfilelist
You can also get this from https://www.npmjs.com/package/google-drive-getfilelist</description>
    </item>
    
    <item>
      <title>node module - google-drive-getfilelist</title>
      <link>https://tanaikech.github.io/2018/11/14/node-module-google-drive-getfilelist/</link>
      <pubDate>Wed, 14 Nov 2018 12:28:21 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/11/14/node-module-google-drive-getfilelist/</guid>
      <description>Overview This is a Node.js module to retrieve the file list with the folder tree from the specific folder of Google Drive.
Description When I create applications for using Google Drive, I often retrieve a file list from a folder in the application. So far, I had created the script for retrieving a file list from a folder for each application. Recently, I thought that if there is the script for retrieving the file list with the folder tree from the folder of Google Drive as a module, it will be useful for me and other users.</description>
    </item>
    
    <item>
      <title>Create Folder Tree of Google Drive using Node.js</title>
      <link>https://tanaikech.github.io/2018/05/20/create-folder-tree-of-google-drive-using-node.js/</link>
      <pubDate>Sun, 20 May 2018 13:40:11 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/05/20/create-folder-tree-of-google-drive-using-node.js/</guid>
      <description>Gists
This is a sample script for retrieving a folder tree using Node.js. In this sample, you can set the top of folder for the folder tree. In generally, the folder tree is created by retrieving folders from the top folder in order. For example, when Google Apps Script is used, the script becomes like this. But when Drive API is used for this situation, if there are a lot of folders in the top folder, a lot of APIs are required to be called.</description>
    </item>
    
    <item>
      <title>Send mails from Gmail using Nodemailer</title>
      <link>https://tanaikech.github.io/2018/01/08/send-mails-from-gmail-using-nodemailer/</link>
      <pubDate>Mon, 08 Jan 2018 10:35:07 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/01/08/send-mails-from-gmail-using-nodemailer/</guid>
      <description>Gists
This is a sample script for sending e-mails from gmail using Nodemailer. In order to use this, please retrieve the folloing parameters before run this script.
 gmail address client ID client Secret Refresh token  Please include https://mail.google.com/ in the scope.   Enable gmail API at API console. Install Nodemailer  const nodemailer = require(&amp;#39;nodemailer&amp;#39;);  var auth = {  type: &amp;#39;oauth2&amp;#39;,  user: &amp;#39;### your gmail address ###&amp;#39;,  clientId: &amp;#39;### client ID ###&amp;#39;,  clientSecret: &amp;#39;### client secret ###&amp;#39;,  refreshToken: &amp;#39;### refresh token ###&amp;#39;, };  var mailOptions = {  from: &amp;#39;#####&amp;#39;,  to: &amp;#39;#####&amp;#39;,  subject: &amp;#39;sample subject&amp;#39;,  text: &amp;#39;sample text&amp;#39;,  html: &amp;#39;&amp;lt;b&amp;gt;sample html&amp;lt;/b&amp;gt;&amp;#39;, };  var transporter = nodemailer.</description>
    </item>
    
    <item>
      <title>Downloading Files Under Specific Folder using Node.js</title>
      <link>https://tanaikech.github.io/2017/08/17/downloading-files-under-specific-folder-using-node.js/</link>
      <pubDate>Thu, 17 Aug 2017 09:25:19 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/08/17/downloading-files-under-specific-folder-using-node.js/</guid>
      <description>Gists
This sample script is for downloading files under a specific folder using Node.js. It can download files with Google Docs and others.
This sample supposes as follows. So please confirm it.
 quickstart is used and default quickstart works fine.  In order to use this sample, please carry out as follows.
 Replace listFiles() of the default quickstart to this sample. Set folderid. This script can retrieve files in the folder with folderid.</description>
    </item>
    
    <item>
      <title>Uploading Files to OneDrive Using Node.js</title>
      <link>https://tanaikech.github.io/2017/08/15/uploading-files-to-onedrive-using-node.js/</link>
      <pubDate>Tue, 15 Aug 2017 10:00:39 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/08/15/uploading-files-to-onedrive-using-node.js/</guid>
      <description>Gists
Upload contents for an item on OneDrive In order to use this script, please retrieve client id, client secret and refresh token before. About this, you can see the detail information at https://gist.github.com/tanaikech/d9674f0ead7e3320c5e3184f5d1b05cc.
1. Simple item upload This is for the simple item upload is available for items with less than 4 MB of content. The detail information is https://dev.onedrive.com/items/upload_put.htm.
var fs = require(&amp;#39;fs&amp;#39;); var mime = require(&amp;#39;mime&amp;#39;); var request = require(&amp;#39;request&amp;#39;);  var file = &amp;#39;.</description>
    </item>
    
    <item>
      <title>Multipart-POST Request Using Node.js</title>
      <link>https://tanaikech.github.io/2017/07/27/multipart-post-request-using-node.js/</link>
      <pubDate>Thu, 27 Jul 2017 09:44:20 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/07/27/multipart-post-request-using-node.js/</guid>
      <description>Gists
Here, I introduce 2 scripts for uploading files to Slack using Node.js as samples. These 2 sample scripts are for uploading files to Slack.
Sample script 1:  You can upload the zip file by converting byte array as follows.  At first, it builds form-data. Adds the zip file converted to byte array and boundary using Buffer.concat(). This is used as body in request.    Basically, this is almost the same to the method using GAS.</description>
    </item>
    
    <item>
      <title>GAS Library - SOUWA_GAS - Effects on Optimized Codes of Pyramid Method</title>
      <link>https://tanaikech.github.io/2016/10/13/gas-library-souwa_gas-effects-on-optimized-codes-of-pyramid-method/</link>
      <pubDate>Thu, 13 Oct 2016 15:57:20 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2016/10/13/gas-library-souwa_gas-effects-on-optimized-codes-of-pyramid-method/</guid>
      <description>Abstract I have already reported that the pyramid method is one of very effectively algolithms for summing string elements in an array using Google Apps Script (GAS). This report describes the adaptability of the pyramid method to any languages except for GAS. c++ (g++), Go, Java, Javascript on Node.js, Python and Ruby were chosen as the sample languages. In those languages, there are languages which have the distinctive commands for summing the array elements.</description>
    </item>
    
  </channel>
</rss>
