<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>slice on tanaike</title>
    <link>https://tanaikech.github.io/tags/slice/</link>
    <description>Recent content in slice on tanaike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Thu, 20 Jun 2019 12:19:52 +0900</lastBuildDate>
    
	<atom:link href="https://tanaikech.github.io/tags/slice/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sorting for Slice using Golang</title>
      <link>https://tanaikech.github.io/2019/06/20/sorting-for-slice-using-golang/</link>
      <pubDate>Thu, 20 Jun 2019 12:19:52 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/06/20/sorting-for-slice-using-golang/</guid>
      <description>Gists
This is a sample script for sorting a slice using Golang. Recently, I had a situation for sorting the coordinates of cells of Spreadsheet. As a test case, it thinks of the situation that the randomized cells are sorted. I think that this can be also used for a table except for Spreadsheet.
Sample slice: The sample slice is as follows.
ar := []struct {row intcol intvalue string}{{0, 0, &amp;quot;A1&amp;quot;},{0, 1, &amp;quot;B1&amp;quot;},{0, 2, &amp;quot;C1&amp;quot;},{1, 0, &amp;quot;A2&amp;quot;},{1, 1, &amp;quot;B2&amp;quot;},{1, 3, &amp;quot;D2&amp;quot;},{2, 0, &amp;quot;A3&amp;quot;},{2, 2, &amp;quot;C3&amp;quot;},}When each element of above slice is put to a Spreadsheet, it becomes as follows.</description>
    </item>
    
    <item>
      <title>Transposing Slice From (n x m) To (m x n) for golang</title>
      <link>https://tanaikech.github.io/2018/02/22/transposing-slice-from-n-x-m-to-m-x-n-for-golang/</link>
      <pubDate>Thu, 22 Feb 2018 11:25:43 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/02/22/transposing-slice-from-n-x-m-to-m-x-n-for-golang/</guid>
      <description>Gists
This is a sample script for transposing slice from (n x m) to (m x n) for golang.
Script : package mainimport &amp;quot;fmt&amp;quot;func transpose(slice [][]string) [][]string {xl := len(slice[0])yl := len(slice)result := make([][]string, xl)for i := range result {result[i] = make([]string, yl)}for i := 0; i &amp;lt; xl; i++ {for j := 0; j &amp;lt; yl; j++ {result[i][j] = slice[j][i]}}return result}func main() {sample := [][]string{[]string{&amp;quot;a1&amp;quot;, &amp;quot;a2&amp;quot;, &amp;quot;a3&amp;quot;, &amp;quot;a4&amp;quot;, &amp;quot;a5&amp;quot;},[]string{&amp;quot;b1&amp;quot;, &amp;quot;b2&amp;quot;, &amp;quot;b3&amp;quot;, &amp;quot;b4&amp;quot;, &amp;quot;b5&amp;quot;},[]string{&amp;quot;c1&amp;quot;, &amp;quot;c2&amp;quot;, &amp;quot;c3&amp;quot;, &amp;quot;c4&amp;quot;, &amp;quot;c5&amp;quot;},}ar := transpose(sample)fmt.</description>
    </item>
    
  </channel>
</rss>