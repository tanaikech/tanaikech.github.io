<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Drive Api on tanaike</title>
    <link>https://tanaikech.github.io/tags/drive-api/</link>
    <description>Recent content in Drive Api on tanaike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Mon, 01 May 2017 15:04:30 +0900</lastBuildDate>
    <atom:link href="https://tanaikech.github.io/tags/drive-api/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Converting PDF to TXT</title>
      <link>https://tanaikech.github.io/2017/05/01/converting-pdf-to-txt</link>
      <pubDate>Mon, 01 May 2017 15:04:30 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/01/converting-pdf-to-txt</guid>
      <description>&lt;p&gt;This is a sample script for converting a PDF file to a TXT file. 2 steps are required for this.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Upload a PDF file as a Google Document&lt;/li&gt;
&lt;li&gt;Download a Google Document as a TXT file&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this sample, Python Quickstart is used. The detail information is &lt;a href=&#34;https://developers.google.com/drive/v3/web/quickstart/python&#34;&gt;https://developers.google.com/drive/v3/web/quickstart/python&lt;/a&gt;. Please read &amp;ldquo;Step 1: Turn on the Drive API&amp;rdquo; and &amp;ldquo;Step 2: Install the Google Client Library&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from __future__ import print_function
import httplib2
import os
import io

from apiclient import discovery
from oauth2client import client
from oauth2client import tools
from oauth2client.file import Storage
from apiclient.http import MediaFileUpload, MediaIoBaseDownload

try:
    import argparse
    flags = argparse.ArgumentParser(parents=[tools.argparser]).parse_args()
except ImportError:
    flags = None

SCOPES = &#39;https://www.googleapis.com/auth/drive&#39;
CLIENT_SECRET_FILE = &#39;client_secret.json&#39;
APPLICATION_NAME = &#39;Drive API Python Quickstart&#39;


def get_credentials():
    credential_path = os.path.join(&amp;quot;./&amp;quot;, &#39;drive-python-quickstart.json&#39;)
    store = Storage(credential_path)
    credentials = store.get()
    if not credentials or credentials.invalid:
        flow = client.flow_from_clientsecrets(CLIENT_SECRET_FILE, SCOPES)
        flow.user_agent = APPLICATION_NAME
        if flags:
            credentials = tools.run_flow(flow, store, flags)
        else:  # Needed only for compatibility with Python 2.6
            credentials = tools.run(flow, store)
        print(&#39;Storing credentials to &#39; + credential_path)
    return credentials


def main():
    credentials = get_credentials()
    http = credentials.authorize(httplib2.Http())
    service = discovery.build(&#39;drive&#39;, &#39;v3&#39;, http=http)

    pdffile = &#39;sample.pdf&#39;
    txtfile = &#39;sample.txt&#39;

    mime = &#39;application/vnd.google-apps.document&#39;
    res = service.files().create(
        body={
            &#39;name&#39;: pdffile,
            &#39;mimeType&#39;: mime
        },
        media_body=MediaFileUpload(pdffile, mimetype=mime, resumable=True)
    ).execute()

    dl = MediaIoBaseDownload(
        io.FileIO(txtfile, &#39;wb&#39;),
        service.files().export_media(fileId=res[&#39;id&#39;], mimeType=&amp;quot;text/plain&amp;quot;)
    )
    done = False
    while done is False:
        status, done = dl.next_chunk()
    print(&amp;quot;Done.&amp;quot;)


if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Creating Spreadsheet from Excel file</title>
      <link>https://tanaikech.github.io/2017/04/15/creating-spreadsheet-from-excel-file</link>
      <pubDate>Sat, 15 Apr 2017 10:39:05 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/04/15/creating-spreadsheet-from-excel-file</guid>
      <description>

&lt;p&gt;These scripts can be executed on Script Editor. But, in order to use these, you have to enable Drive API of Advanced Google services and of Google API Console. &amp;ldquo;Drive API v2&amp;rdquo; can be used at Google Apps Script by enabling Drive API of Advanced Google services and of Google API Console.&lt;/p&gt;

&lt;p&gt;How to use it is as follows.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In the script editor, select Resources &amp;gt; Advanced Google services&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the dialog that appears, click the on/off switch for &lt;a href=&#34;https://developers.google.com/drive/v2/reference/&#34;&gt;Drive API v2&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;At the bottom of the dialog, click the link for the Google API Console.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the console, click into the filter box and type part of the name of the API &amp;ldquo;Drive API&amp;rdquo;, then click the name once you see it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On the next screen, click Enable API.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Close the Developers Console and return to the script editor. Click OK in the dialog. The advanced service you enabled is now available in autocomplete.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The detail information is &lt;a href=&#34;https://developers.google.com/apps-script/guides/services/advanced&#34;&gt;https://developers.google.com/apps-script/guides/services/advanced&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;1-creating-spreadsheet-from-excel-file-on-google-drive&#34;&gt;1. Creating Spreadsheet from Excel file on Google Drive&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var fileID = &amp;quot;#####&amp;quot;;
var folderID = &amp;quot;#####&amp;quot;;
var filename = &amp;quot;filename&amp;quot;;

var res = Drive.Files.insert({
  &amp;quot;mimeType&amp;quot;: &amp;quot;application/vnd.google-apps.spreadsheet&amp;quot;,
  &amp;quot;parents&amp;quot;: [{id: folderID}],
  &amp;quot;title&amp;quot;: filename
}, DriveApp.getFileById(fileID).getBlob());
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-creating-spreadsheet-from-excel-file-on-web-site&#34;&gt;2. Creating Spreadsheet from Excel file on Web Site&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var fileURL = &amp;quot;https://#####/sample.xlsx&amp;quot;;
var folderID = &amp;quot;#####&amp;quot;;
var filename = &amp;quot;filename&amp;quot;;

var res = Drive.Files.insert({
  &amp;quot;mimeType&amp;quot;: &amp;quot;application/vnd.google-apps.spreadsheet&amp;quot;,
  &amp;quot;parents&amp;quot;: [{id: folderID}],
  &amp;quot;title&amp;quot;: filename
}, UrlFetchApp.fetch(fileURL).getBlob());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example, when you want to retrieve created file ID, you can retrieve it by&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;res.id
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Creating Downloaded Excel file as Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/04/14/creating-downloaded-excel-file-as-spreadsheet</link>
      <pubDate>Fri, 14 Apr 2017 18:03:32 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/04/14/creating-downloaded-excel-file-as-spreadsheet</guid>
      <description>&lt;p&gt;This is a sample GAS script to create an Excel file, which was downloaded from web, as Spreadsheet. By using Drive API, it can be achieved without access token.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Script :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function downloadFile(fileURL, folder) {
  var filename = fileURL.match(&amp;quot;.+/(.+?)([\?#;].*)?$&amp;quot;)[1];
  var response = UrlFetchApp.fetch(fileURL);
  var rc = response.getResponseCode();
  var blob = response.getBlob();
  var resource = {
    &amp;quot;mimeType&amp;quot;: &amp;quot;application/vnd.google-apps.spreadsheet&amp;quot;,
    &amp;quot;parents&amp;quot;: [{id: folder}],
    &amp;quot;title&amp;quot;: filename
  };
  var res = Drive.Files.insert(resource, blob);
  var fileInfo = [rc, res.title, blob.getBytes().length, res.id];
  return fileInfo;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Result :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    200,
    sample.xlsx,
    10000.0,
    ## file id ##
]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>How to use &#34;fields&#34; of Drive APIs</title>
      <link>https://tanaikech.github.io/2017/03/30/how-to-use-fields-of-drive-apis</link>
      <pubDate>Thu, 30 Mar 2017 08:53:21 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/03/30/how-to-use-fields-of-drive-apis</guid>
      <description>

&lt;p&gt;There are a lot of APIs on Google. When we use Google Drive APIs, they usually have &amp;ldquo;fields&amp;rdquo; as a resource. The parameter &amp;ldquo;fields&amp;rdquo; gives various information which is selected to us. This is one of important parameters. And this can be used at Google Apps Script (GAS) although that version is v2. About how to use it, there are &lt;a href=&#34;https://developers.google.com/drive/v2/reference/&#34;&gt;some documents&lt;/a&gt;. But it is difficult to find how to use it at GAS. So I would like to write down here as a memorandum. Most parameters for APIs have to be expressed as JSON. However, the expressions are different for each API. I would like to introduce this using some samples. &lt;strong&gt;This is for GAS.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-drive-files-list&#34;&gt;1. Drive.Files.list&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;var params = {
    q:      &amp;quot;title=&#39;sample&#39; and trashed=false&amp;quot;,
    fields: &amp;quot;items(id, title, mimeType), kind&amp;quot;
};
var res = Drive.Files.list(params)
Logger.log(JSON.stringify(res))

{
  &amp;quot;kind&amp;quot;: &amp;quot;drive#fileList&amp;quot;,
  &amp;quot;items&amp;quot;: [
    {
      &amp;quot;id&amp;quot;: &amp;quot;FILE ID&amp;quot;,
      &amp;quot;mimeType&amp;quot;: &amp;quot;mimeType&amp;quot;,
      &amp;quot;title&amp;quot;: &amp;quot;FILE NAME&amp;quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;q&lt;/code&gt; is used at &amp;ldquo;Search for Files&amp;rdquo;. At this sample, it searches file name of &amp;ldquo;sample&amp;rdquo; outside trash box.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fields&lt;/code&gt; is expressed as above. &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt; and &amp;ldquo;mimeType&amp;rdquo; are file name, file id and mime type of the file, respectively. &lt;code&gt;kind&lt;/code&gt; is &amp;ldquo;This is always drive#fileList.&amp;rdquo; from document.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;References :

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/drive/v2/reference/files/list&#34;&gt;https://developers.google.com/drive/v2/reference/files/list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/drive/v2/web/search-parameters&#34;&gt;https://developers.google.com/drive/v2/web/search-parameters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-drive-files-get&#34;&gt;2. Drive.Files.get&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;var params = {
    fields: &amp;quot;id, title, mimeType&amp;quot;
};
var dat = Drive.Files.get(&amp;quot;FILE ID&amp;quot;, params);
Logger.log(JSON.stringify(dat))

{
  &amp;quot;id&amp;quot;: &amp;quot;FILE ID&amp;quot;,
  &amp;quot;mimeType&amp;quot;: &amp;quot;mimeType&amp;quot;,
  &amp;quot;title&amp;quot;: &amp;quot;FILE NAME&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example, &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;mimeType&lt;/code&gt; are file name, file id and mime type of the file, respectively.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reference :

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/drive/v2/reference/files/get&#34;&gt;https://developers.google.com/drive/v2/reference/files/get&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;3-drive-files-insert&#34;&gt;3. Drive.Files.insert&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;var data = {
    title:    &amp;quot;sample&amp;quot;,
    mimeType: &amp;quot;application/vnd.google-apps.spreadsheet&amp;quot;,
    parents:  [{&amp;quot;id&amp;quot;: &amp;quot;FOLDER ID&amp;quot;}]
};
var res = Drive.Files.insert(data);
Logger.log(&amp;quot;{id: %s, title: %s, mimeType: %s}&amp;quot;, res.id, res.title, res.mimeType)

{
  &amp;quot;id&amp;quot;: &amp;quot;FILE ID&amp;quot;,
  &amp;quot;title&amp;quot;: &amp;quot;sample&amp;quot;,
  &amp;quot;mimeType&amp;quot;: &amp;quot;application/vnd.google-apps.spreadsheet&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By this, a new spreadsheet is created under the FOLDER ID. In this case, &amp;ldquo;fields&amp;rdquo; is retrieved from the results of execution.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reference :

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/drive/v2/reference/files/insert&#34;&gt;https://developers.google.com/drive/v2/reference/files/insert&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Retrieving Access Token for Google Drive API using GAS</title>
      <link>https://tanaikech.github.io/2017/02/17/retrieving-access-token-for-google-drive-api-using-gas</link>
      <pubDate>Fri, 17 Feb 2017 17:25:29 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/17/retrieving-access-token-for-google-drive-api-using-gas</guid>
      <description>

&lt;p&gt;These GASs retrieve an access token for using Google Drive API. There are 3 parts. Before you use this, please retrieve client ID, client secret and redirect uri from Google , and choose scopes.&lt;/p&gt;

&lt;h3 id=&#34;1-retrieving-code-from-web&#34;&gt;1. Retrieving code from web&lt;/h3&gt;

&lt;p&gt;This is a script to output URL for retrieving &amp;ldquo;code&amp;rdquo; from web. Please retrieve &amp;ldquo;code&amp;rdquo; by import this URL to your browser. After you run this script, using &amp;ldquo;url&amp;rdquo; got from this script, it retrieves &amp;ldquo;code&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  var url = &#39;https://accounts.google.com/o/oauth2/auth&#39; +
        &amp;quot;?client_id=&amp;quot; + encodeURIComponent(clientid) +
        &amp;quot;&amp;amp;redirect_uri=&amp;quot; + encodeURIComponent(redirecturi) +
        &amp;quot;&amp;amp;scope=&amp;quot; + encodeURIComponent(scopes) +
        &amp;quot;&amp;amp;response_type=code&amp;amp;access_type=offline&amp;quot;;
  Logger.log(url);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-retrieving-refresh-token&#34;&gt;2. Retrieving refresh token&lt;/h3&gt;

&lt;p&gt;This is a script to retrieve &amp;ldquo;refresh token&amp;rdquo;. Before you run this script, it sets &amp;ldquo;code&amp;rdquo; got at part 1. By this script, you can also retrieve &amp;ldquo;access token&amp;rdquo;. Also this &amp;ldquo;access token&amp;rdquo; can be used. But there is a limit time for it. So you have to retrieve &amp;ldquo;access token&amp;rdquo; again. At that time, &amp;ldquo;refresh token&amp;rdquo; is need to it. According to &amp;ldquo;golang.org/x/oauth2&amp;rdquo;, it uses &amp;ldquo;refresh token&amp;rdquo; every time without using the limit time of access token. So this script can be used to only retrieve &amp;ldquo;refresh token&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  var token = JSON.parse(UrlFetchApp.fetch(&amp;quot;https://accounts.google.com/o/oauth2/token&amp;quot;, {
    &amp;quot;method&amp;quot; : &amp;quot;POST&amp;quot;,
    &amp;quot;payload&amp;quot; : {
      &amp;quot;code&amp;quot; : code,
      &amp;quot;client_id&amp;quot; : clientid,
      &amp;quot;client_secret&amp;quot; : clientsecret,
      &amp;quot;redirect_uri&amp;quot; : redirecturi,
      &amp;quot;grant_type&amp;quot; : &amp;quot;authorization_code&amp;quot;
    },
    &amp;quot;muteHttpExceptions&amp;quot; : true
  }).getContentText());
  Logger.log(token.refresh_token);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-retrieving-access-token&#34;&gt;3. Retrieving access token&lt;/h3&gt;

&lt;p&gt;This is a script to retrieve &amp;ldquo;access token&amp;rdquo; using &amp;ldquo;refresh token&amp;rdquo;. Before you run this script, it sets &amp;ldquo;refresh token&amp;rdquo; got at part 2. When you use Drive API, the &amp;ldquo;access token&amp;rdquo; can be retrieved by this script. You can continue to use &amp;ldquo;refresh token&amp;rdquo; got at part 2, until it&amp;rsquo;s revoked.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  var token = JSON.parse(UrlFetchApp.fetch(&amp;quot;https://www.googleapis.com/oauth2/v4/token&amp;quot;, {
    &amp;quot;method&amp;quot; : &amp;quot;POST&amp;quot;,
    &amp;quot;payload&amp;quot; : {
      &amp;quot;client_id&amp;quot; : clientid,
      &amp;quot;client_secret&amp;quot; : clientsecret,
      &amp;quot;refresh_token&amp;quot; :refreshtoken,
      &amp;quot;grant_type&amp;quot; : &amp;quot;refresh_token&amp;quot;
    },
    &amp;quot;muteHttpExceptions&amp;quot; : true
  }).getContentText());
  Logger.log(token.access_token);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>File Upload and Download with File Convert For curl using Drive API</title>
      <link>https://tanaikech.github.io/2017/02/08/file-upload-and-download-with-file-convert-for-curl-using-drive-api</link>
      <pubDate>Wed, 08 Feb 2017 15:50:52 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/08/file-upload-and-download-with-file-convert-for-curl-using-drive-api</guid>
      <description>

&lt;p&gt;It is necessary to retrieve access token on Google. Scope is as follows.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://www.googleapis.com/auth/drive
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Other mimetypes can be seen &lt;a href=&#34;https://developers.google.com/drive/v3/web/manage-downloads&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;download-and-convert-from-spreadsheet-to-excel&#34;&gt;Download and convert from Spreadsheet to Excel&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;curl -X GET -sSL \
        -H &amp;quot;Authorization: Bearer [Your access token]&amp;quot; \
        -o &amp;quot;Excel file name&amp;quot; \
        &amp;quot;https://www.googleapis.com/drive/v3/files/[File ID]/export?mimeType=application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;upload-and-convert-from-excel-to-spreadsheet&#34;&gt;Upload and convert from Excel to Spreadsheet&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;curl -X POST -sSL \
        -H &amp;quot;Authorization: Bearer [Your access token]&amp;quot; \
        -F &amp;quot;metadata={ \
                     name : &#39;[File name on Google Drive]&#39;, \
                     mimeType : &#39;application/vnd.google-apps.spreadsheet&#39; \
                     };type=application/json;charset=UTF-8&amp;quot; \
        -F &amp;quot;file=@[Your Excel file];type=application/vnd.ms-excel&amp;quot; \
        &amp;quot;https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>