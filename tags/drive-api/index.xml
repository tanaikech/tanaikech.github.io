<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Drive API on tanaike</title>
    <link>https://tanaikech.github.io/tags/drive-api/</link>
    <description>Recent content in Drive API on tanaike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Mon, 29 Jun 2020 13:59:48 +0900</lastBuildDate>
    
	<atom:link href="https://tanaikech.github.io/tags/drive-api/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Processing to Create New File to Specific Folder using Drive API</title>
      <link>https://tanaikech.github.io/2020/06/29/processing-to-create-new-file-to-specific-folder-using-drive-api/</link>
      <pubDate>Mon, 29 Jun 2020 13:59:48 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/06/29/processing-to-create-new-file-to-specific-folder-using-drive-api/</guid>
      <description>Gists
In this report, I would like to report for processing to create new file to the specific folder using Drive API. When the new file is created to the specific folder using Drive API, the property of parents with the value of folder ID is included in the request body of the method &amp;ldquo;Files: create&amp;rdquo;. About this process, I had thought that the file is directly created to the specific folder.</description>
    </item>
    
    <item>
      <title>Batch Requests for Drive API using Google Apps Script</title>
      <link>https://tanaikech.github.io/2020/06/15/batch-requests-for-drive-api-using-google-apps-script/</link>
      <pubDate>Mon, 15 Jun 2020 11:33:00 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/06/15/batch-requests-for-drive-api-using-google-apps-script/</guid>
      <description>Overview These are the sample scripts of the batch requests for Drive API using Google Apps Script.
Description When we want to manage the files and folders on Google Drive, we have 2 ways. One is the use of Drive service. Another is the use of Drive API. In the case of them, when we want to manage a lot of files and folders, unfortunately, both ways have no batch requests.</description>
    </item>
    
    <item>
      <title>Creating Shortcut on Google Drive using Google Apps Script</title>
      <link>https://tanaikech.github.io/2020/05/28/creating-shortcut-on-google-drive-using-google-apps-script/</link>
      <pubDate>Thu, 28 May 2020 14:49:58 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/05/28/creating-shortcut-on-google-drive-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for creating a shortcut on Google Drive using Google Apps Script.
Sample script Before you run the script, please enable Drive API at Advanced Google services.
function createShortcut(targetId, name, folderId) {const resource = {shortcutDetails: { targetId: targetId },title: name,mimeType: &amp;#34;application/vnd.google-apps.shortcut&amp;#34;,};if (folderId) resource.parents = [{ id: folderId }];const shortcut = Drive.Files.insert(resource);return shortcut.id;}// Please run this function.</description>
    </item>
    
    <item>
      <title>GAS Library - CopyFolder</title>
      <link>https://tanaikech.github.io/2020/05/26/gas-library-copyfolder/</link>
      <pubDate>Tue, 26 May 2020 07:53:11 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/05/26/gas-library-copyfolder/</guid>
      <description>Overview This is Google Apps Script library for copying folder on Google Drive.
Description I have sometimes the situation that it is required to back up the folder on Google Drive to Google Drive. But unfortunately, the method of makeCopy() of Class File and the method of Files: copy of Drive API cannot be used for directly copying the folder on Google Drive. So I created this as a library. This library can copy the folder on Google Drive.</description>
    </item>
    
    <item>
      <title>Updating a File with Resumable Upload using Drive API</title>
      <link>https://tanaikech.github.io/2020/04/20/updating-a-file-with-resumable-upload-using-drive-api/</link>
      <pubDate>Mon, 20 Apr 2020 14:41:42 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/04/20/updating-a-file-with-resumable-upload-using-drive-api/</guid>
      <description>Gists
This is a sample flow for updating a file with the resumable upload using Drive API.
Sample situation: In this answer, as a sample situation, it supposes that a text file in Google Drive is updated by the resumable upload with the multiple chunks. And as the method for requesting, I use the curl command.
I prepared 2 files for 2 chunks. As the test situation, the 2 chunks of 262,144 bytes and 37,856 bytes are uploaded.</description>
    </item>
    
    <item>
      <title>Retrieving Files and Folders without Parents in Google Drive</title>
      <link>https://tanaikech.github.io/2020/03/13/retrieving-files-and-folders-without-parents-in-google-drive/</link>
      <pubDate>Fri, 13 Mar 2020 17:00:36 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/03/13/retrieving-files-and-folders-without-parents-in-google-drive/</guid>
      <description>Gists
This is a sample script for retrieving the files and folders which have no parents in own Google Drive.
When you use this script, please enable Drive API at Advanced Google services.
Sample script const myFunction = () =&amp;gt; {const token = ScriptApp.getOAuthToken();const fields = decodeURIComponent(&amp;#34;nextPageToken,files(name,id,mimeType,parents)&amp;#34;);const q = decodeURIComponent(&amp;#34;&amp;#39;me&amp;#39; in owners and trashed = false&amp;#34;);let files = [];let pageToken = &amp;#34;&amp;#34;;do {const res = UrlFetchApp.</description>
    </item>
    
    <item>
      <title>Drive API cannot create Google Apps Script project no longer</title>
      <link>https://tanaikech.github.io/2020/03/09/drive-api-cannot-create-google-apps-script-project-no-longer/</link>
      <pubDate>Mon, 09 Mar 2020 15:09:39 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/03/09/drive-api-cannot-create-google-apps-script-project-no-longer/</guid>
      <description>Gists
Today, I noticed that new Google Apps Script project of the standalone script type cannot be created by the method of Files: create in Drive API. From now, in order to manage the Google Apps Script project, only Google Apps Script API is required to be used. By this, the following issues are brought.
 When the new standalone GAS project is created in the specific folder by uploading the local script, the following flow is required to be run.</description>
    </item>
    
    <item>
      <title>Simple Script of Resumable Upload with Google Drive API for Python</title>
      <link>https://tanaikech.github.io/2020/03/05/simple-script-of-resumable-upload-with-google-drive-api-for-python/</link>
      <pubDate>Thu, 05 Mar 2020 14:10:04 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/03/05/simple-script-of-resumable-upload-with-google-drive-api-for-python/</guid>
      <description>Gists
This is a simple sample script for achieving the resumable upload to Google Drive using Python. In order to achieve the resumable upload, at first, it is required to retrieve the location, which is the endpoint of upload. The location is included in the response headers. After the location was retrieved, the file can be uploaded to the location URL.
In this sample, a PNG file is uploaded with the resumable upload using a single chunk.</description>
    </item>
    
    <item>
      <title>Simple Script of Resumable Upload with Google Drive API for Node.js</title>
      <link>https://tanaikech.github.io/2020/03/05/simple-script-of-resumable-upload-with-google-drive-api-for-node.js/</link>
      <pubDate>Thu, 05 Mar 2020 13:48:05 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/03/05/simple-script-of-resumable-upload-with-google-drive-api-for-node.js/</guid>
      <description>Gists
This is a simple sample script for achieving the resumable upload to Google Drive using Node.js. In order to achieve the resumable upload, at first, it is required to retrieve the location, which is the endpoint of upload. The location is included in the response headers. After the location was retrieved, the file can be uploaded to the location URL.
In this sample, a PNG file is uploaded with the resumable upload using a single chunk.</description>
    </item>
    
    <item>
      <title>Music Streaming Player for Discord with Google Drive using Node.js</title>
      <link>https://tanaikech.github.io/2019/12/25/music-streaming-player-for-discord-with-google-drive-using-node.js/</link>
      <pubDate>Wed, 25 Dec 2019 15:18:19 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/12/25/music-streaming-player-for-discord-with-google-drive-using-node.js/</guid>
      <description>Gists
Overview This is a sample script for the music streaming player for Discord with Google Drive using Node.js.
Description This sample script can achieve to play the music when uses the voice channel on Discord. The music files are put in the specific folder of Google Drive. This script downloads all music files and plays the music files at the voice channel with the stream.
Usage 1. Register BOT to Discord At first, please register your BOT to Discord.</description>
    </item>
    
    <item>
      <title>Modifying Revisions of a File on Google Drive using Google Apps Script</title>
      <link>https://tanaikech.github.io/2019/09/16/modifying-revisions-of-a-file-on-google-drive-using-google-apps-script/</link>
      <pubDate>Mon, 16 Sep 2019 15:50:56 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/09/16/modifying-revisions-of-a-file-on-google-drive-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for modifying the revisions of a file on Google Drive using Google Apps Script. This script can be used for not only Google Docs files, but also the files except for Google Docs.
Issue and workaround: Unfortunately, in the current stage, at Google Docs files, the revision of Google Docs cannot be directly changed by APIs with a script. So as one of several workarounds, I would like to propose to overwrite the Google Docs file using the exported data.</description>
    </item>
    
    <item>
      <title>Creating New Google Docs and Overwriting Existing Google Docs by Text with Node.js without using googleapis</title>
      <link>https://tanaikech.github.io/2019/04/02/creating-new-google-docs-and-overwriting-existing-google-docs-by-text-with-node.js-without-using-googleapis/</link>
      <pubDate>Tue, 02 Apr 2019 16:33:30 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/04/02/creating-new-google-docs-and-overwriting-existing-google-docs-by-text-with-node.js-without-using-googleapis/</guid>
      <description>Gists
There are 2 sample scripts.
 Create new Spreadsheet using a text value as CSV data. Overwrite the existing Google Document using a text value.  When you use these script, please enable Drive API and retrieve your access token.
Create New Spreadsheet using Text Value const request = require(&amp;#39;request&amp;#39;);const textData = &amp;#34;a1, b1, c1, d1, e1&amp;#34;; // This is used as CSV data.const orgMimeType = &amp;#34;text/csv&amp;#34;;const orgFileName = &amp;#34;sample.</description>
    </item>
    
    <item>
      <title>Upload Files to Google Drive using Javascript</title>
      <link>https://tanaikech.github.io/2018/08/13/upload-files-to-google-drive-using-javascript/</link>
      <pubDate>Mon, 13 Aug 2018 10:16:54 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/08/13/upload-files-to-google-drive-using-javascript/</guid>
      <description>Gists
News At October 11, 2019, I published a Javascript library to to run the resumable upload for Google Drive. When this is used, the large file can be uploaded. You can also use this js library.
Description This is a sample script for uploading files to Google Drive using Javascript. The files are uploaded by Drive API v3. gapi.client.drive.files.create() can create an empty file on Google Drive. But it cannot directly upload files including contents.</description>
    </item>
    
    <item>
      <title>Create Folder Tree of Google Drive using Node.js</title>
      <link>https://tanaikech.github.io/2018/05/20/create-folder-tree-of-google-drive-using-node.js/</link>
      <pubDate>Sun, 20 May 2018 13:40:11 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/05/20/create-folder-tree-of-google-drive-using-node.js/</guid>
      <description>Gists
This is a sample script for retrieving a folder tree using Node.js. In this sample, you can set the top of folder for the folder tree. In generally, the folder tree is created by retrieving folders from the top folder in order. For example, when Google Apps Script is used, the script becomes like this. But when Drive API is used for this situation, if there are a lot of folders in the top folder, a lot of APIs are required to be called.</description>
    </item>
    
    <item>
      <title>Uploading Files From Local To Google Drive by Python without Quickstart</title>
      <link>https://tanaikech.github.io/2018/02/12/uploading-files-from-local-to-google-drive-by-python-without-quickstart/</link>
      <pubDate>Mon, 12 Feb 2018 11:39:22 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/02/12/uploading-files-from-local-to-google-drive-by-python-without-quickstart/</guid>
      <description>Gists
This is a sample script for uploading files from local PC to Google Drive using Python. In this sample, Quickstart is not used. So when you use this script, please retrieve access token.
Curl sample : curl -X POST \ -H &amp;#34;Authorization: Bearer ### access token ###&amp;#34; \ -F &amp;#34;metadata={name : &amp;#39;sample.png&amp;#39;, parents: [&amp;#39;### folder ID ###&amp;#39;]};type=application/json;charset=UTF-8&amp;#34; \ -F &amp;#34;file=@sample.png;type=image/png&amp;#34; \ &amp;#34;https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&amp;#34;]
Python sample : When above curl sample is converted to Python, it becomes as follows.</description>
    </item>
    
    <item>
      <title>Updating Thumbnail of File on Google Drive using Python</title>
      <link>https://tanaikech.github.io/2017/08/19/updating-thumbnail-of-file-on-google-drive-using-python/</link>
      <pubDate>Sat, 19 Aug 2017 16:27:17 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/08/19/updating-thumbnail-of-file-on-google-drive-using-python/</guid>
      <description>Gists
This sample script is for updating thumbnail of file on Google Drive using Python.
This sample supposes that quickstart is used and default quickstart works fine. In order to use this sample, please carry out as follows.
 Replace main() of the default quickstart to this sample.  Script : import base64 # This is used for this sample. def main():credentials = get_credentials()http = credentials.authorize(httplib2.Http())service = discovery.</description>
    </item>
    
    <item>
      <title>Downloading Files Under Specific Folder using Node.js</title>
      <link>https://tanaikech.github.io/2017/08/17/downloading-files-under-specific-folder-using-node.js/</link>
      <pubDate>Thu, 17 Aug 2017 09:25:19 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/08/17/downloading-files-under-specific-folder-using-node.js/</guid>
      <description>Gists
This sample script is for downloading files under a specific folder using Node.js. It can download files with Google Docs and others.
This sample supposes as follows. So please confirm it.
 quickstart is used and default quickstart works fine.  In order to use this sample, please carry out as follows.
 Replace listFiles() of the default quickstart to this sample. Set folderid. This script can retrieve files in the folder with folderid.</description>
    </item>
    
    <item>
      <title>Retrieving HTML File ID from Microsoft Docx File on Google Drive</title>
      <link>https://tanaikech.github.io/2017/05/24/retrieving-html-file-id-from-microsoft-docx-file-on-google-drive/</link>
      <pubDate>Wed, 24 May 2017 09:08:58 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/24/retrieving-html-file-id-from-microsoft-docx-file-on-google-drive/</guid>
      <description>This sample script converts from Microsoft Docx File on Google Drive to Google Spreadsheet, and converts to HTML file.
Drive APIs v2 and v3 are used for this. Please set as follows.
 Drive API v2 Drive API v3  &amp;ldquo;Drive API v2&amp;rdquo; can be used at Google Apps Script by enabling Drive API of Advanced Google services and of Google API Console.
How to use it is as follows.</description>
    </item>
    
    <item>
      <title>OCR using Google Drive API</title>
      <link>https://tanaikech.github.io/2017/05/02/ocr-using-google-drive-api/</link>
      <pubDate>Tue, 02 May 2017 14:21:55 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/02/ocr-using-google-drive-api/</guid>
      <description>This is a sample script for OCR using Google Drive API. A text file which converted by OCR can be retrieved by inputting an image file.
In this sample, Python Quickstart is used. The detail information is https://developers.google.com/drive/v3/web/quickstart/python. Please read “Step 1: Turn on the Drive API” and “Step 2: Install the Google Client Library”.
from __future__ import print_function import httplib2 import os import io from apiclient import discovery from oauth2client import client from oauth2client import tools from oauth2client.</description>
    </item>
    
    <item>
      <title>Converting PDF to TXT</title>
      <link>https://tanaikech.github.io/2017/05/01/converting-pdf-to-txt/</link>
      <pubDate>Mon, 01 May 2017 15:04:30 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/05/01/converting-pdf-to-txt/</guid>
      <description>This is a sample script for converting a PDF file to a TXT file. 2 steps are required for this.
 Upload a PDF file as a Google Document Download a Google Document as a TXT file  In this sample, Python Quickstart is used. The detail information is https://developers.google.com/drive/v3/web/quickstart/python. Please read &amp;ldquo;Step 1: Turn on the Drive API&amp;rdquo; and &amp;ldquo;Step 2: Install the Google Client Library&amp;rdquo;.
from __future__ import print_function import httplib2 import os import io from apiclient import discovery from oauth2client import client from oauth2client import tools from oauth2client.</description>
    </item>
    
    <item>
      <title>Creating Spreadsheet from Excel file</title>
      <link>https://tanaikech.github.io/2017/04/15/creating-spreadsheet-from-excel-file/</link>
      <pubDate>Sat, 15 Apr 2017 10:39:05 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/04/15/creating-spreadsheet-from-excel-file/</guid>
      <description>These scripts can be executed on Script Editor. But, in order to use these, you have to enable Drive API of Advanced Google services and of Google API Console. &amp;ldquo;Drive API v2&amp;rdquo; can be used at Google Apps Script by enabling Drive API of Advanced Google services and of Google API Console.
How to use it is as follows.
  In the script editor, select Resources &amp;gt; Advanced Google services</description>
    </item>
    
    <item>
      <title>Creating Downloaded Excel file as Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/04/14/creating-downloaded-excel-file-as-spreadsheet/</link>
      <pubDate>Fri, 14 Apr 2017 18:03:32 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/04/14/creating-downloaded-excel-file-as-spreadsheet/</guid>
      <description>This is a sample GAS script to create an Excel file, which was downloaded from web, as Spreadsheet. By using Drive API, it can be achieved without access token.
Script :
function downloadFile(fileURL, folder) { var filename = fileURL.match(&amp;#34;.+/(.+?)([\?#;].*)?$&amp;#34;)[1]; var response = UrlFetchApp.fetch(fileURL); var rc = response.getResponseCode(); var blob = response.getBlob(); var resource = { &amp;#34;mimeType&amp;#34;: &amp;#34;application/vnd.google-apps.spreadsheet&amp;#34;, &amp;#34;parents&amp;#34;: [{id: folder}], &amp;#34;title&amp;#34;: filename }; var res = Drive.Files.insert(resource, blob); var fileInfo = [rc, res.</description>
    </item>
    
    <item>
      <title>How to use &#34;fields&#34; of Drive APIs</title>
      <link>https://tanaikech.github.io/2017/03/30/how-to-use-fields-of-drive-apis/</link>
      <pubDate>Thu, 30 Mar 2017 08:53:21 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/03/30/how-to-use-fields-of-drive-apis/</guid>
      <description>There are a lot of APIs on Google. When we use Google Drive APIs, they usually have &amp;ldquo;fields&amp;rdquo; as a resource. The parameter &amp;ldquo;fields&amp;rdquo; gives various information which is selected to us. This is one of important parameters. And this can be used at Google Apps Script (GAS) although that version is v2. About how to use it, there are some documents. But it is difficult to find how to use it at GAS.</description>
    </item>
    
    <item>
      <title>Retrieving Access Token for Google Drive API using GAS</title>
      <link>https://tanaikech.github.io/2017/02/17/retrieving-access-token-for-google-drive-api-using-gas/</link>
      <pubDate>Fri, 17 Feb 2017 17:25:29 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/17/retrieving-access-token-for-google-drive-api-using-gas/</guid>
      <description>These GASs retrieve an access token for using Google Drive API. There are 3 parts. Before you use this, please retrieve client ID, client secret and redirect uri from Google , and choose scopes.
1. Retrieving code from web This is a script to output URL for retrieving &amp;ldquo;code&amp;rdquo; from web. Please retrieve &amp;ldquo;code&amp;rdquo; by import this URL to your browser. After you run this script, using &amp;ldquo;url&amp;rdquo; got from this script, it retrieves &amp;ldquo;code&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>File Upload and Download with File Convert For curl using Drive API</title>
      <link>https://tanaikech.github.io/2017/02/08/file-upload-and-download-with-file-convert-for-curl-using-drive-api/</link>
      <pubDate>Wed, 08 Feb 2017 15:50:52 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/08/file-upload-and-download-with-file-convert-for-curl-using-drive-api/</guid>
      <description>It is necessary to retrieve access token on Google. Scope is as follows.
https://www.googleapis.com/auth/drive Other mimetypes can be seen here.
Download and convert from Spreadsheet to Excel curl -X GET -sSL \ -H &amp;quot;Authorization: Bearer [Your access token]&amp;quot; \ -o &amp;quot;Excel file name&amp;quot; \ &amp;quot;https://www.googleapis.com/drive/v3/files/[File ID]/export?mimeType=application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&amp;quot; Upload and convert from Excel to Spreadsheet curl -X POST -sSL \ -H &amp;quot;Authorization: Bearer [Your access token]&amp;quot; \ -F &amp;quot;metadata={ \ name : &#39;[File name on Google Drive]&#39;, \ mimeType : &#39;application/vnd.</description>
    </item>
    
  </channel>
</rss>