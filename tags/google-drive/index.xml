<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Google Drive on tanaike</title>
    <link>https://tanaikech.github.io/tags/google-drive/</link>
    <description>Recent content in Google Drive on tanaike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Sat, 15 Apr 2017 10:39:05 +0900</lastBuildDate>
    <atom:link href="https://tanaikech.github.io/tags/google-drive/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Creating Spreadsheet from Excel file</title>
      <link>https://tanaikech.github.io/2017/04/15/creating-spreadsheet-from-excel-file</link>
      <pubDate>Sat, 15 Apr 2017 10:39:05 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/04/15/creating-spreadsheet-from-excel-file</guid>
      <description>

&lt;p&gt;These scripts can be executed on Script Editor. But, in order to use these, you have to enable Drive API of Advanced Google services and of Google API Console. &amp;ldquo;Drive API v2&amp;rdquo; can be used at Google Apps Script by enabling Drive API of Advanced Google services and of Google API Console.&lt;/p&gt;

&lt;p&gt;How to use it is as follows.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In the script editor, select Resources &amp;gt; Advanced Google services&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the dialog that appears, click the on/off switch for &lt;a href=&#34;https://developers.google.com/drive/v2/reference/&#34;&gt;Drive API v2&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;At the bottom of the dialog, click the link for the Google API Console.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the console, click into the filter box and type part of the name of the API &amp;ldquo;Drive API&amp;rdquo;, then click the name once you see it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On the next screen, click Enable API.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Close the Developers Console and return to the script editor. Click OK in the dialog. The advanced service you enabled is now available in autocomplete.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The detail information is &lt;a href=&#34;https://developers.google.com/apps-script/guides/services/advanced&#34;&gt;https://developers.google.com/apps-script/guides/services/advanced&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;1-creating-spreadsheet-from-excel-file-on-google-drive&#34;&gt;1. Creating Spreadsheet from Excel file on Google Drive&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var fileID = &amp;quot;#####&amp;quot;;
var folderID = &amp;quot;#####&amp;quot;;
var filename = &amp;quot;filename&amp;quot;;

var res = Drive.Files.insert({
  &amp;quot;mimeType&amp;quot;: &amp;quot;application/vnd.google-apps.spreadsheet&amp;quot;,
  &amp;quot;parents&amp;quot;: [{id: folderID}],
  &amp;quot;title&amp;quot;: filename
}, DriveApp.getFileById(fileID).getBlob());
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-creating-spreadsheet-from-excel-file-on-web-site&#34;&gt;2. Creating Spreadsheet from Excel file on Web Site&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var fileURL = &amp;quot;https://#####/sample.xlsx&amp;quot;;
var folderID = &amp;quot;#####&amp;quot;;
var filename = &amp;quot;filename&amp;quot;;

var res = Drive.Files.insert({
  &amp;quot;mimeType&amp;quot;: &amp;quot;application/vnd.google-apps.spreadsheet&amp;quot;,
  &amp;quot;parents&amp;quot;: [{id: folderID}],
  &amp;quot;title&amp;quot;: filename
}, UrlFetchApp.fetch(fileURL).getBlob());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example, when you want to retrieve created file ID, you can retrieve it by&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;res.id
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Creating Downloaded Excel file as Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/04/14/creating-downloaded-excel-file-as-spreadsheet</link>
      <pubDate>Fri, 14 Apr 2017 18:03:32 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/04/14/creating-downloaded-excel-file-as-spreadsheet</guid>
      <description>&lt;p&gt;This is a sample GAS script to create an Excel file, which was downloaded from web, as Spreadsheet. By using Drive API, it can be achieved without access token.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Script :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function downloadFile(fileURL, folder) {
  var filename = fileURL.match(&amp;quot;.+/(.+?)([\?#;].*)?$&amp;quot;)[1];
  var response = UrlFetchApp.fetch(fileURL);
  var rc = response.getResponseCode();
  var blob = response.getBlob();
  var resource = {
    &amp;quot;mimeType&amp;quot;: &amp;quot;application/vnd.google-apps.spreadsheet&amp;quot;,
    &amp;quot;parents&amp;quot;: [{id: folder}],
    &amp;quot;title&amp;quot;: filename
  };
  var res = Drive.Files.insert(resource, blob);
  var fileInfo = [rc, res.title, blob.getBytes().length, res.id];
  return fileInfo;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Result :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    200,
    sample.xlsx,
    10000.0,
    ## file id ##
]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>How to use &#34;fields&#34; of Drive APIs</title>
      <link>https://tanaikech.github.io/2017/03/30/how-to-use-fields-of-drive-apis</link>
      <pubDate>Thu, 30 Mar 2017 08:53:21 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/03/30/how-to-use-fields-of-drive-apis</guid>
      <description>

&lt;p&gt;There are a lot of APIs on Google. When we use Google Drive APIs, they usually have &amp;ldquo;fields&amp;rdquo; as a resource. The parameter &amp;ldquo;fields&amp;rdquo; gives various information which is selected to us. This is one of important parameters. And this can be used at Google Apps Script (GAS) although that version is v2. About how to use it, there are &lt;a href=&#34;https://developers.google.com/drive/v2/reference/&#34;&gt;some documents&lt;/a&gt;. But it is difficult to find how to use it at GAS. So I would like to write down here as a memorandum. Most parameters for APIs have to be expressed as JSON. However, the expressions are different for each API. I would like to introduce this using some samples. &lt;strong&gt;This is for GAS.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-drive-files-list&#34;&gt;1. Drive.Files.list&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;var params = {
    q:      &amp;quot;title=&#39;sample&#39; and trashed=false&amp;quot;,
    fields: &amp;quot;items(id, title, mimeType), kind&amp;quot;
};
var res = Drive.Files.list(params)
Logger.log(JSON.stringify(res))

{
  &amp;quot;kind&amp;quot;: &amp;quot;drive#fileList&amp;quot;,
  &amp;quot;items&amp;quot;: [
    {
      &amp;quot;id&amp;quot;: &amp;quot;FILE ID&amp;quot;,
      &amp;quot;mimeType&amp;quot;: &amp;quot;mimeType&amp;quot;,
      &amp;quot;title&amp;quot;: &amp;quot;FILE NAME&amp;quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;q&lt;/code&gt; is used at &amp;ldquo;Search for Files&amp;rdquo;. At this sample, it searches file name of &amp;ldquo;sample&amp;rdquo; outside trash box.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fields&lt;/code&gt; is expressed as above. &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt; and &amp;ldquo;mimeType&amp;rdquo; are file name, file id and mime type of the file, respectively. &lt;code&gt;kind&lt;/code&gt; is &amp;ldquo;This is always drive#fileList.&amp;rdquo; from document.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;References :

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/drive/v2/reference/files/list&#34;&gt;https://developers.google.com/drive/v2/reference/files/list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/drive/v2/web/search-parameters&#34;&gt;https://developers.google.com/drive/v2/web/search-parameters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-drive-files-get&#34;&gt;2. Drive.Files.get&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;var params = {
    fields: &amp;quot;id, title, mimeType&amp;quot;
};
var dat = Drive.Files.get(&amp;quot;FILE ID&amp;quot;, params);
Logger.log(JSON.stringify(dat))

{
  &amp;quot;id&amp;quot;: &amp;quot;FILE ID&amp;quot;,
  &amp;quot;mimeType&amp;quot;: &amp;quot;mimeType&amp;quot;,
  &amp;quot;title&amp;quot;: &amp;quot;FILE NAME&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example, &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;mimeType&lt;/code&gt; are file name, file id and mime type of the file, respectively.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reference :

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/drive/v2/reference/files/get&#34;&gt;https://developers.google.com/drive/v2/reference/files/get&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;3-drive-files-insert&#34;&gt;3. Drive.Files.insert&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;var data = {
    title:    &amp;quot;sample&amp;quot;,
    mimeType: &amp;quot;application/vnd.google-apps.spreadsheet&amp;quot;,
    parents:  [{&amp;quot;id&amp;quot;: &amp;quot;FOLDER ID&amp;quot;}]
};
var res = Drive.Files.insert(data);
Logger.log(&amp;quot;{id: %s, title: %s, mimeType: %s}&amp;quot;, res.id, res.title, res.mimeType)

{
  &amp;quot;id&amp;quot;: &amp;quot;FILE ID&amp;quot;,
  &amp;quot;title&amp;quot;: &amp;quot;sample&amp;quot;,
  &amp;quot;mimeType&amp;quot;: &amp;quot;application/vnd.google-apps.spreadsheet&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By this, a new spreadsheet is created under the FOLDER ID. In this case, &amp;ldquo;fields&amp;rdquo; is retrieved from the results of execution.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reference :

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/drive/v2/reference/files/insert&#34;&gt;https://developers.google.com/drive/v2/reference/files/insert&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Retrieve old revision file from Google Drive</title>
      <link>https://tanaikech.github.io/2017/03/29/retrieve-old-revision-file-from-google-drive</link>
      <pubDate>Wed, 29 Mar 2017 16:00:06 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/03/29/retrieve-old-revision-file-from-google-drive</guid>
      <description>

&lt;p&gt;I introduce 2 kinds of methods. One is to use &lt;code&gt;curl&lt;/code&gt;. Another is to use &lt;code&gt;wget&lt;/code&gt;. At this time, I could know that &lt;code&gt;wget&lt;/code&gt; can be also used as same as &lt;code&gt;curl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In order to use this, at first, please retrieve your access token and enable Drive API.&lt;/p&gt;

&lt;h3 id=&#34;1-file-id&#34;&gt;1. File ID&lt;/h3&gt;

&lt;p&gt;Retrieve file id from file name.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X GET -sSL \
    -H &#39;Authorization: Bearer ### Access token ###&#39; \
    &#39;https://www.googleapis.com/drive/v3/files?q=name=&amp;quot;### FileName ###&amp;quot;&amp;amp;fields=files(id,name)&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget -q --header=&#39;Authorization: Bearer ### Access token ###&#39; \
    &#39;https://www.googleapis.com/drive/v3/files?q=name=&amp;quot;### FileName ###&amp;quot;&amp;amp;fields=files(id,name)&#39; \
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reference : &lt;a href=&#34;https://developers.google.com/drive/v3/reference/files/list&#34;&gt;https://developers.google.com/drive/v3/reference/files/list&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-revision-id&#34;&gt;2. Revision ID&lt;/h3&gt;

&lt;p&gt;Retrieve revision id from file id.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X GET -sSL \
    -H &#39;Authorization: Bearer ### Access token ###&#39; \
    &#39;https://www.googleapis.com/drive/v3/files/### FileID ###/revisions?fields=revisions(id%2CmodifiedTime)&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget -q --header=&#39;Authorization: Bearer ### Access token ###&#39; \
    &#39;https://www.googleapis.com/drive/v3/files/### FileID ###/revisions?fields=revisions(id%2CmodifiedTime)&#39; \
    -O out.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reference : &lt;a href=&#34;https://developers.google.com/drive/v3/reference/revisions/list&#34;&gt;https://developers.google.com/drive/v3/reference/revisions/list&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-file-for-revision-id&#34;&gt;3. File for Revision ID&lt;/h3&gt;

&lt;p&gt;Retrieve a file from revision id.&lt;/p&gt;

&lt;h4 id=&#34;for-google-docs&#34;&gt;For Google Docs&lt;/h4&gt;

&lt;p&gt;This sample downloads spreadsheet using revision ID. For URL query, both &lt;code&gt;revisions=### RevisionID ###&lt;/code&gt; and &lt;code&gt;revision=### RevisionID ###&lt;/code&gt; can be used.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sSLG \
    -d &amp;quot;mimeType=application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&amp;quot; \
    -H &#39;Authorization: Bearer ### Access token ###&#39; \
    &amp;quot;https://www.googleapis.com/drive/v3/files/### FileID ###/export?revisions=### RevisionID ###&amp;quot; \
    -o outputfilename.xlsx
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget -q --header=&#39;Authorization: Bearer ### Access token ###&#39; \
    &amp;quot;https://www.googleapis.com/drive/v3/files/### FileID ###/export?revisions=### RevisionID ###&amp;amp;mimeType=application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&amp;quot; \
    -O outputfilename.xlsx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;This method hasn&amp;rsquo;t been shown in Google, as you say. Although I don&amp;rsquo;t know why, I investigated how to download revision files by trial and error. Finally, I could find it.&lt;/strong&gt; As a result, the method was very simple. But I spent to find this for a lot of time.&lt;/p&gt;

&lt;h4 id=&#34;except-for-google-docs&#34;&gt;Except for Google Docs&lt;/h4&gt;

&lt;p&gt;In the case of except for Google Docs, the revision ID is just file ID. So you can download not only using revision ID, but also as a normal file.&lt;/p&gt;

&lt;h5 id=&#34;pattern-1&#34;&gt;Pattern 1&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sSLG \
    -H &#39;Authorization: Bearer ### Access token ###&#39; \
    &amp;quot;https://www.googleapis.com/drive/v3/files/### FileID ###/revisions/### RevisionID ###?alt=media&amp;quot; \
    -o outputfilename
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;pattern-2&#34;&gt;Pattern 2&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sSLG \
    -H &#39;Authorization: Bearer ### Access token ###&#39; \
    &amp;quot;https://www.googleapis.com/drive/v3/files/### FileID ###?alt=media&amp;quot; \
    -o outputfilename
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reference : &lt;a href=&#34;https://developers.google.com/drive/v3/reference/revisions/get&#34;&gt;https://developers.google.com/drive/v3/reference/revisions/get&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>