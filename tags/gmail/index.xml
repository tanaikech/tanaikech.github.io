<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gmail on tanaike</title>
    <link>https://tanaikech.github.io/tags/gmail/</link>
    <description>Recent content in gmail on tanaike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Tue, 17 Dec 2019 11:40:27 +0900</lastBuildDate>
    
	<atom:link href="https://tanaikech.github.io/tags/gmail/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Updated: GAS Library - GmailToList</title>
      <link>https://tanaikech.github.io/2019/12/17/updated-gas-library-gmailtolist/</link>
      <pubDate>Tue, 17 Dec 2019 11:40:27 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/12/17/updated-gas-library-gmailtolist/</guid>
      <description>GmailToList was updated to v1.0.1.   v1.0.1 (December 17, 2019)
 New method of getAttachmentFiles() was added. The attachment files can be retrieved as blob using this method.    You can see the detail information here https://github.com/tanaikech/GmailToList</description>
    </item>
    
    <item>
      <title>GAS Library - GmailToList</title>
      <link>https://tanaikech.github.io/2019/12/16/gas-library-gmailtolist/</link>
      <pubDate>Mon, 16 Dec 2019 16:00:19 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/12/16/gas-library-gmailtolist/</guid>
      <description>Overview This is a library for exporting all messages of Gmail as a list using Google Apps Script (GAS).
Description Recently, I have had a situation it had been required to backup all messages in own Gmail. In order to achieve this, I created a simple script. After I created it, I thought that when such situation might occur for other users and the script is published as a library, they might be useful.</description>
    </item>
    
    <item>
      <title>Adding a Label to a Message using Message ID for Gmail</title>
      <link>https://tanaikech.github.io/2018/02/03/adding-a-label-to-a-message-using-message-id-for-gmail/</link>
      <pubDate>Sat, 03 Feb 2018 10:03:53 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/02/03/adding-a-label-to-a-message-using-message-id-for-gmail/</guid>
      <description>Gists
These are sample scripts for adding a label to a message using message ID for Gmail.
Sample 1 This sample adds a label to a thread using message ID. In this case, all messages in the thread have the label. Even if it adds a label to a message in the thread using addLabel(), all messages in the thread have the label, becauce addLabel can only be used for the thread.</description>
    </item>
    
    <item>
      <title>How to Retrieve Replied Emails for Gmail</title>
      <link>https://tanaikech.github.io/2018/02/01/how-to-retrieve-replied-emails-for-gmail/</link>
      <pubDate>Thu, 01 Feb 2018 10:46:08 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/02/01/how-to-retrieve-replied-emails-for-gmail/</guid>
      <description>Gists
Description : This sample script is for retrieving emails which replied for received mails. Because there are no samples which confirm whether the owner (me) replied to the received mails, I created this. The point is as follows.
 When there are more than 2 messages in a thread, there might be a possibility to have replied. For more than 2 messages in a thread  The email address of &amp;ldquo;from&amp;rdquo; for the 1st message is the sender&#39;s address.</description>
    </item>
    
    <item>
      <title>Send mails from Gmail using Nodemailer</title>
      <link>https://tanaikech.github.io/2018/01/08/send-mails-from-gmail-using-nodemailer/</link>
      <pubDate>Mon, 08 Jan 2018 10:35:07 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/01/08/send-mails-from-gmail-using-nodemailer/</guid>
      <description>Gists
This is a sample script for sending e-mails from gmail using Nodemailer. In order to use this, please retrieve the folloing parameters before run this script.
 gmail address client ID client Secret Refresh token  Please include https://mail.google.com/ in the scope.   Enable gmail API at API console. Install Nodemailer  const nodemailer = require(&amp;#39;nodemailer&amp;#39;);var auth = {type: &amp;#39;oauth2&amp;#39;,user: &amp;#39;### your gmail address ###&amp;#39;,clientId: &amp;#39;### client ID ###&amp;#39;,clientSecret: &amp;#39;### client secret ###&amp;#39;,refreshToken: &amp;#39;### refresh token ###&amp;#39;,};var mailOptions = {from: &amp;#39;#####&amp;#39;,to: &amp;#39;#####&amp;#39;,subject: &amp;#39;sample subject&amp;#39;,text: &amp;#39;sample text&amp;#39;,html: &amp;#39;&amp;lt;b&amp;gt;sample html&amp;lt;/b&amp;gt;&amp;#39;,};var transporter = nodemailer.</description>
    </item>
    
    <item>
      <title>Decoding Gmail Body with Japanese Language using Python</title>
      <link>https://tanaikech.github.io/2017/12/18/decoding-gmail-body-with-japanese-language-using-python/</link>
      <pubDate>Mon, 18 Dec 2017 08:22:16 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/12/18/decoding-gmail-body-with-japanese-language-using-python/</guid>
      <description>Gist
This is a sample script for decoding Gmail body with Japanese language using Python.
msg = service.users().messages().get(userId=&amp;#39;me&amp;#39;, id=id).execute()parts = msg[&amp;#39;payload&amp;#39;][&amp;#39;parts&amp;#39;]for e in parts:msg = base64.urlsafe_b64decode(e[&amp;#39;body&amp;#39;][&amp;#39;data&amp;#39;]).decode(&amp;#39;utf-8&amp;#39;).encode(&amp;#39;cp932&amp;#39;, &amp;#34;ignore&amp;#34;).decode(&amp;#39;cp932&amp;#39;)print(msg)</description>
    </item>
    
  </channel>
</rss>