<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sheets Api on tanaike</title>
    <link>https://tanaikech.github.io/tags/sheets-api/</link>
    <description>Recent content in Sheets Api on tanaike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Mon, 31 Jul 2017 14:38:28 +0900</lastBuildDate>
    
	<atom:link href="https://tanaikech.github.io/tags/sheets-api/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Converting a1Notation to GridRange for Google Sheets API</title>
      <link>https://tanaikech.github.io/2017/07/31/converting-a1notation-to-gridrange-for-google-sheets-api/</link>
      <pubDate>Mon, 31 Jul 2017 14:38:28 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/07/31/converting-a1notation-to-gridrange-for-google-sheets-api/</guid>
      <description>Gists
When it uses Google Sheets API v4, GridRange is used for it as the range property. This sample script is for converting from a1Notation to GridRange.
Script : function a1notation2gridrange(sheetid, a1notation){ var data = a1notation.match(/(^.+)!(.+):(.+$)/); var ss = SpreadsheetApp.openById(sheetid).getSheetByName(data[1]); var range = ss.getRange(data[2] + &amp;quot;:&amp;quot; + data[3]); var gridRange = { sheetId: ss.getSheetId(), startRowIndex: range.getRow() - 1, endRowIndex: range.getRow() - 1 + range.getNumRows(), startColumnIndex: range.getColumn() - 1, endColumnIndex: range.</description>
    </item>
    
  </channel>
</rss>