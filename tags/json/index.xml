<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Json on tanaike</title>
    <link>https://tanaikech.github.io/tags/json/</link>
    <description>Recent content in Json on tanaike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Sun, 25 Feb 2018 16:22:05 +0900</lastBuildDate>
    
	<atom:link href="https://tanaikech.github.io/tags/json/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Transposing JSON Object using Google Apps Script</title>
      <link>https://tanaikech.github.io/2018/02/25/transposing-json-object-using-google-apps-script/</link>
      <pubDate>Sun, 25 Feb 2018 16:22:05 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/02/25/transposing-json-object-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for transposing JSON object using Google Apps Script.
Input data : [ {&amp;quot;key1&amp;quot;:&amp;quot;a1&amp;quot;,&amp;quot;key2&amp;quot;:&amp;quot;a2&amp;quot;,&amp;quot;key3&amp;quot;:&amp;quot;a3&amp;quot;,&amp;quot;key4&amp;quot;:&amp;quot;a4&amp;quot;,&amp;quot;key5&amp;quot;:&amp;quot;a5&amp;quot;}, {&amp;quot;key1&amp;quot;:&amp;quot;b1&amp;quot;,&amp;quot;key2&amp;quot;:&amp;quot;b2&amp;quot;,&amp;quot;key3&amp;quot;:&amp;quot;b3&amp;quot;,&amp;quot;key4&amp;quot;:&amp;quot;b4&amp;quot;,&amp;quot;key5&amp;quot;:&amp;quot;b5&amp;quot;}, {&amp;quot;key1&amp;quot;:&amp;quot;c1&amp;quot;,&amp;quot;key2&amp;quot;:&amp;quot;c2&amp;quot;,&amp;quot;key3&amp;quot;:&amp;quot;c3&amp;quot;,&amp;quot;key4&amp;quot;:&amp;quot;c4&amp;quot;,&amp;quot;key5&amp;quot;:&amp;quot;c5&amp;quot;}, {&amp;quot;key1&amp;quot;:&amp;quot;d1&amp;quot;,&amp;quot;key2&amp;quot;:&amp;quot;d2&amp;quot;,&amp;quot;key3&amp;quot;:&amp;quot;d3&amp;quot;,&amp;quot;key4&amp;quot;:&amp;quot;d4&amp;quot;,&amp;quot;key5&amp;quot;:&amp;quot;d5&amp;quot;}, {&amp;quot;key1&amp;quot;:&amp;quot;e1&amp;quot;,&amp;quot;key2&amp;quot;:&amp;quot;e2&amp;quot;,&amp;quot;key3&amp;quot;:&amp;quot;e3&amp;quot;,&amp;quot;key4&amp;quot;:&amp;quot;e4&amp;quot;,&amp;quot;key5&amp;quot;:&amp;quot;e5&amp;quot;} ]  Output data : { &amp;quot;key1&amp;quot;: [&amp;quot;a1&amp;quot;, &amp;quot;b1&amp;quot;, &amp;quot;c1&amp;quot;, &amp;quot;d1&amp;quot;, &amp;quot;e1&amp;quot;], &amp;quot;key2&amp;quot;: [&amp;quot;a2&amp;quot;, &amp;quot;b2&amp;quot;, &amp;quot;c2&amp;quot;, &amp;quot;d2&amp;quot;, &amp;quot;e2&amp;quot;], &amp;quot;key3&amp;quot;: [&amp;quot;a3&amp;quot;, &amp;quot;b3&amp;quot;, &amp;quot;c3&amp;quot;, &amp;quot;d3&amp;quot;, &amp;quot;e3&amp;quot;], &amp;quot;key4&amp;quot;: [&amp;quot;a4&amp;quot;, &amp;quot;b4&amp;quot;, &amp;quot;c4&amp;quot;, &amp;quot;d4&amp;quot;, &amp;quot;e4&amp;quot;], &amp;quot;key5&amp;quot;: [&amp;quot;a5&amp;quot;, &amp;quot;b5&amp;quot;, &amp;quot;c5&amp;quot;, &amp;quot;d5&amp;quot;, &amp;quot;e5&amp;quot;] }  Script : At first, keys have to be defined by yourself, because the order of json is not decided.</description>
    </item>
    
    <item>
      <title>Copying Values from JSON to Struct using reflect Package</title>
      <link>https://tanaikech.github.io/2018/02/06/copying-values-from-json-to-struct-using-reflect-package/</link>
      <pubDate>Tue, 06 Feb 2018 10:22:55 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/02/06/copying-values-from-json-to-struct-using-reflect-package/</guid>
      <description>Gists
This is a sample script for copying values from JSON to a struct using reflect package.
Script : package main import ( &amp;quot;encoding/json&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;reflect&amp;quot; ) type obj struct { Key1 string `json:&amp;quot;k1&amp;quot;` Key2 string `json:&amp;quot;k2&amp;quot;` Key3 int64 `json:&amp;quot;k3&amp;quot;` Key4 int `json:&amp;quot;k4&amp;quot;` Key5 bool `json:&amp;quot;k5&amp;quot;` } func main() { data := `{&amp;quot;k1&amp;quot;: &amp;quot;v1&amp;quot;, &amp;quot;k2&amp;quot;: &amp;quot;v2&amp;quot;, &amp;quot;k3&amp;quot;: 1234567890, &amp;quot;k4&amp;quot;: 456, &amp;quot;k5&amp;quot;: true}` d := map[string]interface{}{} json.Unmarshal([]byte(data), &amp;amp;d) obj := &amp;amp;obj{} s := reflect.</description>
    </item>
    
    <item>
      <title>Parsing JSON object (keys are number and changing every time)</title>
      <link>https://tanaikech.github.io/2018/02/05/parsing-json-object-keys-are-number-and-changing-every-time/</link>
      <pubDate>Mon, 05 Feb 2018 13:25:03 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/02/05/parsing-json-object-keys-are-number-and-changing-every-time/</guid>
      <description>Gists
This sample script is for parsing JSON object. In the object, the keys are number and changing every time.
Object : { &amp;quot;key1&amp;quot;: { &amp;quot;key2&amp;quot;: [ {&amp;quot;0&amp;quot;: [{&amp;quot;key3&amp;quot;: &amp;quot;value3a&amp;quot;}, {&amp;quot;key3&amp;quot;: &amp;quot;value3b&amp;quot;}]}, {&amp;quot;1&amp;quot;: [{&amp;quot;key3&amp;quot;: &amp;quot;value3c&amp;quot;}, {&amp;quot;key3&amp;quot;: &amp;quot;value3d&amp;quot;}]} ] } }  Script : package main import ( &amp;quot;encoding/json&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;strconv&amp;quot; ) type key1 struct { Key1 key2 `json:&amp;quot;key1&amp;quot;` } type key2 struct { Key2 []interface{} `json:&amp;quot;key2&amp;quot;` } func main() { data := `{&amp;quot;key1&amp;quot;: {&amp;quot;key2&amp;quot;: [{&amp;quot;0&amp;quot;: [{&amp;quot;key3&amp;quot;: &amp;quot;value3a&amp;quot;}, {&amp;quot;key3&amp;quot;: &amp;quot;value3b&amp;quot;}]},{&amp;quot;1&amp;quot;: [{&amp;quot;key3&amp;quot;: &amp;quot;value3c&amp;quot;}, {&amp;quot;key3&amp;quot;: &amp;quot;value3d&amp;quot;}]}]}}` k1 := &amp;amp;key1{} json.</description>
    </item>
    
  </channel>
</rss>