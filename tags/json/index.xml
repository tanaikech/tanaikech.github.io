<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JSON on tanaike</title>
    <link>https://tanaikech.github.io/tags/json/</link>
    <description>Recent content in JSON on tanaike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Sun, 25 Feb 2018 16:22:05 +0900</lastBuildDate><atom:link href="https://tanaikech.github.io/tags/json/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Transposing JSON Object using Google Apps Script</title>
      <link>https://tanaikech.github.io/2018/02/25/transposing-json-object-using-google-apps-script/</link>
      <pubDate>Sun, 25 Feb 2018 16:22:05 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/02/25/transposing-json-object-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for transposing JSON object using Google Apps Script.
Input data : [  {&amp;#34;key1&amp;#34;:&amp;#34;a1&amp;#34;,&amp;#34;key2&amp;#34;:&amp;#34;a2&amp;#34;,&amp;#34;key3&amp;#34;:&amp;#34;a3&amp;#34;,&amp;#34;key4&amp;#34;:&amp;#34;a4&amp;#34;,&amp;#34;key5&amp;#34;:&amp;#34;a5&amp;#34;},  {&amp;#34;key1&amp;#34;:&amp;#34;b1&amp;#34;,&amp;#34;key2&amp;#34;:&amp;#34;b2&amp;#34;,&amp;#34;key3&amp;#34;:&amp;#34;b3&amp;#34;,&amp;#34;key4&amp;#34;:&amp;#34;b4&amp;#34;,&amp;#34;key5&amp;#34;:&amp;#34;b5&amp;#34;},  {&amp;#34;key1&amp;#34;:&amp;#34;c1&amp;#34;,&amp;#34;key2&amp;#34;:&amp;#34;c2&amp;#34;,&amp;#34;key3&amp;#34;:&amp;#34;c3&amp;#34;,&amp;#34;key4&amp;#34;:&amp;#34;c4&amp;#34;,&amp;#34;key5&amp;#34;:&amp;#34;c5&amp;#34;},  {&amp;#34;key1&amp;#34;:&amp;#34;d1&amp;#34;,&amp;#34;key2&amp;#34;:&amp;#34;d2&amp;#34;,&amp;#34;key3&amp;#34;:&amp;#34;d3&amp;#34;,&amp;#34;key4&amp;#34;:&amp;#34;d4&amp;#34;,&amp;#34;key5&amp;#34;:&amp;#34;d5&amp;#34;},  {&amp;#34;key1&amp;#34;:&amp;#34;e1&amp;#34;,&amp;#34;key2&amp;#34;:&amp;#34;e2&amp;#34;,&amp;#34;key3&amp;#34;:&amp;#34;e3&amp;#34;,&amp;#34;key4&amp;#34;:&amp;#34;e4&amp;#34;,&amp;#34;key5&amp;#34;:&amp;#34;e5&amp;#34;} ] Output data : {  &amp;#34;key1&amp;#34;: [&amp;#34;a1&amp;#34;, &amp;#34;b1&amp;#34;, &amp;#34;c1&amp;#34;, &amp;#34;d1&amp;#34;, &amp;#34;e1&amp;#34;],  &amp;#34;key2&amp;#34;: [&amp;#34;a2&amp;#34;, &amp;#34;b2&amp;#34;, &amp;#34;c2&amp;#34;, &amp;#34;d2&amp;#34;, &amp;#34;e2&amp;#34;],  &amp;#34;key3&amp;#34;: [&amp;#34;a3&amp;#34;, &amp;#34;b3&amp;#34;, &amp;#34;c3&amp;#34;, &amp;#34;d3&amp;#34;, &amp;#34;e3&amp;#34;],  &amp;#34;key4&amp;#34;: [&amp;#34;a4&amp;#34;, &amp;#34;b4&amp;#34;, &amp;#34;c4&amp;#34;, &amp;#34;d4&amp;#34;, &amp;#34;e4&amp;#34;],  &amp;#34;key5&amp;#34;: [&amp;#34;a5&amp;#34;, &amp;#34;b5&amp;#34;, &amp;#34;c5&amp;#34;, &amp;#34;d5&amp;#34;, &amp;#34;e5&amp;#34;] } Script : At first, keys have to be defined by yourself, because the order of json is not decided.</description>
    </item>
    
    <item>
      <title>Copying Values from JSON to Struct using reflect Package</title>
      <link>https://tanaikech.github.io/2018/02/06/copying-values-from-json-to-struct-using-reflect-package/</link>
      <pubDate>Tue, 06 Feb 2018 10:22:55 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/02/06/copying-values-from-json-to-struct-using-reflect-package/</guid>
      <description>Gists
This is a sample script for copying values from JSON to a struct using reflect package.
Script : package mainimport (&amp;#34;encoding/json&amp;#34;&amp;#34;fmt&amp;#34;&amp;#34;reflect&amp;#34;)type obj struct {Key1 string `json:&amp;#34;k1&amp;#34;`Key2 string `json:&amp;#34;k2&amp;#34;`Key3 int64 `json:&amp;#34;k3&amp;#34;`Key4 int `json:&amp;#34;k4&amp;#34;`Key5 bool `json:&amp;#34;k5&amp;#34;`}func main() {data := `{&amp;#34;k1&amp;#34;: &amp;#34;v1&amp;#34;, &amp;#34;k2&amp;#34;: &amp;#34;v2&amp;#34;, &amp;#34;k3&amp;#34;: 1234567890, &amp;#34;k4&amp;#34;: 456, &amp;#34;k5&amp;#34;: true}`d := map[string]interface{}{}json.Unmarshal([]byte(data), &amp;amp;d)obj := &amp;amp;obj{}s := reflect.</description>
    </item>
    
    <item>
      <title>Parsing JSON object (keys are number and changing every time)</title>
      <link>https://tanaikech.github.io/2018/02/05/parsing-json-object-keys-are-number-and-changing-every-time/</link>
      <pubDate>Mon, 05 Feb 2018 13:25:03 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/02/05/parsing-json-object-keys-are-number-and-changing-every-time/</guid>
      <description>Gists
This sample script is for parsing JSON object. In the object, the keys are number and changing every time.
Object: {  &amp;#34;key1&amp;#34;: {  &amp;#34;key2&amp;#34;: [  {&amp;#34;0&amp;#34;: [{&amp;#34;key3&amp;#34;: &amp;#34;value3a&amp;#34;}, {&amp;#34;key3&amp;#34;: &amp;#34;value3b&amp;#34;}]},  {&amp;#34;1&amp;#34;: [{&amp;#34;key3&amp;#34;: &amp;#34;value3c&amp;#34;}, {&amp;#34;key3&amp;#34;: &amp;#34;value3d&amp;#34;}]}  ]  } } Script: package main  import (  &amp;#34;encoding/json&amp;#34;  &amp;#34;fmt&amp;#34;  &amp;#34;strconv&amp;#34; )  type key1 struct {  Key1 key2 `json:&amp;#34;key1&amp;#34;` }  type key2 struct {  Key2 []interface{} `json:&amp;#34;key2&amp;#34;` }  func main() {  data := `{&amp;#34;key1&amp;#34;: {&amp;#34;key2&amp;#34;: [{&amp;#34;0&amp;#34;: [{&amp;#34;key3&amp;#34;: &amp;#34;value3a&amp;#34;}, {&amp;#34;key3&amp;#34;: &amp;#34;value3b&amp;#34;}]},{&amp;#34;1&amp;#34;: [{&amp;#34;key3&amp;#34;: &amp;#34;value3c&amp;#34;}, {&amp;#34;key3&amp;#34;: &amp;#34;value3d&amp;#34;}]}]}}`  k1 := &amp;amp;key1{}  json.</description>
    </item>
    
  </channel>
</rss>
