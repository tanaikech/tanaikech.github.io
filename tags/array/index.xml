<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>array on tanaike</title>
    <link>https://tanaikech.github.io/tags/array/</link>
    <description>Recent content in array on tanaike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Mon, 20 Apr 2020 14:11:59 +0900</lastBuildDate>
    
	<atom:link href="https://tanaikech.github.io/tags/array/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Limitation of Array.prototype.push.apply under V8 for Google Apps Script</title>
      <link>https://tanaikech.github.io/2020/04/20/limitation-of-array.prototype.push.apply-under-v8-for-google-apps-script/</link>
      <pubDate>Mon, 20 Apr 2020 14:11:59 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2020/04/20/limitation-of-array.prototype.push.apply-under-v8-for-google-apps-script/</guid>
      <description>Gists
Description When V8 is enabled, Array.apply has the limitation for the number of elements. When it is over the limitation, an error like RangeError: Maximum call stack size exceeded occurs, while the issue didn&#39;t occur when V8 is disabled. In this case, this issue occurs at both Google Apps Script and Javascript. So please be careful this.
Sample situation For example, when Array.prototype.push.apply is used for combining the arrays because the process cost of Array.</description>
    </item>
    
    <item>
      <title>Retrieving Values with and without Duplicating from JSON Object using Google Apps Script</title>
      <link>https://tanaikech.github.io/2019/05/30/retrieving-values-with-and-without-duplicating-from-json-object-using-google-apps-script/</link>
      <pubDate>Thu, 30 May 2019 14:14:13 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/05/30/retrieving-values-with-and-without-duplicating-from-json-object-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for retrieving the values with and without duplicating from JSON object using Google Apps Script. Also this can be used by Javascript.
Sample script var obj = [{ key1: &amp;#34;value1a&amp;#34;, key2: &amp;#34;value1b&amp;#34; },{ key1: &amp;#34;value2a&amp;#34;, key2: &amp;#34;value2b&amp;#34; },{ key1: &amp;#34;value5a&amp;#34;, key2: &amp;#34;value5b&amp;#34; },{ key1: &amp;#34;value3a&amp;#34;, key2: &amp;#34;value3b&amp;#34; },{ key1: &amp;#34;value1a&amp;#34;, key2: &amp;#34;value1b&amp;#34; },{ key1: &amp;#34;value4a&amp;#34;, key2: &amp;#34;value4b&amp;#34; },{ key1: &amp;#34;value5a&amp;#34;, key2: &amp;#34;value5b&amp;#34; },{ key1: &amp;#34;value3a&amp;#34;, key2: &amp;#34;value3b&amp;#34; }];var res = obj.</description>
    </item>
    
    <item>
      <title>Processing Duplicated Rows of 2 Dimensional Arrays using Google Apps Script</title>
      <link>https://tanaikech.github.io/2019/05/17/processing-duplicated-rows-of-2-dimensional-arrays-using-google-apps-script/</link>
      <pubDate>Fri, 17 May 2019 13:21:25 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/05/17/processing-duplicated-rows-of-2-dimensional-arrays-using-google-apps-script/</guid>
      <description>Gists
Overview These are sample scripts for processing the duplicated rows of 2 dimensional arrays using Google Apps Script.
Description When I use Google Spreadsheet and/or see Stackoverflow, I sometimes see the situation which is required to process the duplicated rows of 2 dimensional arrays. I thought that when the sample scripts for it have already prepared, they will be useful for other users including me. So I published this post.</description>
    </item>
    
    <item>
      <title>Split Array by n Elements using Google Apps Script</title>
      <link>https://tanaikech.github.io/2019/04/30/split-array-by-n-elements-using-google-apps-script/</link>
      <pubDate>Tue, 30 Apr 2019 13:54:32 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/04/30/split-array-by-n-elements-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for splitting an array by n elements using Google Apps Script.
Sample script 1: var limit = 3;var ar = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];var res = [];while (ar.length &amp;gt; 0) res.push(ar.splice(0, limit));Logger.log(res); // [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0], [10.0]]Above sample script is a simple. But at Google Apps Script, the process cost of &amp;ldquo;while&amp;rdquo; is higher than the for loop as shown in this report.</description>
    </item>
    
    <item>
      <title>Retrieve Difference Between 2 Dimensional Arrays using Google Apps Script</title>
      <link>https://tanaikech.github.io/2018/05/07/retrieve-difference-between-2-dimensional-arrays-using-google-apps-script/</link>
      <pubDate>Mon, 07 May 2018 09:41:09 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/05/07/retrieve-difference-between-2-dimensional-arrays-using-google-apps-script/</guid>
      <description>Gists
This sample script retrieves the difference elements between 2 dimensional arrays using Google Apps Script. In Google Apps Script, 2 dimensional arrays are often used at Google Docs and Google APIs. And from my recent report, it has already found that the process cost of filter() is the lowest in the other loop methods. So I use the script like this.
var ar1 = [[&amp;#34;a1&amp;#34;, &amp;#34;b1&amp;#34;, &amp;#34;c1&amp;#34;], [&amp;#34;a2&amp;#34;, &amp;#34;b2&amp;#34;, &amp;#34;c2&amp;#34;], [&amp;#34;a3&amp;#34;, &amp;#34;b3&amp;#34;, &amp;#34;c3&amp;#34;], [&amp;#34;a4&amp;#34;, &amp;#34;b4&amp;#34;, &amp;#34;c4&amp;#34;], [&amp;#34;a5&amp;#34;, &amp;#34;b5&amp;#34;, &amp;#34;c5&amp;#34;]];var ar2 = [[&amp;#34;a2&amp;#34;, &amp;#34;b2&amp;#34;, &amp;#34;c2&amp;#34;], [&amp;#34;a5&amp;#34;, &amp;#34;b5&amp;#34;, &amp;#34;c5&amp;#34;], [&amp;#34;a1&amp;#34;, &amp;#34;b2&amp;#34;, &amp;#34;c3&amp;#34;]];var res = ar1.</description>
    </item>
    
  </channel>
</rss>