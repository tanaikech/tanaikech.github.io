<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Array on tanaike</title>
    <link>https://tanaikech.github.io/tags/array/</link>
    <description>Recent content in Array on tanaike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Fri, 17 May 2019 13:21:25 +0900</lastBuildDate>
    
	<atom:link href="https://tanaikech.github.io/tags/array/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Processing Duplicated Rows of 2 Dimensional Arrays using Google Apps Script</title>
      <link>https://tanaikech.github.io/2019/05/17/processing-duplicated-rows-of-2-dimensional-arrays-using-google-apps-script/</link>
      <pubDate>Fri, 17 May 2019 13:21:25 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/05/17/processing-duplicated-rows-of-2-dimensional-arrays-using-google-apps-script/</guid>
      <description>Gists
Overview These are sample scripts for processing the duplicated rows of 2 dimensional arrays using Google Apps Script.
Description When I use Google Spreadsheet and/or see Stackoverflow, I sometimes see the situation which is required to process the duplicated rows of 2 dimensional arrays. I thought that when the sample scripts for it have already prepared, they will be useful for other users including me. So I published this post.</description>
    </item>
    
    <item>
      <title>Split Array by n Elements using Google Apps Script</title>
      <link>https://tanaikech.github.io/2019/04/30/split-array-by-n-elements-using-google-apps-script/</link>
      <pubDate>Tue, 30 Apr 2019 13:54:32 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/04/30/split-array-by-n-elements-using-google-apps-script/</guid>
      <description>Gists
This is a sample script for splitting an array by n elements using Google Apps Script.
Sample script 1: var limit = 3; var ar = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; var res = []; while (ar.length &amp;gt; 0) res.push(ar.splice(0, limit)); Logger.log(res); // [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0], [10.0]]  Above sample script is a simple. But at Google Apps Script, the process cost of &amp;ldquo;while&amp;rdquo; is higher than the for loop as shown in this report.</description>
    </item>
    
    <item>
      <title>Retrieve Difference Between 2 Dimensional Arrays using Google Apps Script</title>
      <link>https://tanaikech.github.io/2018/05/07/retrieve-difference-between-2-dimensional-arrays-using-google-apps-script/</link>
      <pubDate>Mon, 07 May 2018 09:41:09 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/05/07/retrieve-difference-between-2-dimensional-arrays-using-google-apps-script/</guid>
      <description>Gists
This sample script retrieves the difference elements between 2 dimensional arrays using Google Apps Script. In Google Apps Script, 2 dimensional arrays are often used at Google Docs and Google APIs. And from my recent report, it has already found that the process cost of filter() is the lowest in the other loop methods. So I use the script like this.
var ar1 = [[&amp;quot;a1&amp;quot;, &amp;quot;b1&amp;quot;, &amp;quot;c1&amp;quot;], [&amp;quot;a2&amp;quot;, &amp;quot;b2&amp;quot;, &amp;quot;c2&amp;quot;], [&amp;quot;a3&amp;quot;, &amp;quot;b3&amp;quot;, &amp;quot;c3&amp;quot;], [&amp;quot;a4&amp;quot;, &amp;quot;b4&amp;quot;, &amp;quot;c4&amp;quot;], [&amp;quot;a5&amp;quot;, &amp;quot;b5&amp;quot;, &amp;quot;c5&amp;quot;]]; var ar2 = [[&amp;quot;a2&amp;quot;, &amp;quot;b2&amp;quot;, &amp;quot;c2&amp;quot;], [&amp;quot;a5&amp;quot;, &amp;quot;b5&amp;quot;, &amp;quot;c5&amp;quot;], [&amp;quot;a1&amp;quot;, &amp;quot;b2&amp;quot;, &amp;quot;c3&amp;quot;]]; var res = ar1.</description>
    </item>
    
  </channel>
</rss>