<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on tanaike</title>
    <link>https://tanaikech.github.io/tags/javascript/</link>
    <description>Recent content in Javascript on tanaike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Thu, 12 Sep 2019 14:44:58 +0900</lastBuildDate>
    
	<atom:link href="https://tanaikech.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Javascript library - GetFileList_js</title>
      <link>https://tanaikech.github.io/2019/09/12/javascript-library---getfilelist_js/</link>
      <pubDate>Thu, 12 Sep 2019 14:44:58 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2019/09/12/javascript-library---getfilelist_js/</guid>
      <description>Overview This is a Javascript library to retrieve the file list with the folder tree from the specific folder (publicly shared folders and own folders) of Google Drive.
Description The library for retrieving the file list with the folder tree from the specific folder of Google Drive has already been published for Google Apps Script, golang, node.js and python as GetFileList. Ref Here, this GetFileList was released as the library of Javascript.</description>
    </item>
    
    <item>
      <title>Upload Files to Google Drive using Javascript</title>
      <link>https://tanaikech.github.io/2018/08/13/upload-files-to-google-drive-using-javascript/</link>
      <pubDate>Mon, 13 Aug 2018 10:16:54 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/08/13/upload-files-to-google-drive-using-javascript/</guid>
      <description>Gists
This is a sample script for uploading files to Google Drive using Javascript. The files are uploaded by Drive API v3. gapi.client.drive.files.create() can create an empty file on Google Drive. But it cannot directly upload files including contents. I think that this might not be able to upload files and metadata with the multipart/related, although this might be resolved by the future update. So now, as one of workarounds, I use using XMLHttpRequest.</description>
    </item>
    
    <item>
      <title>Adding Query Parameters to URL using Google Apps Script</title>
      <link>https://tanaikech.github.io/2018/07/12/adding-query-parameters-to-url-using-google-apps-script/</link>
      <pubDate>Thu, 12 Jul 2018 08:53:56 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/07/12/adding-query-parameters-to-url-using-google-apps-script/</guid>
      <description>Gists
This is for adding the query parameters to the URL. This sample script is prepared by ES5. So this can be also used for Javascript. When I created an endpoint with some query parameters, I had used the scripts of various patterns every time. Today, I prepared this sample script to unify them. If this is also useful for you, I&amp;rsquo;m glad.
Sample script : String.prototype.addQuery = function(obj) { return this + Object.</description>
    </item>
    
    <item>
      <title>Retrieving a Key with Maximum Value from Object</title>
      <link>https://tanaikech.github.io/2018/06/15/retrieving-a-key-with-maximum-value-from-object/</link>
      <pubDate>Fri, 15 Jun 2018 08:22:28 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/06/15/retrieving-a-key-with-maximum-value-from-object/</guid>
      <description>Gists
This sample script is for retrieving a key with the maximum value from an object. This can be also used by Google Apps Script.
var obj = {&amp;quot;a&amp;quot;: 5, &amp;quot;b&amp;quot;: 4, &amp;quot;c&amp;quot;: 3, &amp;quot;d&amp;quot;: 2, &amp;quot;e&amp;quot;: 1}; var res = Object.keys(obj).reduce(function(a, c) { return obj[a] &amp;gt; obj[c] ? a : c; }); Logger.log(res); // &amp;gt;&amp;gt;&amp;gt; a  </description>
    </item>
    
    <item>
      <title>google.script.run and jQuery.Deferred</title>
      <link>https://tanaikech.github.io/2018/01/26/google.script.run-and-jquery.deferred/</link>
      <pubDate>Fri, 26 Jan 2018 09:55:43 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2018/01/26/google.script.run-and-jquery.deferred/</guid>
      <description>google.script.run doesn&amp;rsquo;t return values. So I tried this using jQuery.Deferred.
GAS : Code.gs function doGet() { return HtmlService.createHtmlOutputFromFile(&#39;index&#39;) .setSandboxMode(HtmlService.SandboxMode.IFRAME); } function getValues(e) { return e + &amp;quot;hoge&amp;quot;; }  HTML : index.html &amp;lt;script src=&amp;quot;https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;body&amp;gt; &amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;button&amp;quot; value=&amp;quot;ok&amp;quot;&amp;gt; &amp;lt;div id=&amp;quot;result&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; $(() =&amp;gt; { $(&amp;quot;#button&amp;quot;).click(() =&amp;gt; { var str = &amp;quot;fuga&amp;quot;; googleScriptRun(str).then((res) =&amp;gt; { $(&#39;#result&#39;).text(res); }); }); }); function googleScriptRun(str) { var d = new $.Deferred(); google.script.run.withSuccessHandler((res) =&amp;gt; {d.</description>
    </item>
    
    <item>
      <title>Mixing 2 Array Objects Included Dictionary Object by Javascript</title>
      <link>https://tanaikech.github.io/2017/12/03/mixing-2-array-objects-included-dictionary-object-by-javascript/</link>
      <pubDate>Sun, 03 Dec 2017 15:45:34 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/12/03/mixing-2-array-objects-included-dictionary-object-by-javascript/</guid>
      <description>Gists
This is a sample script for combining and mixing 2 objects. Each object is an array which included a dictionary type. When the key of the dictionary object is the same, the values are mixed.
This can be also used for Google Apps Script.
Input var obj1 = [ {&amp;quot;key1&amp;quot;: [&amp;quot;value1a1&amp;quot;, &amp;quot;value1a2&amp;quot;]}, {&amp;quot;key1&amp;quot;: [&amp;quot;value1aa1&amp;quot;, &amp;quot;value1aa2&amp;quot;]}, {&amp;quot;key2&amp;quot;: [&amp;quot;value2a1&amp;quot;, &amp;quot;value2a2&amp;quot;]}, {&amp;quot;key3&amp;quot;: [&amp;quot;value3a1&amp;quot;, &amp;quot;value3a2&amp;quot;]}, ]; var obj2 = [ {&amp;quot;key1&amp;quot;: [&amp;quot;value1b1&amp;quot;, &amp;quot;value1b2&amp;quot;]}, {&amp;quot;key3&amp;quot;: [&amp;quot;value3b1&amp;quot;, &amp;quot;value3b2&amp;quot;]}, {&amp;quot;key3&amp;quot;: [&amp;quot;value3bb1&amp;quot;, &amp;quot;value3bb2&amp;quot;]}, {&amp;quot;key4&amp;quot;: [&amp;quot;value4b1&amp;quot;, &amp;quot;value4b2&amp;quot;]}, ];  Output [ {&amp;quot;key1&amp;quot;: [&amp;quot;value1a1&amp;quot;, &amp;quot;value1a2&amp;quot;, &amp;quot;value1b1&amp;quot;, &amp;quot;value1b2&amp;quot;, &amp;quot;value1aa1&amp;quot;, &amp;quot;value1aa2&amp;quot;]}, {&amp;quot;key2&amp;quot;: [&amp;quot;value2a1&amp;quot;, &amp;quot;value2a2&amp;quot;]}, {&amp;quot;key3&amp;quot;: [&amp;quot;value3a1&amp;quot;, &amp;quot;value3a2&amp;quot;, &amp;quot;value3b1&amp;quot;, &amp;quot;value3b2&amp;quot;, &amp;quot;value3bb1&amp;quot;, &amp;quot;value3bb2&amp;quot;]}, {&amp;quot;key4&amp;quot;: [&amp;quot;value4b1&amp;quot;, &amp;quot;value4b2&amp;quot;]} ]  Sample script : Javascript : function mixture(obj1, obj2) { Array.</description>
    </item>
    
    <item>
      <title>Adding Object to Object by Javascript</title>
      <link>https://tanaikech.github.io/2017/12/01/adding-object-to-object-by-javascript/</link>
      <pubDate>Fri, 01 Dec 2017 12:12:45 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/12/01/adding-object-to-object-by-javascript/</guid>
      <description> Gists
This sample script is for adding object to object by javascript.
Script : var obj = { key1: &amp;quot;value1&amp;quot;, key2: &amp;quot;value2&amp;quot;, key3: &amp;quot;value3&amp;quot; }; var obj1 = { key4: &amp;quot;value4&amp;quot;, key5: &amp;quot;value5&amp;quot;, key6: &amp;quot;value6&amp;quot; }; Object.assign(obj, obj1); console.log(obj);  Result : { key1: &#39;value1&#39;, key2: &#39;value2&#39;, key3: &#39;value3&#39;, key4: &#39;value4&#39;, key5: &#39;value5&#39;, key6: &#39;value6&#39; }  jsfiddle demo
Reference :  Object.assign()  </description>
    </item>
    
    <item>
      <title>Straightening Elements in 2 Dimensional Array using Google Apps Script</title>
      <link>https://tanaikech.github.io/2017/10/26/straightening-elements-in-2-dimensional-array-using-google-apps-script/</link>
      <pubDate>Thu, 26 Oct 2017 16:51:30 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/10/26/straightening-elements-in-2-dimensional-array-using-google-apps-script/</guid>
      <description>Gists
This sample script is for straightening elements in 2 dimensional array using Google Apps Script (GAS). When applications using Spreadsheet are developed by GAS, it usually uses 2 dimensional array by setValues(). And the lengths of each element are required to be the same. On the other hand, data used for the applications might not be the same length for each element in 2 dimensional array. This sample script can be used under such situation.</description>
    </item>
    
    <item>
      <title>Changing Values by Checking Duplicated Values of JSON for Javascript</title>
      <link>https://tanaikech.github.io/2017/08/21/changing-values-by-checking-duplicated-values-of-json-for-javascript/</link>
      <pubDate>Mon, 21 Aug 2017 08:30:37 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/08/21/changing-values-by-checking-duplicated-values-of-json-for-javascript/</guid>
      <description>Gists
This sample script is for changing values by checking duplicated values of JSON for Javascript.
Please see the following script. There is an array with a JSON data with 3 keys and 3 values. It is found that the values for each element duplicate. These duplicated values are changing by adding numbers.
I use this for managing filenames. This script also can be used for Google Apps Script. If this was useful for you, I&amp;rsquo;m glad.</description>
    </item>
    
    <item>
      <title>Retrieving Array Coordinates of Duplicated Elements</title>
      <link>https://tanaikech.github.io/2017/07/19/retrieving-array-coordinates-of-duplicated-elements/</link>
      <pubDate>Wed, 19 Jul 2017 10:38:26 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/07/19/retrieving-array-coordinates-of-duplicated-elements/</guid>
      <description> This sample is for retrieving array coordinates of duplicated elements.
Script : var inputdata = [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;f&amp;quot;, &amp;quot;g&amp;quot;]; var dic = {}; var result = []; inputdata.forEach(function(e, i){ if (dic[e]) { result[i] = &#39;Duplicated&#39;; } else { result[i] = null; } dic[e] = &amp;quot;temp&amp;quot;; }); Logger.log(JSON.stringify(result)) Logger.log([i for (i in result) if(result[i]==&#39;Duplicated&#39;)])  Result : [null,null,&amp;quot;Duplicated&amp;quot;,null,null,&amp;quot;Duplicated&amp;quot;,null,&amp;quot;Duplicated&amp;quot;,null,null] [2, 5, 7]  </description>
    </item>
    
    <item>
      <title>Removes Duplicate JSON Elements for a Value of a Certain Key</title>
      <link>https://tanaikech.github.io/2017/04/09/removes-duplicate-json-elements-for-a-value-of-a-certain-key/</link>
      <pubDate>Sun, 09 Apr 2017 14:24:58 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/04/09/removes-duplicate-json-elements-for-a-value-of-a-certain-key/</guid>
      <description>This sample removes duplicate JSON elements for a value of a certain key. When the value of the certain key is removed, only a first duplicate element is left. Also I had wanted to be used for Google Apps Script. So it became like this.
Script :
function removeDup(arr, key){ var temp = []; var out = []; arr.forEach( function (e, i) { temp[i] = (temp.indexOf(e[key]) === -1) ? e[key] : false; if (temp[i]) out.</description>
    </item>
    
    <item>
      <title>Transposing Array From (n x m) To (m x n) for javascript</title>
      <link>https://tanaikech.github.io/2017/03/21/transposing-array-from-n-x-m-to-m-x-n-for-javascript/</link>
      <pubDate>Tue, 21 Mar 2017 08:55:34 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/03/21/transposing-array-from-n-x-m-to-m-x-n-for-javascript/</guid>
      <description>This script transposes from an array with n rows x m columns to the array with m rows x n columns. In this script, you can use array of n != m.
array = [ [a1, b1, c1, d1, e1], [a2, b2, c2, d2, e2], [a3, b3, c3, d3, e3], [a4, b4, c4, d4, e4], [a5, b5, c5, d5, e5], [a6, b6, c6, d6, e6], [a7, b7, c7, d7, e7], [a8, b8, c8, d8, e8], [a9, b9, c9, d9, e9], [a10, b10, c10, d10, e10] ]  var result = []; for (i in array[0]){ result.</description>
    </item>
    
    <item>
      <title>Sample Array Script for Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/02/08/sample-array-script-for-spreadsheet/</link>
      <pubDate>Wed, 08 Feb 2017 08:50:38 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/08/sample-array-script-for-spreadsheet/</guid>
      <description>This is a Sample Array Script for Spreadsheet. It makes an 2D array filled by strings and number. The strings and number are column strings and row number, respectively.
However, because this is a sample, the maximum column number is 26.
function sa(row, col){ if (col &amp;gt; 26) return; var ar = new Array(row); for(var i = 0; i &amp;lt; row; i++) ar[i] = new Array(col); for (var i = 0; i &amp;lt; row; i++){ for (var j = 0; j &amp;lt; col; j++){ ar[i][j] = String.</description>
    </item>
    
  </channel>
</rss>