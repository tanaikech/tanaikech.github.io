<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tanaike</title>
    <link>https://tanaikech.github.io/</link>
    <description>Recent content on tanaike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Fri, 24 Feb 2017 12:29:32 +0900</lastBuildDate>
    <atom:link href="https://tanaikech.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>gogauth</title>
      <link>https://tanaikech.github.io/2017/02/24/gogauth</link>
      <pubDate>Fri, 24 Feb 2017 12:29:32 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/24/gogauth</guid>
      <description>&lt;p&gt;Released a CLI tool for easily retrieving accesstoken from Google OAuth2. The title is &lt;strong&gt;gogauth&lt;/strong&gt;. When I have seen stackoverflow, I knew that it is difficult to retrieve accesstoken from Google OAuth2. So I made this.&lt;/p&gt;

&lt;p&gt;Features of this CLI tool are as follows.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Retrieves easily accesstoken from Google OAuth2 for using Drive API.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you have PhantomeJS, this retrieves &amp;ldquo;code&amp;rdquo; from Google using it. So you don&amp;rsquo;t need to launch your browser for retrieving &amp;ldquo;code&amp;rdquo;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Uses expiration time of accesstoken.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Using gogauth, it will be able to easily use Drive API like &lt;a href=&#34;https://tanaikech.github.io/2017/02/08/file-upload-and-download-with-file-convert-for-curl-using-drive-api/&#34;&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can see and download gogauth from &lt;a href=&#34;https://github.com/tanaikech/gogauth&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Export CSV File from Spreadsheet and Make Download Button</title>
      <link>https://tanaikech.github.io/2017/02/20/export-csv-file-from-spreadsheet-and-make-download-button</link>
      <pubDate>Mon, 20 Feb 2017 10:00:28 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/20/export-csv-file-from-spreadsheet-and-make-download-button</guid>
      <description>&lt;p&gt;This is a script to export a CSV file from spreadsheet and make an user download it. When the users download it, they can download by push a button made by this script.&lt;/p&gt;

&lt;p&gt;In order to use this script, put both HTML and script in a GAS project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;html :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This file name is &amp;ldquo;download.html&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;
    Download CSV?
    &amp;lt;form&amp;gt;
      &amp;lt;input type=&amp;quot;button&amp;quot; value=&amp;quot;ok&amp;quot; onclick=&amp;quot;google.script.run
                                              .withSuccessHandler(executeDownload)
                                              .saveAsCSV();&amp;quot; /&amp;gt;
    &amp;lt;/form&amp;gt;
  &amp;lt;/body&amp;gt;
  &amp;lt;script&amp;gt;
    function executeDownload(url) {
      window.location.href = url;
    }
  &amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Script :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function onOpen() {
  SpreadsheetApp.getUi()
                .createMenu(&#39;csv&#39;)
                .addItem(&#39;export as csv files&#39;, &#39;dialog&#39;)
                .addToUi();
}

function dialog() {
  var html = HtmlService.createHtmlOutputFromFile(&#39;download&#39;);
  SpreadsheetApp.getUi().showModalDialog(html, &#39;CSV download dialog&#39;);
}

function saveAsCSV() {
    var filename = &amp;quot;#####&amp;quot;; // CSV file name
    var folder = &amp;quot;#####&amp;quot;; // Folder ID

    var csv = &amp;quot;&amp;quot;;
    var v = SpreadsheetApp
            .getActiveSpreadsheet()
            .getActiveSheet()
            .getDataRange()
            .getValues();
    v.forEach(function(e) {
      csv += e.join(&amp;quot;,&amp;quot;) + &amp;quot;\n&amp;quot;;
    });
    var url = DriveApp.getFolderById(folder)
              .createFile(filename, csv, MimeType.CSV)
              .getDownloadUrl()
              .replace(&amp;quot;?e=download&amp;amp;gd=true&amp;quot;,&amp;quot;&amp;quot;);
    return url;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Process :&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Using &amp;ldquo;onOpen()&amp;rdquo;, it addes menu for launching a dialog.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;After launching the dialog, &amp;ldquo;saveAsCSV()&amp;rdquo; is launched by pushing a button. &amp;ldquo;saveAsCSV()&amp;rdquo; exports a CSV file and outputs download URL. At current script, all of data on active sheet is retrieved and exported CSV. If you want to retrieve a range you need, please use &amp;ldquo;&lt;a href=&#34;https://developers.google.com/apps-script/reference/spreadsheet/sheet#getRange(Integer,Integer)&#34;&gt;getRange()&lt;/a&gt;&amp;rdquo;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The CSV file is downloaded by &amp;ldquo;executeDownload()&amp;rdquo;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can set csv file-name and output folder by &amp;ldquo;filename&amp;rdquo; and &amp;ldquo;folder&amp;rdquo;, respectively. In this sample, the source sheet is the sheet which opens currently. If you want to other sheet, please change this script.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Send E-mail with xlsx File Converted from Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/02/20/send-e-mail-with-xlsx-file-converted-from-spreadsheet</link>
      <pubDate>Mon, 20 Feb 2017 09:56:12 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/20/send-e-mail-with-xlsx-file-converted-from-spreadsheet</guid>
      <description>&lt;p&gt;This is a script to send e-mail with a xlsx file converted from spreadsheet as an attachment file. Access token is necessary to use this script.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function excelSender() {
  var accesstoken = &amp;quot;[your accesstoken]&amp;quot;;
  var sheetID = &amp;quot;[sheet id]&amp;quot;;
  var xlsxName = &amp;quot;[output xlsx file name]&amp;quot;
  var params = {
    &amp;quot;headers&amp;quot; : {Authorization: &amp;quot;Bearer &amp;quot; + accesstoken},
    &amp;quot;muteHttpExceptions&amp;quot; : true
  };
  var dUrl = &amp;quot;https://www.googleapis.com/drive/v3/files/&amp;quot; + sheetID + &amp;quot;/export?mimeType=application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&amp;quot;
  var xlsxlFile = UrlFetchApp.fetch(dUrl, params).getBlob().setName(xlsxName);
  MailApp.sendEmail({
    to: &amp;quot;[your mail address]&amp;quot;,
    subject: &amp;quot;sample mail&amp;quot;,
    body: &amp;quot;sample mail with an excel file&amp;quot;,
    attachments: [xlsxlFile]
  });
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Retrieving Access Token for Google Drive API using GAS</title>
      <link>https://tanaikech.github.io/2017/02/17/retrieving-access-token-for-google-drive-api-using-gas</link>
      <pubDate>Fri, 17 Feb 2017 17:25:29 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/17/retrieving-access-token-for-google-drive-api-using-gas</guid>
      <description>

&lt;p&gt;These GASs retrieve an access token for using Google Drive API. There are 3 parts. Before you use this, please retrieve client ID, client secret and redirect uri from Google , and choose scopes.&lt;/p&gt;

&lt;h3 id=&#34;1-retrieving-code-from-web&#34;&gt;1. Retrieving code from web&lt;/h3&gt;

&lt;p&gt;This is a script to output URL for retrieving &amp;ldquo;code&amp;rdquo; from web. Please retrieve &amp;ldquo;code&amp;rdquo; by import this URL to your browser. After you run this script, using &amp;ldquo;url&amp;rdquo; got from this script, it retrieves &amp;ldquo;code&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  var url = &#39;https://accounts.google.com/o/oauth2/auth&#39; +
        &amp;quot;?client_id=&amp;quot; + encodeURIComponent(clientid) +
        &amp;quot;&amp;amp;redirect_uri=&amp;quot; + encodeURIComponent(redirecturi) +
        &amp;quot;&amp;amp;scope=&amp;quot; + encodeURIComponent(scopes) +
        &amp;quot;&amp;amp;response_type=code&amp;amp;access_type=offline&amp;quot;;
  Logger.log(url);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-retrieving-refresh-token&#34;&gt;2. Retrieving refresh token&lt;/h3&gt;

&lt;p&gt;This is a script to retrieve &amp;ldquo;refresh token&amp;rdquo;. Before you run this script, it sets &amp;ldquo;code&amp;rdquo; got at part 1. By this script, you can also retrieve &amp;ldquo;access token&amp;rdquo;. Also this &amp;ldquo;access token&amp;rdquo; can be used. But there is a limit time for it. So you have to retrieve &amp;ldquo;access token&amp;rdquo; again. At that time, &amp;ldquo;refresh token&amp;rdquo; is need to it. According to &amp;ldquo;golang.org/x/oauth2&amp;rdquo;, it uses &amp;ldquo;refresh token&amp;rdquo; every time without using the limit time of access token. So this script can be used to only retrieve &amp;ldquo;refresh token&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  var token = JSON.parse(UrlFetchApp.fetch(&amp;quot;https://accounts.google.com/o/oauth2/token&amp;quot;, {
    &amp;quot;method&amp;quot; : &amp;quot;POST&amp;quot;,
    &amp;quot;payload&amp;quot; : {
      &amp;quot;code&amp;quot; : code,
      &amp;quot;client_id&amp;quot; : clientid,
      &amp;quot;client_secret&amp;quot; : clientsecret,
      &amp;quot;redirect_uri&amp;quot; : redirecturi,
      &amp;quot;grant_type&amp;quot; : &amp;quot;authorization_code&amp;quot;
    },
    &amp;quot;muteHttpExceptions&amp;quot; : true
  }).getContentText());
  Logger.log(token.refresh_token);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-retrieving-access-token&#34;&gt;3. Retrieving access token&lt;/h3&gt;

&lt;p&gt;This is a script to retrieve &amp;ldquo;access token&amp;rdquo; using &amp;ldquo;refresh token&amp;rdquo;. Before you run this script, it sets &amp;ldquo;refresh token&amp;rdquo; got at part 2. When you use Drive API, the &amp;ldquo;access token&amp;rdquo; can be retrieved by this script. You can continue to use &amp;ldquo;refresh token&amp;rdquo; got at part 2, until it&amp;rsquo;s revoked.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  var token = JSON.parse(UrlFetchApp.fetch(&amp;quot;https://www.googleapis.com/oauth2/v4/token&amp;quot;, {
    &amp;quot;method&amp;quot; : &amp;quot;POST&amp;quot;,
    &amp;quot;payload&amp;quot; : {
      &amp;quot;client_id&amp;quot; : clientid,
      &amp;quot;client_secret&amp;quot; : clientsecret,
      &amp;quot;refresh_token&amp;quot; :refreshtoken,
      &amp;quot;grant_type&amp;quot; : &amp;quot;refresh_token&amp;quot;
    },
    &amp;quot;muteHttpExceptions&amp;quot; : true
  }).getContentText());
  Logger.log(token.access_token);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Send E-mail with Excel file converted from Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/02/16/send-e-mail-with-excel-file-converted-from-spreadsheet</link>
      <pubDate>Thu, 16 Feb 2017 11:53:50 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/16/send-e-mail-with-excel-file-converted-from-spreadsheet</guid>
      <description>&lt;p&gt;This sample script sends an e-mail with an Excel file exported from Spreadsheet as an attachment file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function excelSender() {
  var sheetID = [Sheet ID];
  var xlsxName = [Excel file name];
  var params = {
    &amp;quot;headers&amp;quot; : {Authorization: &amp;quot;Bearer [Retrieved AccessToken]&amp;quot;},
    &amp;quot;muteHttpExceptions&amp;quot; : true
  };
  var dUrl = &amp;quot;https://www.googleapis.com/drive/v3/files/&amp;quot; + sheetID + &amp;quot;/export?mimeType=application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&amp;quot;
  var xlsxlFile = UrlFetchApp.fetch(dUrl, params).getBlob().setName(xlsxName);
  MailApp.sendEmail({
    to: [Mail address],
    subject: &amp;quot;sample subject&amp;quot;,
    body: &amp;quot;sample body&amp;quot;,
    attachments: [xlsxlFile]
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://tanaikech.github.io/img/170216b.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Is &lt;code&gt;ScriptApp.getOAuthToken()&lt;/code&gt; unstable? When it creates new GAS project, it can be used. But when the time has elapsed, the script cannot be used. On the other hand, when an access token manually retrieves without &lt;code&gt;getOAuthToken()&lt;/code&gt;, it can be used stably. The scopes I used are &lt;code&gt;https://www.googleapis.com/auth/drive&lt;/code&gt; and &lt;code&gt;https://www.googleapis.com/auth/drive.file&lt;/code&gt;. I don&amp;rsquo;t know about this reason.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Download a CSV File from Spreadsheet Using Google HTML Service</title>
      <link>https://tanaikech.github.io/2017/02/16/download-a-csv-file-from-spreadsheet-using-google-html-service</link>
      <pubDate>Thu, 16 Feb 2017 10:31:37 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/16/download-a-csv-file-from-spreadsheet-using-google-html-service</guid>
      <description>

&lt;p&gt;Here, I introduce how to download a CSV file from spreadsheet using Google HTML Service.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using &amp;ldquo;onOpen()&amp;rdquo;, it addes menu for launching a dialog.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://tanaikech.github.io/img/170216a.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;After launching the dialog, &amp;ldquo;getFileUrl()&amp;rdquo; is launched by pushing a button. &amp;ldquo;getFileUrl()&amp;rdquo; exports a CSV file and outputs download URL.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The CSV file is downloaded by &amp;ldquo;executeDownload()&amp;rdquo;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;u&gt;Please put both HTML and GAS to a GAS project.&lt;/u&gt;&lt;/p&gt;

&lt;h2 id=&#34;html-download-html&#34;&gt;HTML : download.html&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;
    Download CSV?
    &amp;lt;form&amp;gt;
      &amp;lt;input type=&amp;quot;button&amp;quot; value=&amp;quot;ok&amp;quot; onclick=&amp;quot;google.script.run
                                              .withSuccessHandler(executeDownload)
                                              .getFileUrl();&amp;quot; /&amp;gt;
    &amp;lt;/form&amp;gt;
  &amp;lt;/body&amp;gt;
  &amp;lt;script&amp;gt;
    function executeDownload(url) {
      window.location.href = url;
    }
  &amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;gas&#34;&gt;GAS :&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;function onOpen() {
  SpreadsheetApp.getUi()
                .createMenu(&#39;export&#39;)
                .addItem(&#39;export csv files&#39;, &#39;dialog&#39;)
                .addToUi();
}

function dialog() {
  var html = HtmlService.createHtmlOutputFromFile(&#39;download&#39;);
  SpreadsheetApp.getUi().showModalDialog(html, &#39;CSV download dialog&#39;);
}

function getFileUrl() {
    var filename = &amp;quot;#####&amp;quot;; // CSV file name
    var folder = &amp;quot;#####&amp;quot;; // Folder ID

    var csv = &amp;quot;&amp;quot;;
    var v = SpreadsheetApp // Now spreadsheet is an active sheet.
            .getActiveSpreadsheet()
            .getActiveSheet()
            .getDataRange()
            .getValues();
    v.forEach(function(e) {
      csv += e.join(&amp;quot;,&amp;quot;) + &amp;quot;\n&amp;quot;;
    });
    var url = DriveApp.getFolderById(folder)
              .createFile(filename, csv, MimeType.CSV)
              .getDownloadUrl()
              .replace(&amp;quot;?e=download&amp;amp;gd=true&amp;quot;,&amp;quot;&amp;quot;);
    return url;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Making charts at spreadsheet</title>
      <link>https://tanaikech.github.io/2017/02/13/making-charts-at-spreadsheet</link>
      <pubDate>Mon, 13 Feb 2017 08:57:58 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/13/making-charts-at-spreadsheet</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://tanaikech.github.io/img/table.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
 var chart = sheet.newChart()
    .setChartType(Charts.ChartType.LINE)
    .asLineChart()
    .addRange(sheet.getRange(&#39;a1:a21&#39;))
    .addRange(sheet.getRange(&#39;b1:b21&#39;))
    .addRange(sheet.getRange(&#39;c1:c21&#39;))
    .setColors([&amp;quot;green&amp;quot;, &amp;quot;red&amp;quot;])
    .setBackgroundColor(&amp;quot;black&amp;quot;)
    .setPosition(5, 5, 0, 0)
    .setPointStyle(Charts.PointStyle.MEDIUM)
    .setOption(&#39;useFirstColumnAsDomain&#39;, true)
    .setOption(&#39;height&#39;, 280)
    .setOption(&#39;width&#39;, 480)
    .setOption(&#39;title&#39;, &#39;Sample chart&#39;)
    .setOption(&#39;hAxis&#39;, {
      title: &#39;x axis&#39;,
      minValue: 0,
      maxValue: 20,
      titleTextStyle: {
        color: &#39;#c0c0c0&#39;,
        fontSize: 20,
        italic: false,
        bold: false
      },
      textStyle: {
        color: &#39;#c0c0c0&#39;,
        fontSize: 12,
        bold: false,
        italic: false
      },
      baselineColor: &#39;#c0c0c0&#39;,
      gridlines: {
        color: &#39;#c0c0c0&#39;,
        count: 4
      }
    })
    .setOption(&#39;vAxis&#39;, {title: &#39;y axis&#39;,
      minValue: 0,
      maxValue: 800,
      titleTextStyle: {
        color: &#39;#c0c0c0&#39;,
        fontSize: 20,
        italic: false,
        bold: false
      },
      textStyle: {
        color: &#39;#c0c0c0&#39;,
        fontSize: 12,
        bold: false,
        italic: false
      },
      baselineColor: &#39;#c0c0c0&#39;,
        gridlines: {
        color: &#39;#c0c0c0&#39;,
        count: 4
      }
    })
    .setOption(&#39;legend&#39;, {
      position: &#39;right&#39;,
      textStyle: {
        color: &#39;yellow&#39;,
        fontSize: 16
      }
    })
    .build();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://tanaikech.github.io/img/chart.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Reference pages are &lt;a href=&#34;https://developers.google.com/apps-script/reference/spreadsheet/embedded-line-chart-builder&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://developers.google.com/chart/interactive/docs/gallery/areachart#configuration-options&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>File Upload and Download with File Convert For curl using Drive API</title>
      <link>https://tanaikech.github.io/2017/02/08/file-upload-and-download-with-file-convert-for-curl-using-drive-api</link>
      <pubDate>Wed, 08 Feb 2017 15:50:52 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/08/file-upload-and-download-with-file-convert-for-curl-using-drive-api</guid>
      <description>

&lt;p&gt;It is necessary to retrieve access token on Google. Scope is as follows.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://www.googleapis.com/auth/drive
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Other mimetypes can be seen &lt;a href=&#34;https://developers.google.com/drive/v3/web/manage-downloads&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;download-and-convert-from-spreadsheet-to-excel&#34;&gt;Download and convert from Spreadsheet to Excel&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;curl -X GET -sSL \
        -H &amp;quot;Authorization: Bearer [Your access token]&amp;quot; \
        -o &amp;quot;Excel file name&amp;quot; \
        &amp;quot;https://www.googleapis.com/drive/v3/files/[File ID]/export?mimeType=application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;upload-and-convert-from-excel-to-spreadsheet&#34;&gt;Upload and convert from Excel to Spreadsheet&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;curl -X POST -sSL \
        -H &amp;quot;Authorization: Bearer [Your access token]&amp;quot; \
        -F &amp;quot;metadata={ \
                     name : &#39;[File name on Google Drive]&#39;, \
                     mimeType : &#39;application/vnd.google-apps.spreadsheet&#39; \
                     };type=application/json;charset=UTF-8&amp;quot; \
        -F &amp;quot;file=@[Your Excel file];type=application/vnd.ms-excel&amp;quot; \
        &amp;quot;https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Sample Array Script for Spreadsheet</title>
      <link>https://tanaikech.github.io/2017/02/08/sample-array-script-for-spreadsheet</link>
      <pubDate>Wed, 08 Feb 2017 08:50:38 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/08/sample-array-script-for-spreadsheet</guid>
      <description>&lt;p&gt;This is a Sample Array Script for Spreadsheet. It makes an 2D array filled by strings and number. The strings and number are column strings and row number, respectively.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;However, because this is a sample, the maximum column number is 26.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function sa(row, col){
  if (col &amp;gt; 26) return;

  var ar = new Array(row);
  for(var i = 0; i &amp;lt; row; i++) ar[i] = new Array(col);
  for (var i = 0; i &amp;lt; row; i++){
    for (var j = 0; j &amp;lt; col; j++){
      ar[i][j] = String.fromCharCode(i + 97) + String(j + 1);
    }
  }
  return ar.map(function(x, i){return x.map(function(y, j){return ar[j][i]})});
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When &amp;ldquo;sa(10,10)&amp;rdquo; is given, following array can be output.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[
    [a1, b1, c1, d1, e1, f1, g1, h1, i1, j1],
    [a2, b2, c2, d2, e2, f2, g2, h2, i2, j2],
    [a3, b3, c3, d3, e3, f3, g3, h3, i3, j3],
    [a4, b4, c4, d4, e4, f4, g4, h4, i4, j4],
    [a5, b5, c5, d5, e5, f5, g5, h5, i5, j5],
    [a6, b6, c6, d6, e6, f6, g6, h6, i6, j6],
    [a7, b7, c7, d7, e7, f7, g7, h7, i7, j7],
    [a8, b8, c8, d8, e8, f8, g8, h8, i8, j8],
    [a9, b9, c9, d9, e9, f9, g9, h9, i9, j9],
    [a10, b10, c10, d10, e10, f10, g10, h10, i10, j10]
]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Event of onEdit() for Google spreadsheet</title>
      <link>https://tanaikech.github.io/2017/02/07/event-of-onedit-for-google-spreadsheet</link>
      <pubDate>Tue, 07 Feb 2017 11:03:56 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/07/event-of-onedit-for-google-spreadsheet</guid>
      <description>

&lt;h1 id=&#34;about-event-objects&#34;&gt;About Event Objects&lt;/h1&gt;

&lt;p&gt;For example, it thinks the situation of input text of &amp;lsquo;test&amp;rsquo; to &amp;lsquo;A1&amp;rsquo; on a sheet.&lt;/p&gt;

&lt;p&gt;When you use only &amp;lsquo;onEdit(e)&amp;rsquo; without an installing trigger, &amp;lsquo;e&amp;rsquo; has following parameters.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{authMode=LIMITED, range=Range, source=Spreadsheet, user=, value=test}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, the event cannot send an e-mail because of &amp;lsquo;authMode=LIMITED&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;When you use &amp;ldquo;onEdit(e)&amp;rdquo; with an installing trigger of &amp;ldquo;Edit&amp;rdquo;, &amp;lsquo;e&amp;rsquo; has following parameters.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{authMode=FULL, range=Range, source=Spreadsheet, value=test, triggerUid=#####}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, the event can send an e-mail because of &amp;lsquo;authMode=FULL&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;&amp;lsquo;range&amp;rsquo; and &amp;lsquo;source&amp;rsquo; are the coordinate and spreadsheet of the edited cell, respectively. They can confirm using &amp;lsquo;e.range.getA1Notation()&amp;rsquo; and &amp;lsquo;getId()&amp;rsquo;, respectively.&lt;/p&gt;

&lt;h2 id=&#34;about-ljava-lang-object&#34;&gt;About [Ljava.lang.Object;&lt;/h2&gt;

&lt;p&gt;About &amp;ldquo;Form submit event&amp;rdquo; of GAS with spreadsheet, e.values and e.namedValues have &amp;ldquo;[Ljava.lang.Object;&amp;ldquo;. Using &amp;ldquo;JSON.Stringify()&amp;rdquo; like &amp;ldquo;JSON.stringify(e.values)&amp;rdquo;, &amp;ldquo;JSON.stringify(e.namedValues)&amp;rdquo;, values from &amp;ldquo;[Ljava.lang.Object;&amp;rdquo; can be retrieved.&lt;/p&gt;

&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;

&lt;p&gt;You can see the detailed information of sheet events from &lt;a href=&#34;https://developers.google.com/apps-script/guides/triggers/events&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>File upload using doPost on Google Web Apps</title>
      <link>https://tanaikech.github.io/2017/02/05/file-upload-using-dopost-on-google-web-apps</link>
      <pubDate>Sun, 05 Feb 2017 11:40:08 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/05/file-upload-using-dopost-on-google-web-apps</guid>
      <description>

&lt;h1 id=&#34;file-upload-using-html-form-in-gas-project&#34;&gt;File upload using HTML form in GAS project&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Rule&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Following scripts have to be made into a project of Google Apps Script.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Deploy the GAS project as a web application. &lt;a href=&#34;https://developers.google.com/apps-script/guides/web&#34;&gt;Ref&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;After updated the script, it has to be updated as a new version.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Form.html :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;form&amp;gt;
      &amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;imageFile&amp;quot;&amp;gt;
      &amp;lt;input type=&amp;quot;button&amp;quot; value=&amp;quot;ok&amp;quot; onclick=&amp;quot;google.script.run.upload(this.parentNode)&amp;quot;&amp;gt;
    &amp;lt;/form&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;GAS :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function doGet() {
  return HtmlService.createHtmlOutputFromFile(&#39;Form.html&#39;);
}

function upload(e) {
  var destination_id = &#39;#####&#39;; // Folder ID of destination folder

  // Reference : https://developers.google.com/apps-script/reference/base/blob#getAs(String)
  // You can use &#39;application/pdf&#39;, &#39;image/bmp&#39;, &#39;image/gif&#39;, &#39;image/jpeg&#39; and &#39;image/png&#39;.
  var contentType = &#39;image/jpeg&#39;;
  var img = e.imageFile;

  var destination = DriveApp.getFolderById(destination_id);
  var img = img.getAs(contentType);
  destination.createFile(img);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you set &amp;lsquo;image/jpeg&amp;rsquo; as &amp;ldquo;contentType&amp;rdquo; and upload png file, the uploaded image file is converted to jpeg file and saved it to the destination folder.&lt;/p&gt;

&lt;h1 id=&#34;file-upload-from-local-pc&#34;&gt;File upload from local PC&lt;/h1&gt;

&lt;p&gt;For the Web API of Google HTML service, cannot &amp;ldquo;multipart/form-data&amp;rdquo; be used from local HTML form? Although I investigated it and tried various methods of file upload using &amp;ldquo;multipart/form-data&amp;rdquo;, all of them didn&amp;rsquo;t work. So I thought other method which is file upload without &amp;ldquo;multipart/form-data&amp;rdquo;. Of course, if you use Drive API, file upload can be easily done. But I wanted to achieve the file upload using Web API of Google HTML service. I think that this is self-satisfaction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rule&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Following GAS has to be made into a project of Google Apps Script.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Deploy the GAS project as a web application. &lt;a href=&#34;https://developers.google.com/apps-script/guides/web&#34;&gt;Ref&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;After updated the script, it has to be updated as a new version.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;GAS :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This script is very simple sample. It uploads image files of bmp, gif, jpeg, png and svg. When you want to upload other files, please change following script.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function doGet(e) {
  return message(&amp;quot;Error: no parameters&amp;quot;);
}

function doPost(e) {
  if (!e.parameters.filename || !e.parameters.file || !e.parameters.imageformat) {
    return message(&amp;quot;Error: Bad parameters&amp;quot;);
  } else {
    var imgf = e.parameters.imageformat[0].toUpperCase();
    var mime =
        (imgf == &#39;BMP&#39;)  ? MimeType.BMP
      : (imgf == &#39;GIF&#39;)  ? MimeType.GIF
      : (imgf == &#39;JPEG&#39;) ? MimeType.JPEG
      : (imgf == &#39;PNG&#39;)  ? MimeType.PNG
      : (imgf == &#39;SVG&#39;)  ? MimeType.SVG
      : false;
    if (mime) {
      var data = Utilities.base64Decode(e.parameters.file, Utilities.Charset.UTF_8);
      var blob = Utilities.newBlob(data, mime, e.parameters.filename);
      DriveApp.getFolderById(&#39;FOLDER ID&#39;).createFile(blob);
      return message(&amp;quot;completed&amp;quot;);
    } else {
      return message(&amp;quot;Error: Bad image format&amp;quot;);
    }
  }
}

function message(msg) {
  return ContentService.createTextOutput(JSON.stringify({result: msg})).setMimeType(ContentService.MimeType.JSON);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;curl :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -L \
    -F &#39;filename=[file name on Google Drive]&#39; \
    -F &#39;imageformat=[image format (bmp, gif, jpeg, png and svg)]&#39; \
    -F &amp;quot;file=`base64 [upload file]`&amp;quot; \
    &#39;[Current web app URL (https://script.google.com/macros/s/[Project ID]/exec)]&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using &amp;ldquo;doPost&amp;rdquo; of &lt;a href=&#34;https://developers.google.com/apps-script/guides/web&#34;&gt;Google Web Apps&lt;/a&gt;, files cannot be uploaded from local PC, while text data which isn&amp;rsquo;t a file can be uploaded. So I thought that it converted from image data to base64 data, and upload it. By this, it was found that various files can be uploaded from local HTML form using &amp;ldquo;doPost&amp;rdquo; of Google Web Apps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;html form :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;script src=&amp;quot;http://code.jquery.com/jquery-latest.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;input type=&amp;quot;file&amp;quot; id=&amp;quot;file&amp;quot;&amp;gt;

    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
        $(function(){
            var url = &#39;https://script.google.com/macros/s/[Project ID]/exec&#39;;
            var params = {
                filename: &#39;samplefile&#39;,
                imageformat: &#39;PNG&#39;
            };

            $(&#39;#file&#39;).on(&amp;quot;change&amp;quot;, function() {
                var file = this.files[0];
                var fr = new FileReader();
                fr.onload = function(e) {
                    params.file = e.target.result.replace(/^.*,/, &#39;&#39;);
                    postJump();
                }
                fr.readAsDataURL(file);
            });

            function postJump(){
                var html = &#39;&amp;lt;form method=&amp;quot;post&amp;quot; action=&amp;quot;&#39;+url+&#39;&amp;quot; id=&amp;quot;postjump&amp;quot; style=&amp;quot;display: none;&amp;quot;&amp;gt;&#39;;
                Object.keys(params).forEach(function (key) {
                    html += &#39;&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;&#39;+key+&#39;&amp;quot; value=&amp;quot;&#39;+params[key]+&#39;&amp;quot; &amp;gt;&#39;;
                });
                html += &#39;&amp;lt;/form&amp;gt;&#39;;
                $(&amp;quot;body&amp;quot;).append(html);
                $(&#39;#postjump&#39;).submit();
                $(&#39;#postjump&#39;).remove();
            }
        });
    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Add next row to current row using AWK</title>
      <link>https://tanaikech.github.io/2017/02/05/add-next-row-to-current-row-using-awk</link>
      <pubDate>Sun, 05 Feb 2017 11:03:30 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/05/add-next-row-to-current-row-using-awk</guid>
      <description>&lt;p&gt;&lt;strong&gt;File.txt :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a1
a2
a3
a4
a5
a6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Code :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;awk &#39;{array[NR]=$0} END {for (i in array) {if (i&amp;gt;1) {{print array[i-1]&amp;quot;,&amp;quot;array[i]}}}}&#39; File.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Result :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a1,a2
a2,a3
a3,a4
a4,a5
a5,a6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the all rows are imported to an array, it shows next row to current row under a condition of row &amp;gt; 1.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Retrieving cells without blank using GAS</title>
      <link>https://tanaikech.github.io/2017/02/03/retrieving-cells-without-blank-using-gas</link>
      <pubDate>Fri, 03 Feb 2017 10:14:25 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/02/03/retrieving-cells-without-blank-using-gas</guid>
      <description>

&lt;p&gt;This is a sample script for retrieving cells without blank cells. Figure 1 shows the sample spreadsheet. In this sheet, &lt;u&gt;the row 14 has one space.&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://tanaikech.github.io/img/fig170203a.png&#34; alt=&#34;&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Fig. 1: Sample spreadsheet.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Data is retrieved as follows.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  var data = SpreadsheetApp
             .getActiveSpreadsheet()
             .getActiveSheet()
             .getRange(&#39;a1:a30&#39;)
             .getValues();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;1-retrieving-cells-with-spaces-and-no-blank-cells&#34;&gt;1. Retrieving cells with spaces and no blank cells.&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;  var Result = [i for each (i in data)if (i)].join(&#39;&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Result : Hello World&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-retrieving-cells-without-both-spaces-and-blank-cells&#34;&gt;2. Retrieving cells without both spaces and blank cells.&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;  var Result = [i for each (i in data)if (isNaN(i))].join(&#39;&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Result : HelloWorld&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>One Liner Code for Netatmo</title>
      <link>https://tanaikech.github.io/2017/01/11/one-liner-code-for-netatmo</link>
      <pubDate>Wed, 11 Jan 2017 15:00:01 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2017/01/11/one-liner-code-for-netatmo</guid>
      <description>

&lt;p&gt;I made One Liner Code to retrieve data using Netatmo API. There are 2 ways. One is for windows dos. Another is for unix bash. Requirement tools are curl and jq.&lt;/p&gt;

&lt;h3 id=&#34;windows-dos&#34;&gt;windows dos&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; setlocal &amp;amp; curl -s -d &amp;quot;grant_type=password&amp;amp;client_id=&#39;#####&#39;&amp;amp;client_secret=&#39;#####&#39;&amp;amp;username=&#39;#####&#39;&amp;amp;password=&#39;#####&#39;&amp;amp;scope=read_station&amp;quot; &amp;quot;https://api.netatmo.net/oauth2/token&amp;quot; | for /f &amp;quot;usebackq tokens=*&amp;quot; %a in (`jq -r &amp;quot;.access_token&amp;quot;`) do @set a=&amp;quot;%a&amp;quot; | curl -s -d &amp;quot;access_token=%a&amp;amp;device_id=&#39;#####&#39;&amp;quot; &amp;quot;https://api.netatmo.net/api/getstationsdata&amp;quot; &amp;gt; dat.txt &amp;amp; for /f &amp;quot;usebackq tokens=*&amp;quot; %b in (`jq -r &amp;quot;.body.devices[0].dashboard_data.Temperature&amp;quot; dat.txt`) do @set b=&amp;quot;%b&amp;quot; | echo: &amp;amp; set /p nb=Indoor: Temperature %b [degree C],&amp;lt;nul &amp;amp; for /f &amp;quot;usebackq tokens=*&amp;quot; %b in (`jq -r &amp;quot;.body.devices[0].dashboard_data.Humidity&amp;quot; dat.txt`) do @set b=&amp;quot;%b&amp;quot; | set /p nb=Humidity %b [%],&amp;lt;nul &amp;amp; for /f &amp;quot;usebackq tokens=*&amp;quot; %b in (`jq -r &amp;quot;.body.devices[0].dashboard_data.Pressure&amp;quot; dat.txt`) do @set b=&amp;quot;%b&amp;quot; | set /p nb=Pressure %b [hPa]&amp;lt;nul &amp;amp; for /f &amp;quot;usebackq tokens=*&amp;quot; %b in (`jq -r &amp;quot;.body.devices[0].modules[0].dashboard_data.Temperature&amp;quot; dat.txt`) do @set b=&amp;quot;%b&amp;quot; | echo: &amp;amp; set /p nb=Outdoor: Temperature %b [degree C],&amp;lt;nul &amp;amp; for /f &amp;quot;usebackq tokens=*&amp;quot; %b in (`jq -r &amp;quot;.body.devices[0].modules[0].dashboard_data.Humidity&amp;quot; dat.txt`) do @set b=&amp;quot;%b&amp;quot; | set /p nb=Humidity %b [%]&amp;lt;nul &amp;amp; del dat.txt

Indoor: Temperature 12 [degree C],  Humidity 56 [%],  Pressure 1000.2 [hPa]
Outdoor: Temperature 12.3 [degree C],  Humidity 56 [%]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;unix-bash&#34;&gt;unix bash&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ curl -s -d &amp;quot;grant_type=password&amp;amp;client_id=&#39;#####&#39;&amp;amp;client_secret=&#39;#####&#39;&amp;amp;username=&#39;#####&#39;&amp;amp;password=&#39;#####&#39;&amp;amp;scope=read_station&amp;quot; &amp;quot;https://api.netatmo.net/oauth2/token&amp;quot;|curl -s -d &amp;quot;access_token=`jq -r &#39;.access_token&#39;`&amp;amp;device_id=&#39;#####&#39;&amp;quot; &amp;quot;https://api.netatmo.net/api/getstationsdata&amp;quot;|jq -r &#39;&amp;quot;\nIndoor: Temperature &amp;quot;+(.body.devices[0].dashboard_data.Temperature|tostring)+&amp;quot; [degree C], Humidity &amp;quot;+(.body.devices[0].dashboard_data.Humidity|tostring)+&amp;quot; [%], Pressure &amp;quot;+(.body.devices[0].dashboard_data.Pressure|tostring)+&amp;quot; [hPa]\nOutdoor: Temperature &amp;quot;+(.body.devices[0].modules[0].dashboard_data.Temperature|tostring)+&amp;quot; [degree C], Humidity &amp;quot;+(.body.devices[0].modules[0].dashboard_data.Humidity|tostring)+&amp;quot; [%]&amp;quot;&#39;

Indoor: Temperature 12 [degree C], Humidity 56 [%], Pressure 1000.2 [hPa]
Outdoor: Temperature 12.3 [degree C], Humidity 56 [%]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to use these One Liner Codes, you can use following code. Please replace &amp;ldquo;#####&amp;rdquo; to yours.&lt;/p&gt;

&lt;p&gt;Also you can see the detailed information at &lt;a href=&#34;https://github.com/tanaikech/cui4netatmo&#34;&gt;https://github.com/tanaikech/cui4netatmo&lt;/a&gt;. You will see 2 scripts except for one-liner code. These scripts retrieve data from netatmo using refresh token.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Library for python</title>
      <link>https://tanaikech.github.io/2016/10/30/library-for-python</link>
      <pubDate>Sun, 30 Oct 2016 13:38:29 +0900</pubDate>
      
      <guid>https://tanaikech.github.io/2016/10/30/library-for-python</guid>
      <description>&lt;p&gt;This &amp;ldquo;souwapy&amp;rdquo; is a library for summing array elements with high speed by new algorithm (&lt;a href=&#34;https://tanaikech.github.io/2016/10/13/improved-algorithms-for-summation-of-array-elements/&#34;&gt;Pyramid method&lt;/a&gt;). The speed is faster than csv and panbdas module of python and v8 engine of node.js. The souwapy module is 2.3 and 3.1 times faster than csv and pandas module, respectively. This was really surprised me. It was found that the theory was correct.&lt;/p&gt;

&lt;p&gt;At first, I have created this theory for Google Apps Script. But recently I had to use large data and output a csv file on python. So I made this library. Additionally, I had wanted to know how to public own library to PyPI before. This chance was good for me. If this library is helpful for other people, I&amp;rsquo;m glad.&lt;/p&gt;

&lt;p&gt;The detailed information of souwapy is as follows. You can know how to install and use this library.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;PyPI &amp;ndash;&amp;gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pypi.python.org/pypi/souwapy&#34;&gt;https://pypi.python.org/pypi/souwapy&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;GitHub &amp;ndash;&amp;gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/tanaikech/souwapy&#34;&gt;https://github.com/tanaikech/souwapy&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
  </channel>
</rss>